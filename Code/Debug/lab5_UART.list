
lab5_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000658c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800671c  0800671c  0001671c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006784  08006784  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08006784  08006784  00016784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800678c  0800678c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800678c  0800678c  0001678c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006790  08006790  00016790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08006794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          000003a8  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000040c  2000040c  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017411  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c76  00000000  00000000  000374e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001518  00000000  00000000  0003b160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001062  00000000  00000000  0003c678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024435  00000000  00000000  0003d6da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e380  00000000  00000000  00061b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d3371  00000000  00000000  0007fe8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005bf4  00000000  00000000  00153200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00158df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006704 	.word	0x08006704

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08006704 	.word	0x08006704

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000570:	2201      	movs	r2, #1
 8000572:	2108      	movs	r1, #8
 8000574:	4802      	ldr	r0, [pc, #8]	; (8000580 <button_init+0x14>)
 8000576:	f001 fda5 	bl	80020c4 <HAL_GPIO_WritePin>
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40020c00 	.word	0x40020c00

08000584 <button_Scan>:

void button_Scan(){
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2108      	movs	r1, #8
 800058e:	482f      	ldr	r0, [pc, #188]	; (800064c <button_Scan+0xc8>)
 8000590:	f001 fd98 	bl	80020c4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000594:	2201      	movs	r2, #1
 8000596:	2108      	movs	r1, #8
 8000598:	482c      	ldr	r0, [pc, #176]	; (800064c <button_Scan+0xc8>)
 800059a:	f001 fd93 	bl	80020c4 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800059e:	230a      	movs	r3, #10
 80005a0:	2202      	movs	r2, #2
 80005a2:	492b      	ldr	r1, [pc, #172]	; (8000650 <button_Scan+0xcc>)
 80005a4:	482b      	ldr	r0, [pc, #172]	; (8000654 <button_Scan+0xd0>)
 80005a6:	f003 fa0c 	bl	80039c2 <HAL_SPI_Receive>
	  int button_index = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005b2:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	e03f      	b.n	800063a <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db06      	blt.n	80005ce <button_Scan+0x4a>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b03      	cmp	r3, #3
 80005c4:	dc03      	bgt.n	80005ce <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3304      	adds	r3, #4
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e018      	b.n	8000600 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	dd07      	ble.n	80005e4 <button_Scan+0x60>
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b07      	cmp	r3, #7
 80005d8:	dc04      	bgt.n	80005e4 <button_Scan+0x60>
			  button_index = 7 - i;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f1c3 0307 	rsb	r3, r3, #7
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	e00d      	b.n	8000600 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b07      	cmp	r3, #7
 80005e8:	dd06      	ble.n	80005f8 <button_Scan+0x74>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2b0b      	cmp	r3, #11
 80005ee:	dc03      	bgt.n	80005f8 <button_Scan+0x74>
			  button_index = i + 4;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3304      	adds	r3, #4
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	e003      	b.n	8000600 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f1c3 0317 	rsb	r3, r3, #23
 80005fe:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <button_Scan+0xcc>)
 8000602:	881a      	ldrh	r2, [r3, #0]
 8000604:	897b      	ldrh	r3, [r7, #10]
 8000606:	4013      	ands	r3, r2
 8000608:	b29b      	uxth	r3, r3
 800060a:	2b00      	cmp	r3, #0
 800060c:	d005      	beq.n	800061a <button_Scan+0x96>
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <button_Scan+0xd4>)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2100      	movs	r1, #0
 8000614:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000618:	e009      	b.n	800062e <button_Scan+0xaa>
		  else button_count[button_index]++;
 800061a:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <button_Scan+0xd4>)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000622:	3301      	adds	r3, #1
 8000624:	b299      	uxth	r1, r3
 8000626:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <button_Scan+0xd4>)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800062e:	897b      	ldrh	r3, [r7, #10]
 8000630:	085b      	lsrs	r3, r3, #1
 8000632:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3301      	adds	r3, #1
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b0f      	cmp	r3, #15
 800063e:	ddbc      	ble.n	80005ba <button_Scan+0x36>
	  }
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40020c00 	.word	0x40020c00
 8000650:	200000a0 	.word	0x200000a0
 8000654:	20000170 	.word	0x20000170
 8000658:	20000080 	.word	0x20000080

0800065c <ds3231_ReadTime>:
void ds3231_Write(uint8_t address, uint8_t value){
	uint8_t temp = DEC2BCD(value);
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
}

void ds3231_ReadTime(){
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000662:	230a      	movs	r3, #10
 8000664:	9302      	str	r3, [sp, #8]
 8000666:	2307      	movs	r3, #7
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	4b25      	ldr	r3, [pc, #148]	; (8000700 <ds3231_ReadTime+0xa4>)
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2301      	movs	r3, #1
 8000670:	2200      	movs	r2, #0
 8000672:	21d0      	movs	r1, #208	; 0xd0
 8000674:	4823      	ldr	r0, [pc, #140]	; (8000704 <ds3231_ReadTime+0xa8>)
 8000676:	f001 fe9d 	bl	80023b4 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 800067a:	4b21      	ldr	r3, [pc, #132]	; (8000700 <ds3231_ReadTime+0xa4>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	4618      	mov	r0, r3
 8000680:	f001 f906 	bl	8001890 <BCD2DEC>
 8000684:	4603      	mov	r3, r0
 8000686:	461a      	mov	r2, r3
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <ds3231_ReadTime+0xac>)
 800068a:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 800068c:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <ds3231_ReadTime+0xa4>)
 800068e:	785b      	ldrb	r3, [r3, #1]
 8000690:	4618      	mov	r0, r3
 8000692:	f001 f8fd 	bl	8001890 <BCD2DEC>
 8000696:	4603      	mov	r3, r0
 8000698:	461a      	mov	r2, r3
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <ds3231_ReadTime+0xb0>)
 800069c:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 800069e:	4b18      	ldr	r3, [pc, #96]	; (8000700 <ds3231_ReadTime+0xa4>)
 80006a0:	789b      	ldrb	r3, [r3, #2]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 f8f4 	bl	8001890 <BCD2DEC>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <ds3231_ReadTime+0xb4>)
 80006ae:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80006b0:	4b13      	ldr	r3, [pc, #76]	; (8000700 <ds3231_ReadTime+0xa4>)
 80006b2:	78db      	ldrb	r3, [r3, #3]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 f8eb 	bl	8001890 <BCD2DEC>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <ds3231_ReadTime+0xb8>)
 80006c0:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <ds3231_ReadTime+0xa4>)
 80006c4:	791b      	ldrb	r3, [r3, #4]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 f8e2 	bl	8001890 <BCD2DEC>
 80006cc:	4603      	mov	r3, r0
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <ds3231_ReadTime+0xbc>)
 80006d2:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <ds3231_ReadTime+0xa4>)
 80006d6:	795b      	ldrb	r3, [r3, #5]
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 f8d9 	bl	8001890 <BCD2DEC>
 80006de:	4603      	mov	r3, r0
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <ds3231_ReadTime+0xc0>)
 80006e4:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <ds3231_ReadTime+0xa4>)
 80006e8:	799b      	ldrb	r3, [r3, #6]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f8d0 	bl	8001890 <BCD2DEC>
 80006f0:	4603      	mov	r3, r0
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <ds3231_ReadTime+0xc4>)
 80006f6:	701a      	strb	r2, [r3, #0]
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200000a4 	.word	0x200000a4
 8000704:	20000108 	.word	0x20000108
 8000708:	200000ad 	.word	0x200000ad
 800070c:	200000ac 	.word	0x200000ac
 8000710:	200000ab 	.word	0x200000ab
 8000714:	200000af 	.word	0x200000af
 8000718:	200000ae 	.word	0x200000ae
 800071c:	200000b0 	.word	0x200000b0
 8000720:	200000b1 	.word	0x200000b1

08000724 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08e      	sub	sp, #56	; 0x38
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
 800073a:	615a      	str	r2, [r3, #20]
 800073c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800073e:	463b      	mov	r3, r7
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
 800074c:	615a      	str	r2, [r3, #20]
 800074e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000750:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <MX_FSMC_Init+0xec>)
 8000752:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000756:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000758:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <MX_FSMC_Init+0xec>)
 800075a:	4a2e      	ldr	r2, [pc, #184]	; (8000814 <MX_FSMC_Init+0xf0>)
 800075c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800075e:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <MX_FSMC_Init+0xec>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000764:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <MX_FSMC_Init+0xec>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800076a:	4b29      	ldr	r3, [pc, #164]	; (8000810 <MX_FSMC_Init+0xec>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000770:	4b27      	ldr	r3, [pc, #156]	; (8000810 <MX_FSMC_Init+0xec>)
 8000772:	2210      	movs	r2, #16
 8000774:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_FSMC_Init+0xec>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <MX_FSMC_Init+0xec>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000782:	4b23      	ldr	r3, [pc, #140]	; (8000810 <MX_FSMC_Init+0xec>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <MX_FSMC_Init+0xec>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <MX_FSMC_Init+0xec>)
 8000790:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000796:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <MX_FSMC_Init+0xec>)
 8000798:	2200      	movs	r2, #0
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_FSMC_Init+0xec>)
 800079e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_FSMC_Init+0xec>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_FSMC_Init+0xec>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_FSMC_Init+0xec>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80007b6:	230f      	movs	r3, #15
 80007b8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80007ba:	230f      	movs	r3, #15
 80007bc:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80007be:	233c      	movs	r3, #60	; 0x3c
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80007c6:	2310      	movs	r3, #16
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80007ca:	2311      	movs	r3, #17
 80007cc:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80007ce:	2300      	movs	r3, #0
 80007d0:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80007d2:	2308      	movs	r3, #8
 80007d4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80007d6:	230f      	movs	r3, #15
 80007d8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80007da:	2309      	movs	r3, #9
 80007dc:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80007e2:	2310      	movs	r3, #16
 80007e4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80007e6:	2311      	movs	r3, #17
 80007e8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80007ee:	463a      	mov	r2, r7
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4619      	mov	r1, r3
 80007f6:	4806      	ldr	r0, [pc, #24]	; (8000810 <MX_FSMC_Init+0xec>)
 80007f8:	f003 fcc6 	bl	8004188 <HAL_SRAM_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000802:	f000 fd3b 	bl	800127c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000806:	bf00      	nop
 8000808:	3738      	adds	r7, #56	; 0x38
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000b4 	.word	0x200000b4
 8000814:	a0000104 	.word	0xa0000104

08000818 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <HAL_FSMC_MspInit+0x88>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d131      	bne.n	8000898 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000834:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <HAL_FSMC_MspInit+0x88>)
 8000836:	2201      	movs	r2, #1
 8000838:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <HAL_FSMC_MspInit+0x8c>)
 8000840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000842:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <HAL_FSMC_MspInit+0x8c>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6393      	str	r3, [r2, #56]	; 0x38
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <HAL_FSMC_MspInit+0x8c>)
 800084c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000856:	f64f 7388 	movw	r3, #65416	; 0xff88
 800085a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000868:	230c      	movs	r3, #12
 800086a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	4619      	mov	r1, r3
 8000870:	480d      	ldr	r0, [pc, #52]	; (80008a8 <HAL_FSMC_MspInit+0x90>)
 8000872:	f001 fa8b 	bl	8001d8c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000876:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800087a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000888:	230c      	movs	r3, #12
 800088a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4619      	mov	r1, r3
 8000890:	4806      	ldr	r0, [pc, #24]	; (80008ac <HAL_FSMC_MspInit+0x94>)
 8000892:	f001 fa7b 	bl	8001d8c <HAL_GPIO_Init>
 8000896:	e000      	b.n	800089a <HAL_FSMC_MspInit+0x82>
    return;
 8000898:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000104 	.word	0x20000104
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40020c00 	.word	0x40020c00

080008b0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80008b8:	f7ff ffae 	bl	8000818 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	; 0x30
 80008c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	4b6f      	ldr	r3, [pc, #444]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a6e      	ldr	r2, [pc, #440]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 80008e4:	f043 0310 	orr.w	r3, r3, #16
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b6c      	ldr	r3, [pc, #432]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0310 	and.w	r3, r3, #16
 80008f2:	61bb      	str	r3, [r7, #24]
 80008f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	4b68      	ldr	r3, [pc, #416]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a67      	ldr	r2, [pc, #412]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b65      	ldr	r3, [pc, #404]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b61      	ldr	r3, [pc, #388]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a60      	ldr	r2, [pc, #384]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b5e      	ldr	r3, [pc, #376]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b5a      	ldr	r3, [pc, #360]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a59      	ldr	r2, [pc, #356]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b57      	ldr	r3, [pc, #348]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	4b53      	ldr	r3, [pc, #332]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a52      	ldr	r2, [pc, #328]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b50      	ldr	r3, [pc, #320]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b4c      	ldr	r3, [pc, #304]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a4b      	ldr	r2, [pc, #300]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b49      	ldr	r3, [pc, #292]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	4b45      	ldr	r3, [pc, #276]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a44      	ldr	r2, [pc, #272]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b42      	ldr	r3, [pc, #264]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2170      	movs	r1, #112	; 0x70
 80009a2:	483f      	ldr	r0, [pc, #252]	; (8000aa0 <MX_GPIO_Init+0x1dc>)
 80009a4:	f001 fb8e 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ae:	483d      	ldr	r0, [pc, #244]	; (8000aa4 <MX_GPIO_Init+0x1e0>)
 80009b0:	f001 fb88 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2140      	movs	r1, #64	; 0x40
 80009b8:	483b      	ldr	r0, [pc, #236]	; (8000aa8 <MX_GPIO_Init+0x1e4>)
 80009ba:	f001 fb83 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c4:	4839      	ldr	r0, [pc, #228]	; (8000aac <MX_GPIO_Init+0x1e8>)
 80009c6:	f001 fb7d 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2108      	movs	r1, #8
 80009ce:	4838      	ldr	r0, [pc, #224]	; (8000ab0 <MX_GPIO_Init+0x1ec>)
 80009d0:	f001 fb78 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80009d4:	2370      	movs	r3, #112	; 0x70
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	482d      	ldr	r0, [pc, #180]	; (8000aa0 <MX_GPIO_Init+0x1dc>)
 80009ec:	f001 f9ce 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80009f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4826      	ldr	r0, [pc, #152]	; (8000aa4 <MX_GPIO_Init+0x1e0>)
 8000a0a:	f001 f9bf 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000a0e:	23c0      	movs	r3, #192	; 0xc0
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4822      	ldr	r0, [pc, #136]	; (8000aac <MX_GPIO_Init+0x1e8>)
 8000a22:	f001 f9b3 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000a26:	2330      	movs	r3, #48	; 0x30
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	481a      	ldr	r0, [pc, #104]	; (8000aa4 <MX_GPIO_Init+0x1e0>)
 8000a3a:	f001 f9a7 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000a3e:	2340      	movs	r3, #64	; 0x40
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4814      	ldr	r0, [pc, #80]	; (8000aa8 <MX_GPIO_Init+0x1e4>)
 8000a56:	f001 f999 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <MX_GPIO_Init+0x1e8>)
 8000a74:	f001 f98a 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000a78:	2308      	movs	r3, #8
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <MX_GPIO_Init+0x1ec>)
 8000a90:	f001 f97c 	bl	8001d8c <HAL_GPIO_Init>

}
 8000a94:	bf00      	nop
 8000a96:	3730      	adds	r7, #48	; 0x30
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40021800 	.word	0x40021800
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40020c00 	.word	0x40020c00

08000ab4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000aba:	4a13      	ldr	r2, [pc, #76]	; (8000b08 <MX_I2C1_Init+0x54>)
 8000abc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ac0:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MX_I2C1_Init+0x58>)
 8000ac2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ad2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ad6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000af2:	f001 fb1b 	bl	800212c <HAL_I2C_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000afc:	f000 fbbe 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000108 	.word	0x20000108
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	000186a0 	.word	0x000186a0

08000b10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <HAL_I2C_MspInit+0x84>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d12b      	bne.n	8000b8a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b4e:	23c0      	movs	r3, #192	; 0xc0
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b52:	2312      	movs	r3, #18
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	480c      	ldr	r0, [pc, #48]	; (8000b9c <HAL_I2C_MspInit+0x8c>)
 8000b6a:	f001 f90f 	bl	8001d8c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	; 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40005400 	.word	0x40005400
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020400 	.word	0x40020400

08000ba0 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <LCD_WR_REG+0x1c>)
 8000bac:	88fb      	ldrh	r3, [r7, #6]
 8000bae:	8013      	strh	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	600ffffe 	.word	0x600ffffe

08000bc0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000bca:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <LCD_WR_DATA+0x1c>)
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	8053      	strh	r3, [r2, #2]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	600ffffe 	.word	0x600ffffe

08000be0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <LCD_RD_DATA+0x20>)
 8000be8:	885b      	ldrh	r3, [r3, #2]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000bee:	88fb      	ldrh	r3, [r7, #6]
 8000bf0:	b29b      	uxth	r3, r3
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	600ffffe 	.word	0x600ffffe

08000c04 <mypow>:
		}
	}
}

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	460a      	mov	r2, r1
 8000c0e:	71fb      	strb	r3, [r7, #7]
 8000c10:	4613      	mov	r3, r2
 8000c12:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000c18:	e004      	b.n	8000c24 <mypow+0x20>
 8000c1a:	79fa      	ldrb	r2, [r7, #7]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	fb02 f303 	mul.w	r3, r2, r3
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	79bb      	ldrb	r3, [r7, #6]
 8000c26:	1e5a      	subs	r2, r3, #1
 8000c28:	71ba      	strb	r2, [r7, #6]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1f5      	bne.n	8000c1a <mypow+0x16>
	return result;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	091b      	lsrs	r3, r3, #4
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d007      	beq.n	8000c66 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <lcd_SetDir+0x44>)
 8000c58:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c5c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <lcd_SetDir+0x44>)
 8000c60:	22f0      	movs	r2, #240	; 0xf0
 8000c62:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000c64:	e006      	b.n	8000c74 <lcd_SetDir+0x38>
		lcddev.width=240;
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <lcd_SetDir+0x44>)
 8000c68:	22f0      	movs	r2, #240	; 0xf0
 8000c6a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <lcd_SetDir+0x44>)
 8000c6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c72:	805a      	strh	r2, [r3, #2]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	2000015c 	.word	0x2000015c

08000c84 <lcd_init>:


void lcd_init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8e:	48aa      	ldr	r0, [pc, #680]	; (8000f38 <lcd_init+0x2b4>)
 8000c90:	f001 fa18 	bl	80020c4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000c94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c98:	f000 feb0 	bl	80019fc <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca2:	48a5      	ldr	r0, [pc, #660]	; (8000f38 <lcd_init+0x2b4>)
 8000ca4:	f001 fa0e 	bl	80020c4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000ca8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cac:	f000 fea6 	bl	80019fc <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff ffc3 	bl	8000c3c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000cb6:	20d3      	movs	r0, #211	; 0xd3
 8000cb8:	f7ff ff72 	bl	8000ba0 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000cbc:	f7ff ff90 	bl	8000be0 <LCD_RD_DATA>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b9d      	ldr	r3, [pc, #628]	; (8000f3c <lcd_init+0x2b8>)
 8000cc6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000cc8:	f7ff ff8a 	bl	8000be0 <LCD_RD_DATA>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4b9a      	ldr	r3, [pc, #616]	; (8000f3c <lcd_init+0x2b8>)
 8000cd2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000cd4:	f7ff ff84 	bl	8000be0 <LCD_RD_DATA>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b97      	ldr	r3, [pc, #604]	; (8000f3c <lcd_init+0x2b8>)
 8000cde:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000ce0:	4b96      	ldr	r3, [pc, #600]	; (8000f3c <lcd_init+0x2b8>)
 8000ce2:	889b      	ldrh	r3, [r3, #4]
 8000ce4:	021b      	lsls	r3, r3, #8
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	4b94      	ldr	r3, [pc, #592]	; (8000f3c <lcd_init+0x2b8>)
 8000cea:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8000cec:	f7ff ff78 	bl	8000be0 <LCD_RD_DATA>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b91      	ldr	r3, [pc, #580]	; (8000f3c <lcd_init+0x2b8>)
 8000cf6:	889b      	ldrh	r3, [r3, #4]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	4b8f      	ldr	r3, [pc, #572]	; (8000f3c <lcd_init+0x2b8>)
 8000cfe:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000d00:	20cf      	movs	r0, #207	; 0xcf
 8000d02:	f7ff ff4d 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff ff5a 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000d0c:	20c1      	movs	r0, #193	; 0xc1
 8000d0e:	f7ff ff57 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000d12:	2030      	movs	r0, #48	; 0x30
 8000d14:	f7ff ff54 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000d18:	20ed      	movs	r0, #237	; 0xed
 8000d1a:	f7ff ff41 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000d1e:	2064      	movs	r0, #100	; 0x64
 8000d20:	f7ff ff4e 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f7ff ff4b 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000d2a:	2012      	movs	r0, #18
 8000d2c:	f7ff ff48 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000d30:	2081      	movs	r0, #129	; 0x81
 8000d32:	f7ff ff45 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000d36:	20e8      	movs	r0, #232	; 0xe8
 8000d38:	f7ff ff32 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000d3c:	2085      	movs	r0, #133	; 0x85
 8000d3e:	f7ff ff3f 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000d42:	2010      	movs	r0, #16
 8000d44:	f7ff ff3c 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000d48:	207a      	movs	r0, #122	; 0x7a
 8000d4a:	f7ff ff39 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000d4e:	20cb      	movs	r0, #203	; 0xcb
 8000d50:	f7ff ff26 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000d54:	2039      	movs	r0, #57	; 0x39
 8000d56:	f7ff ff33 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000d5a:	202c      	movs	r0, #44	; 0x2c
 8000d5c:	f7ff ff30 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff ff2d 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000d66:	2034      	movs	r0, #52	; 0x34
 8000d68:	f7ff ff2a 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000d6c:	2002      	movs	r0, #2
 8000d6e:	f7ff ff27 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000d72:	20f7      	movs	r0, #247	; 0xf7
 8000d74:	f7ff ff14 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000d78:	2020      	movs	r0, #32
 8000d7a:	f7ff ff21 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000d7e:	20ea      	movs	r0, #234	; 0xea
 8000d80:	f7ff ff0e 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f7ff ff1b 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f7ff ff18 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000d90:	20c0      	movs	r0, #192	; 0xc0
 8000d92:	f7ff ff05 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000d96:	201b      	movs	r0, #27
 8000d98:	f7ff ff12 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8000d9c:	20c1      	movs	r0, #193	; 0xc1
 8000d9e:	f7ff feff 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8000da2:	2001      	movs	r0, #1
 8000da4:	f7ff ff0c 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8000da8:	20c5      	movs	r0, #197	; 0xc5
 8000daa:	f7ff fef9 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8000dae:	2030      	movs	r0, #48	; 0x30
 8000db0:	f7ff ff06 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8000db4:	2030      	movs	r0, #48	; 0x30
 8000db6:	f7ff ff03 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8000dba:	20c7      	movs	r0, #199	; 0xc7
 8000dbc:	f7ff fef0 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8000dc0:	20b7      	movs	r0, #183	; 0xb7
 8000dc2:	f7ff fefd 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000dc6:	2036      	movs	r0, #54	; 0x36
 8000dc8:	f7ff feea 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8000dcc:	2008      	movs	r0, #8
 8000dce:	f7ff fef7 	bl	8000bc0 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8000dd2:	203a      	movs	r0, #58	; 0x3a
 8000dd4:	f7ff fee4 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8000dd8:	2055      	movs	r0, #85	; 0x55
 8000dda:	f7ff fef1 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000dde:	20b1      	movs	r0, #177	; 0xb1
 8000de0:	f7ff fede 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f7ff feeb 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8000dea:	201a      	movs	r0, #26
 8000dec:	f7ff fee8 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8000df0:	20b6      	movs	r0, #182	; 0xb6
 8000df2:	f7ff fed5 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8000df6:	200a      	movs	r0, #10
 8000df8:	f7ff fee2 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8000dfc:	20a2      	movs	r0, #162	; 0xa2
 8000dfe:	f7ff fedf 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000e02:	20f2      	movs	r0, #242	; 0xf2
 8000e04:	f7ff fecc 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f7ff fed9 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8000e0e:	2026      	movs	r0, #38	; 0x26
 8000e10:	f7ff fec6 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8000e14:	2001      	movs	r0, #1
 8000e16:	f7ff fed3 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8000e1a:	20e0      	movs	r0, #224	; 0xe0
 8000e1c:	f7ff fec0 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8000e20:	200f      	movs	r0, #15
 8000e22:	f7ff fecd 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8000e26:	202a      	movs	r0, #42	; 0x2a
 8000e28:	f7ff feca 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8000e2c:	2028      	movs	r0, #40	; 0x28
 8000e2e:	f7ff fec7 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000e32:	2008      	movs	r0, #8
 8000e34:	f7ff fec4 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8000e38:	200e      	movs	r0, #14
 8000e3a:	f7ff fec1 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000e3e:	2008      	movs	r0, #8
 8000e40:	f7ff febe 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8000e44:	2054      	movs	r0, #84	; 0x54
 8000e46:	f7ff febb 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8000e4a:	20a9      	movs	r0, #169	; 0xa9
 8000e4c:	f7ff feb8 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8000e50:	2043      	movs	r0, #67	; 0x43
 8000e52:	f7ff feb5 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8000e56:	200a      	movs	r0, #10
 8000e58:	f7ff feb2 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000e5c:	200f      	movs	r0, #15
 8000e5e:	f7ff feaf 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff feac 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f7ff fea9 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f7ff fea6 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e74:	2000      	movs	r0, #0
 8000e76:	f7ff fea3 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8000e7a:	20e1      	movs	r0, #225	; 0xe1
 8000e7c:	f7ff fe90 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000e80:	2000      	movs	r0, #0
 8000e82:	f7ff fe9d 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8000e86:	2015      	movs	r0, #21
 8000e88:	f7ff fe9a 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8000e8c:	2017      	movs	r0, #23
 8000e8e:	f7ff fe97 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8000e92:	2007      	movs	r0, #7
 8000e94:	f7ff fe94 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8000e98:	2011      	movs	r0, #17
 8000e9a:	f7ff fe91 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8000e9e:	2006      	movs	r0, #6
 8000ea0:	f7ff fe8e 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8000ea4:	202b      	movs	r0, #43	; 0x2b
 8000ea6:	f7ff fe8b 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8000eaa:	2056      	movs	r0, #86	; 0x56
 8000eac:	f7ff fe88 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8000eb0:	203c      	movs	r0, #60	; 0x3c
 8000eb2:	f7ff fe85 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8000eb6:	2005      	movs	r0, #5
 8000eb8:	f7ff fe82 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000ebc:	2010      	movs	r0, #16
 8000ebe:	f7ff fe7f 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000ec2:	200f      	movs	r0, #15
 8000ec4:	f7ff fe7c 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000ec8:	203f      	movs	r0, #63	; 0x3f
 8000eca:	f7ff fe79 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000ece:	203f      	movs	r0, #63	; 0x3f
 8000ed0:	f7ff fe76 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000ed4:	200f      	movs	r0, #15
 8000ed6:	f7ff fe73 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8000eda:	202b      	movs	r0, #43	; 0x2b
 8000edc:	f7ff fe60 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f7ff fe6d 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f7ff fe6a 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8000eec:	2001      	movs	r0, #1
 8000eee:	f7ff fe67 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8000ef2:	203f      	movs	r0, #63	; 0x3f
 8000ef4:	f7ff fe64 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8000ef8:	202a      	movs	r0, #42	; 0x2a
 8000efa:	f7ff fe51 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000efe:	2000      	movs	r0, #0
 8000f00:	f7ff fe5e 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff fe5b 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f7ff fe58 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8000f10:	20ef      	movs	r0, #239	; 0xef
 8000f12:	f7ff fe55 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8000f16:	2011      	movs	r0, #17
 8000f18:	f7ff fe42 	bl	8000ba0 <LCD_WR_REG>
	HAL_Delay(120);
 8000f1c:	2078      	movs	r0, #120	; 0x78
 8000f1e:	f000 fd6d 	bl	80019fc <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8000f22:	2029      	movs	r0, #41	; 0x29
 8000f24:	f7ff fe3c 	bl	8000ba0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f2e:	4804      	ldr	r0, [pc, #16]	; (8000f40 <lcd_init+0x2bc>)
 8000f30:	f001 f8c8 	bl	80020c4 <HAL_GPIO_WritePin>
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40020800 	.word	0x40020800
 8000f3c:	2000015c 	.word	0x2000015c
 8000f40:	40020000 	.word	0x40020000

08000f44 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2140      	movs	r1, #64	; 0x40
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <led7_init+0x14>)
 8000f4e:	f001 f8b9 	bl	80020c4 <HAL_GPIO_WritePin>
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40021800 	.word	0x40021800

08000f5c <led7_Scan>:

void led7_Scan(){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8000f60:	4b3f      	ldr	r3, [pc, #252]	; (8001060 <led7_Scan+0x104>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	4b3d      	ldr	r3, [pc, #244]	; (8001060 <led7_Scan+0x104>)
 8000f6a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8000f6c:	4b3d      	ldr	r3, [pc, #244]	; (8001064 <led7_Scan+0x108>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a3d      	ldr	r2, [pc, #244]	; (8001068 <led7_Scan+0x10c>)
 8000f72:	5cd3      	ldrb	r3, [r2, r3]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	4b39      	ldr	r3, [pc, #228]	; (8001060 <led7_Scan+0x104>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4b36      	ldr	r3, [pc, #216]	; (8001060 <led7_Scan+0x104>)
 8000f86:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8000f88:	4b36      	ldr	r3, [pc, #216]	; (8001064 <led7_Scan+0x108>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b03      	cmp	r3, #3
 8000f8e:	d847      	bhi.n	8001020 <led7_Scan+0xc4>
 8000f90:	a201      	add	r2, pc, #4	; (adr r2, 8000f98 <led7_Scan+0x3c>)
 8000f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f96:	bf00      	nop
 8000f98:	08000fa9 	.word	0x08000fa9
 8000f9c:	08000fc7 	.word	0x08000fc7
 8000fa0:	08000fe5 	.word	0x08000fe5
 8000fa4:	08001003 	.word	0x08001003
	case 0:
		spi_buffer |= 0x00b0;
 8000fa8:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <led7_Scan+0x104>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <led7_Scan+0x104>)
 8000fb4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <led7_Scan+0x104>)
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	4b27      	ldr	r3, [pc, #156]	; (8001060 <led7_Scan+0x104>)
 8000fc2:	801a      	strh	r2, [r3, #0]
		break;
 8000fc4:	e02d      	b.n	8001022 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8000fc6:	4b26      	ldr	r3, [pc, #152]	; (8001060 <led7_Scan+0x104>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	4b23      	ldr	r3, [pc, #140]	; (8001060 <led7_Scan+0x104>)
 8000fd2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <led7_Scan+0x104>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	f023 0320 	bic.w	r3, r3, #32
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <led7_Scan+0x104>)
 8000fe0:	801a      	strh	r2, [r3, #0]
		break;
 8000fe2:	e01e      	b.n	8001022 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8000fe4:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <led7_Scan+0x104>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <led7_Scan+0x104>)
 8000ff0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <led7_Scan+0x104>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	f023 0310 	bic.w	r3, r3, #16
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <led7_Scan+0x104>)
 8000ffe:	801a      	strh	r2, [r3, #0]
		break;
 8001000:	e00f      	b.n	8001022 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <led7_Scan+0x104>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800100a:	b29a      	uxth	r2, r3
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <led7_Scan+0x104>)
 800100e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <led7_Scan+0x104>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001018:	b29a      	uxth	r2, r3
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <led7_Scan+0x104>)
 800101c:	801a      	strh	r2, [r3, #0]
		break;
 800101e:	e000      	b.n	8001022 <led7_Scan+0xc6>
	default:
		break;
 8001020:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <led7_Scan+0x108>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	425a      	negs	r2, r3
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	f002 0203 	and.w	r2, r2, #3
 8001032:	bf58      	it	pl
 8001034:	4253      	negpl	r3, r2
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <led7_Scan+0x108>)
 8001038:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2140      	movs	r1, #64	; 0x40
 800103e:	480b      	ldr	r0, [pc, #44]	; (800106c <led7_Scan+0x110>)
 8001040:	f001 f840 	bl	80020c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001044:	2301      	movs	r3, #1
 8001046:	2202      	movs	r2, #2
 8001048:	4905      	ldr	r1, [pc, #20]	; (8001060 <led7_Scan+0x104>)
 800104a:	4809      	ldr	r0, [pc, #36]	; (8001070 <led7_Scan+0x114>)
 800104c:	f002 fb7d 	bl	800374a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001050:	2201      	movs	r2, #1
 8001052:	2140      	movs	r1, #64	; 0x40
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <led7_Scan+0x110>)
 8001056:	f001 f835 	bl	80020c4 <HAL_GPIO_WritePin>
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000004 	.word	0x20000004
 8001064:	20000164 	.word	0x20000164
 8001068:	20000000 	.word	0x20000000
 800106c:	40021800 	.word	0x40021800
 8001070:	20000170 	.word	0x20000170

08001074 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001078:	f000 fc4e 	bl	8001918 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800107c:	f000 f822 	bl	80010c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001080:	f7ff fc20 	bl	80008c4 <MX_GPIO_Init>
	MX_TIM2_Init();
 8001084:	f000 fa7c 	bl	8001580 <MX_TIM2_Init>
	MX_SPI1_Init();
 8001088:	f000 f94e 	bl	8001328 <MX_SPI1_Init>
	MX_FSMC_Init();
 800108c:	f7ff fb4a 	bl	8000724 <MX_FSMC_Init>
	MX_I2C1_Init();
 8001090:	f7ff fd10 	bl	8000ab4 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8001094:	f000 fb82 	bl	800179c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	system_init();
 8001098:	f000 f87e 	bl	8001198 <system_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		while (!flag_timer2);
 800109c:	bf00      	nop
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <main+0x4c>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0fb      	beq.n	800109e <main+0x2a>
		flag_timer2 = 0;
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <main+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	801a      	strh	r2, [r3, #0]
		button_Scan();
 80010ac:	f7ff fa6a 	bl	8000584 <button_Scan>
		test_LedDebug();
 80010b0:	f000 f894 	bl	80011dc <test_LedDebug>
		ds3231_ReadTime();
 80010b4:	f7ff fad2 	bl	800065c <ds3231_ReadTime>
		test_Uart();
 80010b8:	f000 f8b4 	bl	8001224 <test_Uart>
		while (!flag_timer2);
 80010bc:	e7ee      	b.n	800109c <main+0x28>
 80010be:	bf00      	nop
 80010c0:	2000016a 	.word	0x2000016a

080010c4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b094      	sub	sp, #80	; 0x50
 80010c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010ca:	f107 0320 	add.w	r3, r7, #32
 80010ce:	2230      	movs	r2, #48	; 0x30
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 fe92 	bl	8005dfc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	4b28      	ldr	r3, [pc, #160]	; (8001190 <SystemClock_Config+0xcc>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	4a27      	ldr	r2, [pc, #156]	; (8001190 <SystemClock_Config+0xcc>)
 80010f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f6:	6413      	str	r3, [r2, #64]	; 0x40
 80010f8:	4b25      	ldr	r3, [pc, #148]	; (8001190 <SystemClock_Config+0xcc>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <SystemClock_Config+0xd0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a21      	ldr	r2, [pc, #132]	; (8001194 <SystemClock_Config+0xd0>)
 800110e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <SystemClock_Config+0xd0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001120:	2302      	movs	r3, #2
 8001122:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001124:	2301      	movs	r3, #1
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001128:	2310      	movs	r3, #16
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112c:	2302      	movs	r3, #2
 800112e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001130:	2300      	movs	r3, #0
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001134:	2308      	movs	r3, #8
 8001136:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001138:	23a8      	movs	r3, #168	; 0xa8
 800113a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800113c:	2302      	movs	r3, #2
 800113e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001140:	2304      	movs	r3, #4
 8001142:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001144:	f107 0320 	add.w	r3, r7, #32
 8001148:	4618      	mov	r0, r3
 800114a:	f001 fddd 	bl	8002d08 <HAL_RCC_OscConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0x94>
		Error_Handler();
 8001154:	f000 f892 	bl	800127c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001158:	230f      	movs	r3, #15
 800115a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115c:	2302      	movs	r3, #2
 800115e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001164:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001168:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800116a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800116e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2105      	movs	r1, #5
 8001176:	4618      	mov	r0, r3
 8001178:	f002 f83e 	bl	80031f8 <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0xc2>
		Error_Handler();
 8001182:	f000 f87b 	bl	800127c <Error_Handler>
	}
}
 8001186:	bf00      	nop
 8001188:	3750      	adds	r7, #80	; 0x50
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40007000 	.word	0x40007000

08001198 <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2120      	movs	r1, #32
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <system_init+0x40>)
 80011a2:	f000 ff8f 	bl	80020c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2140      	movs	r1, #64	; 0x40
 80011aa:	480b      	ldr	r0, [pc, #44]	; (80011d8 <system_init+0x40>)
 80011ac:	f000 ff8a 	bl	80020c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2110      	movs	r1, #16
 80011b4:	4808      	ldr	r0, [pc, #32]	; (80011d8 <system_init+0x40>)
 80011b6:	f000 ff85 	bl	80020c4 <HAL_GPIO_WritePin>
	timer_init();
 80011ba:	f000 f865 	bl	8001288 <timer_init>
	led7_init();
 80011be:	f7ff fec1 	bl	8000f44 <led7_init>
	button_init();
 80011c2:	f7ff f9d3 	bl	800056c <button_init>
	lcd_init();
 80011c6:	f7ff fd5d 	bl	8000c84 <lcd_init>
	uart_init_rs232();
 80011ca:	f000 fa4b 	bl	8001664 <uart_init_rs232>
	setTimer2(50);
 80011ce:	2032      	movs	r0, #50	; 0x32
 80011d0:	f000 f864 	bl	800129c <setTimer2>
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40021000 	.word	0x40021000

080011dc <test_LedDebug>:

uint16_t count_led_debug = 0;

void test_LedDebug() {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1) % 20;
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <test_LedDebug+0x3c>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	1c5a      	adds	r2, r3, #1
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <test_LedDebug+0x40>)
 80011e8:	fb83 1302 	smull	r1, r3, r3, r2
 80011ec:	10d9      	asrs	r1, r3, #3
 80011ee:	17d3      	asrs	r3, r2, #31
 80011f0:	1ac9      	subs	r1, r1, r3
 80011f2:	460b      	mov	r3, r1
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	440b      	add	r3, r1
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	1ad1      	subs	r1, r2, r3
 80011fc:	b28a      	uxth	r2, r1
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <test_LedDebug+0x3c>)
 8001200:	801a      	strh	r2, [r3, #0]
	if (count_led_debug == 0) {
 8001202:	4b05      	ldr	r3, [pc, #20]	; (8001218 <test_LedDebug+0x3c>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d103      	bne.n	8001212 <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800120a:	2110      	movs	r1, #16
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <test_LedDebug+0x44>)
 800120e:	f000 ff72 	bl	80020f6 <HAL_GPIO_TogglePin>
	}
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000168 	.word	0x20000168
 800121c:	66666667 	.word	0x66666667
 8001220:	40021000 	.word	0x40021000

08001224 <test_Uart>:
			led7_SetDigit(i % 10, 3, 0);
		}
	}
}

void test_Uart() {
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	if (button_count[12] == 1) {
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <test_Uart+0x40>)
 800122a:	8b1b      	ldrh	r3, [r3, #24]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d117      	bne.n	8001260 <test_Uart+0x3c>
		uart_Rs232SendNum(ds3231_hours);
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <test_Uart+0x44>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f000 fa3d 	bl	80016b4 <uart_Rs232SendNum>
		uart_Rs232SendString(":");
 800123a:	480c      	ldr	r0, [pc, #48]	; (800126c <test_Uart+0x48>)
 800123c:	f000 fa20 	bl	8001680 <uart_Rs232SendString>
		uart_Rs232SendNum(ds3231_min);
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <test_Uart+0x4c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fa35 	bl	80016b4 <uart_Rs232SendNum>
		uart_Rs232SendString(":");
 800124a:	4808      	ldr	r0, [pc, #32]	; (800126c <test_Uart+0x48>)
 800124c:	f000 fa18 	bl	8001680 <uart_Rs232SendString>
		uart_Rs232SendNum(ds3231_sec);
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <test_Uart+0x50>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f000 fa2d 	bl	80016b4 <uart_Rs232SendNum>
		uart_Rs232SendString("\n");
 800125a:	4807      	ldr	r0, [pc, #28]	; (8001278 <test_Uart+0x54>)
 800125c:	f000 fa10 	bl	8001680 <uart_Rs232SendString>
	}
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000080 	.word	0x20000080
 8001268:	200000ab 	.word	0x200000ab
 800126c:	0800671c 	.word	0x0800671c
 8001270:	200000ac 	.word	0x200000ac
 8001274:	200000ad 	.word	0x200000ad
 8001278:	08006720 	.word	0x08006720

0800127c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001284:	e7fe      	b.n	8001284 <Error_Handler+0x8>
	...

08001288 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <timer_init+0x10>)
 800128e:	f003 f813 	bl	80042b8 <HAL_TIM_Base_Start_IT>
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200001cc 	.word	0x200001cc

0800129c <setTimer2>:

void setTimer2(uint16_t duration){
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80012a6:	4a08      	ldr	r2, [pc, #32]	; (80012c8 <setTimer2+0x2c>)
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <setTimer2+0x2c>)
 80012ae:	881a      	ldrh	r2, [r3, #0]
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <setTimer2+0x30>)
 80012b2:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <setTimer2+0x34>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	801a      	strh	r2, [r3, #0]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	2000016e 	.word	0x2000016e
 80012cc:	2000016c 	.word	0x2000016c
 80012d0:	2000016a 	.word	0x2000016a

080012d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e4:	d116      	bne.n	8001314 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 80012e6:	4b0d      	ldr	r3, [pc, #52]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d010      	beq.n	8001310 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80012f8:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d106      	bne.n	8001310 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001304:	2201      	movs	r2, #1
 8001306:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800130a:	881a      	ldrh	r2, [r3, #0]
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800130e:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8001310:	f7ff fe24 	bl	8000f5c <led7_Scan>
	}
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	2000016c 	.word	0x2000016c
 8001320:	2000016a 	.word	0x2000016a
 8001324:	2000016e 	.word	0x2000016e

08001328 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <MX_SPI1_Init+0x64>)
 800132e:	4a18      	ldr	r2, [pc, #96]	; (8001390 <MX_SPI1_Init+0x68>)
 8001330:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <MX_SPI1_Init+0x64>)
 8001334:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001338:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <MX_SPI1_Init+0x64>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <MX_SPI1_Init+0x64>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_SPI1_Init+0x64>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <MX_SPI1_Init+0x64>)
 800134e:	2200      	movs	r2, #0
 8001350:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_SPI1_Init+0x64>)
 8001354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001358:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_SPI1_Init+0x64>)
 800135c:	2200      	movs	r2, #0
 800135e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <MX_SPI1_Init+0x64>)
 8001362:	2200      	movs	r2, #0
 8001364:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_SPI1_Init+0x64>)
 8001368:	2200      	movs	r2, #0
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800136c:	4b07      	ldr	r3, [pc, #28]	; (800138c <MX_SPI1_Init+0x64>)
 800136e:	2200      	movs	r2, #0
 8001370:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_SPI1_Init+0x64>)
 8001374:	220a      	movs	r2, #10
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001378:	4804      	ldr	r0, [pc, #16]	; (800138c <MX_SPI1_Init+0x64>)
 800137a:	f002 f95d 	bl	8003638 <HAL_SPI_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001384:	f7ff ff7a 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000170 	.word	0x20000170
 8001390:	40013000 	.word	0x40013000

08001394 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a19      	ldr	r2, [pc, #100]	; (8001418 <HAL_SPI_MspInit+0x84>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d12b      	bne.n	800140e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <HAL_SPI_MspInit+0x88>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a17      	ldr	r2, [pc, #92]	; (800141c <HAL_SPI_MspInit+0x88>)
 80013c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_SPI_MspInit+0x88>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_SPI_MspInit+0x88>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a10      	ldr	r2, [pc, #64]	; (800141c <HAL_SPI_MspInit+0x88>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_SPI_MspInit+0x88>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80013ee:	2338      	movs	r3, #56	; 0x38
 80013f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013fe:	2305      	movs	r3, #5
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <HAL_SPI_MspInit+0x8c>)
 800140a:	f000 fcbf 	bl	8001d8c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800140e:	bf00      	nop
 8001410:	3728      	adds	r7, #40	; 0x28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40013000 	.word	0x40013000
 800141c:	40023800 	.word	0x40023800
 8001420:	40020400 	.word	0x40020400

08001424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <HAL_MspInit+0x4c>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <HAL_MspInit+0x4c>)
 8001434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001438:	6453      	str	r3, [r2, #68]	; 0x44
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_MspInit+0x4c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_MspInit+0x4c>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a08      	ldr	r2, [pc, #32]	; (8001470 <HAL_MspInit+0x4c>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_MspInit+0x4c>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <NMI_Handler+0x4>

0800147a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler+0x4>

08001486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler+0x4>

08001492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c0:	f000 fa7c 	bl	80019bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <TIM2_IRQHandler+0x10>)
 80014ce:	f002 ff63 	bl	8004398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200001cc 	.word	0x200001cc

080014dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014e0:	4802      	ldr	r0, [pc, #8]	; (80014ec <USART1_IRQHandler+0x10>)
 80014e2:	f003 fc2b 	bl	8004d3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2000027c 	.word	0x2000027c

080014f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <_sbrk+0x5c>)
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <_sbrk+0x60>)
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <_sbrk+0x64>)
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <_sbrk+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	429a      	cmp	r2, r3
 800151e:	d207      	bcs.n	8001530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001520:	f004 fc74 	bl	8005e0c <__errno>
 8001524:	4603      	mov	r3, r0
 8001526:	220c      	movs	r2, #12
 8001528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	e009      	b.n	8001544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	4a05      	ldr	r2, [pc, #20]	; (8001554 <_sbrk+0x64>)
 8001540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20020000 	.word	0x20020000
 8001550:	00000400 	.word	0x00000400
 8001554:	200001c8 	.word	0x200001c8
 8001558:	20000410 	.word	0x20000410

0800155c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <SystemInit+0x20>)
 8001562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <SystemInit+0x20>)
 8001568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800156c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001594:	463b      	mov	r3, r7
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <MX_TIM2_Init+0x94>)
 800159e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80015a4:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <MX_TIM2_Init+0x94>)
 80015a6:	f240 3247 	movw	r2, #839	; 0x347
 80015aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <MX_TIM2_Init+0x94>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <MX_TIM2_Init+0x94>)
 80015b4:	2263      	movs	r2, #99	; 0x63
 80015b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <MX_TIM2_Init+0x94>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <MX_TIM2_Init+0x94>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015c4:	4813      	ldr	r0, [pc, #76]	; (8001614 <MX_TIM2_Init+0x94>)
 80015c6:	f002 fe27 	bl	8004218 <HAL_TIM_Base_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015d0:	f7ff fe54 	bl	800127c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	4619      	mov	r1, r3
 80015e0:	480c      	ldr	r0, [pc, #48]	; (8001614 <MX_TIM2_Init+0x94>)
 80015e2:	f002 ffe1 	bl	80045a8 <HAL_TIM_ConfigClockSource>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015ec:	f7ff fe46 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015f8:	463b      	mov	r3, r7
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_TIM2_Init+0x94>)
 80015fe:	f003 f9fd 	bl	80049fc <HAL_TIMEx_MasterConfigSynchronization>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001608:	f7ff fe38 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200001cc 	.word	0x200001cc

08001618 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001628:	d115      	bne.n	8001656 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_TIM_Base_MspInit+0x48>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <HAL_TIM_Base_MspInit+0x48>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6413      	str	r3, [r2, #64]	; 0x40
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_TIM_Base_MspInit+0x48>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	201c      	movs	r0, #28
 800164c:	f000 fad5 	bl	8001bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001650:	201c      	movs	r0, #28
 8001652:	f000 faee 	bl	8001c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800

08001664 <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001668:	2201      	movs	r2, #1
 800166a:	4903      	ldr	r1, [pc, #12]	; (8001678 <uart_init_rs232+0x14>)
 800166c:	4803      	ldr	r0, [pc, #12]	; (800167c <uart_init_rs232+0x18>)
 800166e:	f003 fb34 	bl	8004cda <HAL_UART_Receive_IT>
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000214 	.word	0x20000214
 800167c:	2000027c 	.word	0x2000027c

08001680 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	4907      	ldr	r1, [pc, #28]	; (80016a8 <uart_Rs232SendString+0x28>)
 800168c:	4807      	ldr	r0, [pc, #28]	; (80016ac <uart_Rs232SendString+0x2c>)
 800168e:	f004 fb95 	bl	8005dbc <siprintf>
 8001692:	4603      	mov	r3, r0
 8001694:	b29a      	uxth	r2, r3
 8001696:	230a      	movs	r3, #10
 8001698:	4904      	ldr	r1, [pc, #16]	; (80016ac <uart_Rs232SendString+0x2c>)
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <uart_Rs232SendString+0x30>)
 800169c:	f003 fa8b 	bl	8004bb6 <HAL_UART_Transmit>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	08006724 	.word	0x08006724
 80016ac:	20000218 	.word	0x20000218
 80016b0:	2000027c 	.word	0x2000027c

080016b4 <uart_Rs232SendNum>:

void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_Rs232SendNum(uint32_t num){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	if(num == 0){
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d103      	bne.n	80016ca <uart_Rs232SendNum+0x16>
		uart_Rs232SendString("0");
 80016c2:	4824      	ldr	r0, [pc, #144]	; (8001754 <uart_Rs232SendNum+0xa0>)
 80016c4:	f7ff ffdc 	bl	8001680 <uart_Rs232SendString>
		return;
 80016c8:	e040      	b.n	800174c <uart_Rs232SendNum+0x98>
	}
    uint8_t num_flag = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]
    int i;
	if(num < 0) uart_Rs232SendString("-");
    for(i = 10; i > 0; i--)
 80016ce:	230a      	movs	r3, #10
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	e038      	b.n	8001746 <uart_Rs232SendNum+0x92>
    {
        if((num / mypow(10, i-1)) != 0)
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	4619      	mov	r1, r3
 80016da:	200a      	movs	r0, #10
 80016dc:	f7ff fa92 	bl	8000c04 <mypow>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461a      	mov	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d315      	bcc.n	8001716 <uart_Rs232SendNum+0x62>
        {
            num_flag = 1;
 80016ea:	2301      	movs	r3, #1
 80016ec:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%d",num/mypow(10, i-1));
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	4619      	mov	r1, r3
 80016f4:	200a      	movs	r0, #10
 80016f6:	f7ff fa85 	bl	8000c04 <mypow>
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	fbb3 f3f2 	udiv	r3, r3, r2
 8001704:	461a      	mov	r2, r3
 8001706:	4914      	ldr	r1, [pc, #80]	; (8001758 <uart_Rs232SendNum+0xa4>)
 8001708:	4814      	ldr	r0, [pc, #80]	; (800175c <uart_Rs232SendNum+0xa8>)
 800170a:	f004 fb57 	bl	8005dbc <siprintf>
            uart_Rs232SendString(msg);
 800170e:	4813      	ldr	r0, [pc, #76]	; (800175c <uart_Rs232SendNum+0xa8>)
 8001710:	f7ff ffb6 	bl	8001680 <uart_Rs232SendString>
 8001714:	e005      	b.n	8001722 <uart_Rs232SendNum+0x6e>
        }
        else
        {
            if(num_flag != 0)
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d002      	beq.n	8001722 <uart_Rs232SendNum+0x6e>
            	uart_Rs232SendString("0");
 800171c:	480d      	ldr	r0, [pc, #52]	; (8001754 <uart_Rs232SendNum+0xa0>)
 800171e:	f7ff ffaf 	bl	8001680 <uart_Rs232SendString>
        }
        num %= mypow(10, i-1);
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	3b01      	subs	r3, #1
 8001726:	4619      	mov	r1, r3
 8001728:	200a      	movs	r0, #10
 800172a:	f7ff fa6b 	bl	8000c04 <mypow>
 800172e:	4603      	mov	r3, r0
 8001730:	461a      	mov	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	fbb3 f1f2 	udiv	r1, r3, r2
 8001738:	fb01 f202 	mul.w	r2, r1, r2
 800173c:	1a9b      	subs	r3, r3, r2
 800173e:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	3b01      	subs	r3, #1
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	2b00      	cmp	r3, #0
 800174a:	dcc3      	bgt.n	80016d4 <uart_Rs232SendNum+0x20>
    }
}
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	08006728 	.word	0x08006728
 8001758:	0800672c 	.word	0x0800672c
 800175c:	20000218 	.word	0x20000218

08001760 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_UART_RxCpltCallback+0x30>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d10a      	bne.n	8001788 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8001772:	230a      	movs	r3, #10
 8001774:	2201      	movs	r2, #1
 8001776:	4907      	ldr	r1, [pc, #28]	; (8001794 <HAL_UART_RxCpltCallback+0x34>)
 8001778:	4807      	ldr	r0, [pc, #28]	; (8001798 <HAL_UART_RxCpltCallback+0x38>)
 800177a:	f003 fa1c 	bl	8004bb6 <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800177e:	2201      	movs	r2, #1
 8001780:	4904      	ldr	r1, [pc, #16]	; (8001794 <HAL_UART_RxCpltCallback+0x34>)
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <HAL_UART_RxCpltCallback+0x38>)
 8001784:	f003 faa9 	bl	8004cda <HAL_UART_Receive_IT>
	}
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40011000 	.word	0x40011000
 8001794:	20000214 	.word	0x20000214
 8001798:	2000027c 	.word	0x2000027c

0800179c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017a2:	4a12      	ldr	r2, [pc, #72]	; (80017ec <MX_USART1_UART_Init+0x50>)
 80017a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017c0:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017c2:	220c      	movs	r2, #12
 80017c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c6:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_USART1_UART_Init+0x4c>)
 80017d4:	f003 f9a2 	bl	8004b1c <HAL_UART_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017de:	f7ff fd4d 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2000027c 	.word	0x2000027c
 80017ec:	40011000 	.word	0x40011000

080017f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a1d      	ldr	r2, [pc, #116]	; (8001884 <HAL_UART_MspInit+0x94>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d134      	bne.n	800187c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <HAL_UART_MspInit+0x98>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <HAL_UART_MspInit+0x98>)
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	6453      	str	r3, [r2, #68]	; 0x44
 8001822:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_UART_MspInit+0x98>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_UART_MspInit+0x98>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a14      	ldr	r2, [pc, #80]	; (8001888 <HAL_UART_MspInit+0x98>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_UART_MspInit+0x98>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800184a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800184e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001858:	2303      	movs	r3, #3
 800185a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800185c:	2307      	movs	r3, #7
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	4619      	mov	r1, r3
 8001866:	4809      	ldr	r0, [pc, #36]	; (800188c <HAL_UART_MspInit+0x9c>)
 8001868:	f000 fa90 	bl	8001d8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	2025      	movs	r0, #37	; 0x25
 8001872:	f000 f9c2 	bl	8001bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001876:	2025      	movs	r0, #37	; 0x25
 8001878:	f000 f9db 	bl	8001c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800187c:	bf00      	nop
 800187e:	3728      	adds	r7, #40	; 0x28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40011000 	.word	0x40011000
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000

08001890 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	461a      	mov	r2, r3
 80018a2:	0092      	lsls	r2, r2, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f003 030f 	and.w	r3, r3, #15
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	b2db      	uxtb	r3, r3
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018c8:	480d      	ldr	r0, [pc, #52]	; (8001900 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018ca:	490e      	ldr	r1, [pc, #56]	; (8001904 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018cc:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d0:	e002      	b.n	80018d8 <LoopCopyDataInit>

080018d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d6:	3304      	adds	r3, #4

080018d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018dc:	d3f9      	bcc.n	80018d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018de:	4a0b      	ldr	r2, [pc, #44]	; (800190c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018e0:	4c0b      	ldr	r4, [pc, #44]	; (8001910 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e4:	e001      	b.n	80018ea <LoopFillZerobss>

080018e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e8:	3204      	adds	r2, #4

080018ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ec:	d3fb      	bcc.n	80018e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018ee:	f7ff fe35 	bl	800155c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018f2:	f004 fa91 	bl	8005e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018f6:	f7ff fbbd 	bl	8001074 <main>
  bx  lr    
 80018fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001904:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001908:	08006794 	.word	0x08006794
  ldr r2, =_sbss
 800190c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001910:	2000040c 	.word	0x2000040c

08001914 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <ADC_IRQHandler>
	...

08001918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <HAL_Init+0x40>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0d      	ldr	r2, [pc, #52]	; (8001958 <HAL_Init+0x40>)
 8001922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001926:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_Init+0x40>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <HAL_Init+0x40>)
 800192e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001932:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a07      	ldr	r2, [pc, #28]	; (8001958 <HAL_Init+0x40>)
 800193a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001940:	2003      	movs	r0, #3
 8001942:	f000 f94f 	bl	8001be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001946:	200f      	movs	r0, #15
 8001948:	f000 f808 	bl	800195c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800194c:	f7ff fd6a 	bl	8001424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40023c00 	.word	0x40023c00

0800195c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_InitTick+0x54>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_InitTick+0x58>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4619      	mov	r1, r3
 800196e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001972:	fbb3 f3f1 	udiv	r3, r3, r1
 8001976:	fbb2 f3f3 	udiv	r3, r2, r3
 800197a:	4618      	mov	r0, r3
 800197c:	f000 f967 	bl	8001c4e <HAL_SYSTICK_Config>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e00e      	b.n	80019a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b0f      	cmp	r3, #15
 800198e:	d80a      	bhi.n	80019a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001990:	2200      	movs	r2, #0
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f000 f92f 	bl	8001bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800199c:	4a06      	ldr	r2, [pc, #24]	; (80019b8 <HAL_InitTick+0x5c>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e000      	b.n	80019a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000008 	.word	0x20000008
 80019b4:	20000010 	.word	0x20000010
 80019b8:	2000000c 	.word	0x2000000c

080019bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_IncTick+0x20>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_IncTick+0x24>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <HAL_IncTick+0x24>)
 80019ce:	6013      	str	r3, [r2, #0]
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000010 	.word	0x20000010
 80019e0:	200002c0 	.word	0x200002c0

080019e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return uwTick;
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <HAL_GetTick+0x14>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	200002c0 	.word	0x200002c0

080019fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff ffee 	bl	80019e4 <HAL_GetTick>
 8001a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a14:	d005      	beq.n	8001a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_Delay+0x44>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a22:	bf00      	nop
 8001a24:	f7ff ffde 	bl	80019e4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d8f7      	bhi.n	8001a24 <HAL_Delay+0x28>
  {
  }
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000010 	.word	0x20000010

08001a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a60:	4013      	ands	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a76:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	60d3      	str	r3, [r2, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	f003 0307 	and.w	r3, r3, #7
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	db0b      	blt.n	8001ad2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	f003 021f 	and.w	r2, r3, #31
 8001ac0:	4907      	ldr	r1, [pc, #28]	; (8001ae0 <__NVIC_EnableIRQ+0x38>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	095b      	lsrs	r3, r3, #5
 8001ac8:	2001      	movs	r0, #1
 8001aca:	fa00 f202 	lsl.w	r2, r0, r2
 8001ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000e100 	.word	0xe000e100

08001ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	6039      	str	r1, [r7, #0]
 8001aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	db0a      	blt.n	8001b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	490c      	ldr	r1, [pc, #48]	; (8001b30 <__NVIC_SetPriority+0x4c>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	0112      	lsls	r2, r2, #4
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	440b      	add	r3, r1
 8001b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b0c:	e00a      	b.n	8001b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4908      	ldr	r1, [pc, #32]	; (8001b34 <__NVIC_SetPriority+0x50>)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	3b04      	subs	r3, #4
 8001b1c:	0112      	lsls	r2, r2, #4
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	440b      	add	r3, r1
 8001b22:	761a      	strb	r2, [r3, #24]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000e100 	.word	0xe000e100
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	; 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f1c3 0307 	rsb	r3, r3, #7
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	bf28      	it	cs
 8001b56:	2304      	movcs	r3, #4
 8001b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	2b06      	cmp	r3, #6
 8001b60:	d902      	bls.n	8001b68 <NVIC_EncodePriority+0x30>
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3b03      	subs	r3, #3
 8001b66:	e000      	b.n	8001b6a <NVIC_EncodePriority+0x32>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43da      	mvns	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b80:	f04f 31ff 	mov.w	r1, #4294967295
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	43d9      	mvns	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	4313      	orrs	r3, r2
         );
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3724      	adds	r7, #36	; 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb0:	d301      	bcc.n	8001bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00f      	b.n	8001bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <SysTick_Config+0x40>)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bbe:	210f      	movs	r1, #15
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	f7ff ff8e 	bl	8001ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <SysTick_Config+0x40>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bce:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <SysTick_Config+0x40>)
 8001bd0:	2207      	movs	r2, #7
 8001bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	e000e010 	.word	0xe000e010

08001be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff29 	bl	8001a44 <__NVIC_SetPriorityGrouping>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c0c:	f7ff ff3e 	bl	8001a8c <__NVIC_GetPriorityGrouping>
 8001c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	6978      	ldr	r0, [r7, #20]
 8001c18:	f7ff ff8e 	bl	8001b38 <NVIC_EncodePriority>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff5d 	bl	8001ae4 <__NVIC_SetPriority>
}
 8001c2a:	bf00      	nop
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff31 	bl	8001aa8 <__NVIC_EnableIRQ>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ffa2 	bl	8001ba0 <SysTick_Config>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b084      	sub	sp, #16
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c72:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c74:	f7ff feb6 	bl	80019e4 <HAL_GetTick>
 8001c78:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d008      	beq.n	8001c98 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2280      	movs	r2, #128	; 0x80
 8001c8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e052      	b.n	8001d3e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0216 	bic.w	r2, r2, #22
 8001ca6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	695a      	ldr	r2, [r3, #20]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cb6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d103      	bne.n	8001cc8 <HAL_DMA_Abort+0x62>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d007      	beq.n	8001cd8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0208 	bic.w	r2, r2, #8
 8001cd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce8:	e013      	b.n	8001d12 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cea:	f7ff fe7b 	bl	80019e4 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b05      	cmp	r3, #5
 8001cf6:	d90c      	bls.n	8001d12 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2203      	movs	r2, #3
 8001d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e015      	b.n	8001d3e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1e4      	bne.n	8001cea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	223f      	movs	r2, #63	; 0x3f
 8001d26:	409a      	lsls	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d004      	beq.n	8001d64 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e00c      	b.n	8001d7e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2205      	movs	r2, #5
 8001d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0201 	bic.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	; 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	e16b      	b.n	8002080 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001da8:	2201      	movs	r2, #1
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	f040 815a 	bne.w	800207a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d005      	beq.n	8001dde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d130      	bne.n	8001e40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	2203      	movs	r2, #3
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e14:	2201      	movs	r2, #1
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f003 0201 	and.w	r2, r3, #1
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d017      	beq.n	8001e7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2203      	movs	r2, #3
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d123      	bne.n	8001ed0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	08da      	lsrs	r2, r3, #3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3208      	adds	r2, #8
 8001e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	220f      	movs	r2, #15
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	08da      	lsrs	r2, r3, #3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3208      	adds	r2, #8
 8001eca:	69b9      	ldr	r1, [r7, #24]
 8001ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	2203      	movs	r2, #3
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0203 	and.w	r2, r3, #3
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 80b4 	beq.w	800207a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	4b60      	ldr	r3, [pc, #384]	; (8002098 <HAL_GPIO_Init+0x30c>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	4a5f      	ldr	r2, [pc, #380]	; (8002098 <HAL_GPIO_Init+0x30c>)
 8001f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f20:	6453      	str	r3, [r2, #68]	; 0x44
 8001f22:	4b5d      	ldr	r3, [pc, #372]	; (8002098 <HAL_GPIO_Init+0x30c>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f2e:	4a5b      	ldr	r2, [pc, #364]	; (800209c <HAL_GPIO_Init+0x310>)
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	089b      	lsrs	r3, r3, #2
 8001f34:	3302      	adds	r3, #2
 8001f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	220f      	movs	r2, #15
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a52      	ldr	r2, [pc, #328]	; (80020a0 <HAL_GPIO_Init+0x314>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d02b      	beq.n	8001fb2 <HAL_GPIO_Init+0x226>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a51      	ldr	r2, [pc, #324]	; (80020a4 <HAL_GPIO_Init+0x318>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d025      	beq.n	8001fae <HAL_GPIO_Init+0x222>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a50      	ldr	r2, [pc, #320]	; (80020a8 <HAL_GPIO_Init+0x31c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d01f      	beq.n	8001faa <HAL_GPIO_Init+0x21e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a4f      	ldr	r2, [pc, #316]	; (80020ac <HAL_GPIO_Init+0x320>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d019      	beq.n	8001fa6 <HAL_GPIO_Init+0x21a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a4e      	ldr	r2, [pc, #312]	; (80020b0 <HAL_GPIO_Init+0x324>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d013      	beq.n	8001fa2 <HAL_GPIO_Init+0x216>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a4d      	ldr	r2, [pc, #308]	; (80020b4 <HAL_GPIO_Init+0x328>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00d      	beq.n	8001f9e <HAL_GPIO_Init+0x212>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a4c      	ldr	r2, [pc, #304]	; (80020b8 <HAL_GPIO_Init+0x32c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d007      	beq.n	8001f9a <HAL_GPIO_Init+0x20e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a4b      	ldr	r2, [pc, #300]	; (80020bc <HAL_GPIO_Init+0x330>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d101      	bne.n	8001f96 <HAL_GPIO_Init+0x20a>
 8001f92:	2307      	movs	r3, #7
 8001f94:	e00e      	b.n	8001fb4 <HAL_GPIO_Init+0x228>
 8001f96:	2308      	movs	r3, #8
 8001f98:	e00c      	b.n	8001fb4 <HAL_GPIO_Init+0x228>
 8001f9a:	2306      	movs	r3, #6
 8001f9c:	e00a      	b.n	8001fb4 <HAL_GPIO_Init+0x228>
 8001f9e:	2305      	movs	r3, #5
 8001fa0:	e008      	b.n	8001fb4 <HAL_GPIO_Init+0x228>
 8001fa2:	2304      	movs	r3, #4
 8001fa4:	e006      	b.n	8001fb4 <HAL_GPIO_Init+0x228>
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e004      	b.n	8001fb4 <HAL_GPIO_Init+0x228>
 8001faa:	2302      	movs	r3, #2
 8001fac:	e002      	b.n	8001fb4 <HAL_GPIO_Init+0x228>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <HAL_GPIO_Init+0x228>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	69fa      	ldr	r2, [r7, #28]
 8001fb6:	f002 0203 	and.w	r2, r2, #3
 8001fba:	0092      	lsls	r2, r2, #2
 8001fbc:	4093      	lsls	r3, r2
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc4:	4935      	ldr	r1, [pc, #212]	; (800209c <HAL_GPIO_Init+0x310>)
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	089b      	lsrs	r3, r3, #2
 8001fca:	3302      	adds	r3, #2
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fd2:	4b3b      	ldr	r3, [pc, #236]	; (80020c0 <HAL_GPIO_Init+0x334>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ff6:	4a32      	ldr	r2, [pc, #200]	; (80020c0 <HAL_GPIO_Init+0x334>)
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ffc:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <HAL_GPIO_Init+0x334>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002020:	4a27      	ldr	r2, [pc, #156]	; (80020c0 <HAL_GPIO_Init+0x334>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002026:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <HAL_GPIO_Init+0x334>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800204a:	4a1d      	ldr	r2, [pc, #116]	; (80020c0 <HAL_GPIO_Init+0x334>)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_GPIO_Init+0x334>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002074:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <HAL_GPIO_Init+0x334>)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3301      	adds	r3, #1
 800207e:	61fb      	str	r3, [r7, #28]
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	2b0f      	cmp	r3, #15
 8002084:	f67f ae90 	bls.w	8001da8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	3724      	adds	r7, #36	; 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40023800 	.word	0x40023800
 800209c:	40013800 	.word	0x40013800
 80020a0:	40020000 	.word	0x40020000
 80020a4:	40020400 	.word	0x40020400
 80020a8:	40020800 	.word	0x40020800
 80020ac:	40020c00 	.word	0x40020c00
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40021400 	.word	0x40021400
 80020b8:	40021800 	.word	0x40021800
 80020bc:	40021c00 	.word	0x40021c00
 80020c0:	40013c00 	.word	0x40013c00

080020c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	807b      	strh	r3, [r7, #2]
 80020d0:	4613      	mov	r3, r2
 80020d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020d4:	787b      	ldrb	r3, [r7, #1]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020da:	887a      	ldrh	r2, [r7, #2]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020e0:	e003      	b.n	80020ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020e2:	887b      	ldrh	r3, [r7, #2]
 80020e4:	041a      	lsls	r2, r3, #16
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	619a      	str	r2, [r3, #24]
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b085      	sub	sp, #20
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	460b      	mov	r3, r1
 8002100:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002108:	887a      	ldrh	r2, [r7, #2]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	4013      	ands	r3, r2
 800210e:	041a      	lsls	r2, r3, #16
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	43d9      	mvns	r1, r3
 8002114:	887b      	ldrh	r3, [r7, #2]
 8002116:	400b      	ands	r3, r1
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	619a      	str	r2, [r3, #24]
}
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e12b      	b.n	8002396 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe fcdc 	bl	8000b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2224      	movs	r2, #36	; 0x24
 800215c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0201 	bic.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800217e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800218e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002190:	f001 fa2a 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8002194:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	4a81      	ldr	r2, [pc, #516]	; (80023a0 <HAL_I2C_Init+0x274>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d807      	bhi.n	80021b0 <HAL_I2C_Init+0x84>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4a80      	ldr	r2, [pc, #512]	; (80023a4 <HAL_I2C_Init+0x278>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	bf94      	ite	ls
 80021a8:	2301      	movls	r3, #1
 80021aa:	2300      	movhi	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	e006      	b.n	80021be <HAL_I2C_Init+0x92>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4a7d      	ldr	r2, [pc, #500]	; (80023a8 <HAL_I2C_Init+0x27c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	bf94      	ite	ls
 80021b8:	2301      	movls	r3, #1
 80021ba:	2300      	movhi	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e0e7      	b.n	8002396 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4a78      	ldr	r2, [pc, #480]	; (80023ac <HAL_I2C_Init+0x280>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	0c9b      	lsrs	r3, r3, #18
 80021d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4a6a      	ldr	r2, [pc, #424]	; (80023a0 <HAL_I2C_Init+0x274>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d802      	bhi.n	8002200 <HAL_I2C_Init+0xd4>
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	3301      	adds	r3, #1
 80021fe:	e009      	b.n	8002214 <HAL_I2C_Init+0xe8>
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002206:	fb02 f303 	mul.w	r3, r2, r3
 800220a:	4a69      	ldr	r2, [pc, #420]	; (80023b0 <HAL_I2C_Init+0x284>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	099b      	lsrs	r3, r3, #6
 8002212:	3301      	adds	r3, #1
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	430b      	orrs	r3, r1
 800221a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002226:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	495c      	ldr	r1, [pc, #368]	; (80023a0 <HAL_I2C_Init+0x274>)
 8002230:	428b      	cmp	r3, r1
 8002232:	d819      	bhi.n	8002268 <HAL_I2C_Init+0x13c>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	1e59      	subs	r1, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002242:	1c59      	adds	r1, r3, #1
 8002244:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002248:	400b      	ands	r3, r1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_I2C_Init+0x138>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1e59      	subs	r1, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fbb1 f3f3 	udiv	r3, r1, r3
 800225c:	3301      	adds	r3, #1
 800225e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002262:	e051      	b.n	8002308 <HAL_I2C_Init+0x1dc>
 8002264:	2304      	movs	r3, #4
 8002266:	e04f      	b.n	8002308 <HAL_I2C_Init+0x1dc>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d111      	bne.n	8002294 <HAL_I2C_Init+0x168>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1e58      	subs	r0, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	440b      	add	r3, r1
 800227e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002282:	3301      	adds	r3, #1
 8002284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf0c      	ite	eq
 800228c:	2301      	moveq	r3, #1
 800228e:	2300      	movne	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	e012      	b.n	80022ba <HAL_I2C_Init+0x18e>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1e58      	subs	r0, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6859      	ldr	r1, [r3, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	0099      	lsls	r1, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022aa:	3301      	adds	r3, #1
 80022ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	bf0c      	ite	eq
 80022b4:	2301      	moveq	r3, #1
 80022b6:	2300      	movne	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_I2C_Init+0x196>
 80022be:	2301      	movs	r3, #1
 80022c0:	e022      	b.n	8002308 <HAL_I2C_Init+0x1dc>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10e      	bne.n	80022e8 <HAL_I2C_Init+0x1bc>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1e58      	subs	r0, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6859      	ldr	r1, [r3, #4]
 80022d2:	460b      	mov	r3, r1
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	440b      	add	r3, r1
 80022d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022dc:	3301      	adds	r3, #1
 80022de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022e6:	e00f      	b.n	8002308 <HAL_I2C_Init+0x1dc>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1e58      	subs	r0, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	0099      	lsls	r1, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fe:	3301      	adds	r3, #1
 8002300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002304:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	6809      	ldr	r1, [r1, #0]
 800230c:	4313      	orrs	r3, r2
 800230e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69da      	ldr	r2, [r3, #28]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002336:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6911      	ldr	r1, [r2, #16]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68d2      	ldr	r2, [r2, #12]
 8002342:	4311      	orrs	r1, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	430b      	orrs	r3, r1
 800234a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695a      	ldr	r2, [r3, #20]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2220      	movs	r2, #32
 8002382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	000186a0 	.word	0x000186a0
 80023a4:	001e847f 	.word	0x001e847f
 80023a8:	003d08ff 	.word	0x003d08ff
 80023ac:	431bde83 	.word	0x431bde83
 80023b0:	10624dd3 	.word	0x10624dd3

080023b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08c      	sub	sp, #48	; 0x30
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	4608      	mov	r0, r1
 80023be:	4611      	mov	r1, r2
 80023c0:	461a      	mov	r2, r3
 80023c2:	4603      	mov	r3, r0
 80023c4:	817b      	strh	r3, [r7, #10]
 80023c6:	460b      	mov	r3, r1
 80023c8:	813b      	strh	r3, [r7, #8]
 80023ca:	4613      	mov	r3, r2
 80023cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023ce:	f7ff fb09 	bl	80019e4 <HAL_GetTick>
 80023d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b20      	cmp	r3, #32
 80023de:	f040 8208 	bne.w	80027f2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	2319      	movs	r3, #25
 80023e8:	2201      	movs	r2, #1
 80023ea:	497b      	ldr	r1, [pc, #492]	; (80025d8 <HAL_I2C_Mem_Read+0x224>)
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 faef 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80023f8:	2302      	movs	r3, #2
 80023fa:	e1fb      	b.n	80027f4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_I2C_Mem_Read+0x56>
 8002406:	2302      	movs	r3, #2
 8002408:	e1f4      	b.n	80027f4 <HAL_I2C_Mem_Read+0x440>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b01      	cmp	r3, #1
 800241e:	d007      	beq.n	8002430 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800243e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2222      	movs	r2, #34	; 0x22
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2240      	movs	r2, #64	; 0x40
 800244c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800245a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002460:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4a5b      	ldr	r2, [pc, #364]	; (80025dc <HAL_I2C_Mem_Read+0x228>)
 8002470:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002472:	88f8      	ldrh	r0, [r7, #6]
 8002474:	893a      	ldrh	r2, [r7, #8]
 8002476:	8979      	ldrh	r1, [r7, #10]
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	4603      	mov	r3, r0
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 f9bc 	bl	8002800 <I2C_RequestMemoryRead>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e1b0      	b.n	80027f4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002496:	2b00      	cmp	r3, #0
 8002498:	d113      	bne.n	80024c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249a:	2300      	movs	r3, #0
 800249c:	623b      	str	r3, [r7, #32]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	623b      	str	r3, [r7, #32]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	623b      	str	r3, [r7, #32]
 80024ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	e184      	b.n	80027cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d11b      	bne.n	8002502 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	e164      	b.n	80027cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002506:	2b02      	cmp	r3, #2
 8002508:	d11b      	bne.n	8002542 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002518:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002528:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	61bb      	str	r3, [r7, #24]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	e144      	b.n	80027cc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002558:	e138      	b.n	80027cc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255e:	2b03      	cmp	r3, #3
 8002560:	f200 80f1 	bhi.w	8002746 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	2b01      	cmp	r3, #1
 800256a:	d123      	bne.n	80025b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800256c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 fb44 	bl	8002bfe <I2C_WaitOnRXNEFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e139      	b.n	80027f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025b2:	e10b      	b.n	80027cc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d14e      	bne.n	800265a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c2:	2200      	movs	r2, #0
 80025c4:	4906      	ldr	r1, [pc, #24]	; (80025e0 <HAL_I2C_Mem_Read+0x22c>)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fa02 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d008      	beq.n	80025e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e10e      	b.n	80027f4 <HAL_I2C_Mem_Read+0x440>
 80025d6:	bf00      	nop
 80025d8:	00100002 	.word	0x00100002
 80025dc:	ffff0000 	.word	0xffff0000
 80025e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002658:	e0b8      	b.n	80027cc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002660:	2200      	movs	r2, #0
 8002662:	4966      	ldr	r1, [pc, #408]	; (80027fc <HAL_I2C_Mem_Read+0x448>)
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f9b3 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0bf      	b.n	80027f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026bc:	2200      	movs	r2, #0
 80026be:	494f      	ldr	r1, [pc, #316]	; (80027fc <HAL_I2C_Mem_Read+0x448>)
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f985 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e091      	b.n	80027f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002744:	e042      	b.n	80027cc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002748:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 fa57 	bl	8002bfe <I2C_WaitOnRXNEFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e04c      	b.n	80027f4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b04      	cmp	r3, #4
 8002798:	d118      	bne.n	80027cc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	691a      	ldr	r2, [r3, #16]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f47f aec2 	bne.w	800255a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e000      	b.n	80027f4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80027f2:	2302      	movs	r3, #2
  }
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3728      	adds	r7, #40	; 0x28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	00010004 	.word	0x00010004

08002800 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	4608      	mov	r0, r1
 800280a:	4611      	mov	r1, r2
 800280c:	461a      	mov	r2, r3
 800280e:	4603      	mov	r3, r0
 8002810:	817b      	strh	r3, [r7, #10]
 8002812:	460b      	mov	r3, r1
 8002814:	813b      	strh	r3, [r7, #8]
 8002816:	4613      	mov	r3, r2
 8002818:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002828:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002838:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	2200      	movs	r2, #0
 8002842:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f8c2 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00d      	beq.n	800286e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002860:	d103      	bne.n	800286a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e0aa      	b.n	80029c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800286e:	897b      	ldrh	r3, [r7, #10]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800287c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	6a3a      	ldr	r2, [r7, #32]
 8002882:	4952      	ldr	r1, [pc, #328]	; (80029cc <I2C_RequestMemoryRead+0x1cc>)
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f8fa 	bl	8002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e097      	b.n	80029c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ac:	6a39      	ldr	r1, [r7, #32]
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f964 	bl	8002b7c <I2C_WaitOnTXEFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00d      	beq.n	80028d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d107      	bne.n	80028d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e076      	b.n	80029c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d105      	bne.n	80028e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028dc:	893b      	ldrh	r3, [r7, #8]
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	611a      	str	r2, [r3, #16]
 80028e6:	e021      	b.n	800292c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028e8:	893b      	ldrh	r3, [r7, #8]
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f8:	6a39      	ldr	r1, [r7, #32]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f93e 	bl	8002b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00d      	beq.n	8002922 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	2b04      	cmp	r3, #4
 800290c:	d107      	bne.n	800291e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e050      	b.n	80029c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002922:	893b      	ldrh	r3, [r7, #8]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800292c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292e:	6a39      	ldr	r1, [r7, #32]
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f923 	bl	8002b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00d      	beq.n	8002958 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	2b04      	cmp	r3, #4
 8002942:	d107      	bne.n	8002954 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002952:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e035      	b.n	80029c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002966:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	2200      	movs	r2, #0
 8002970:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f82b 	bl	80029d0 <I2C_WaitOnFlagUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00d      	beq.n	800299c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298e:	d103      	bne.n	8002998 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002996:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e013      	b.n	80029c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800299c:	897b      	ldrh	r3, [r7, #10]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	6a3a      	ldr	r2, [r7, #32]
 80029b0:	4906      	ldr	r1, [pc, #24]	; (80029cc <I2C_RequestMemoryRead+0x1cc>)
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f863 	bl	8002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	00010002 	.word	0x00010002

080029d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	4613      	mov	r3, r2
 80029de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029e0:	e025      	b.n	8002a2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e8:	d021      	beq.n	8002a2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ea:	f7fe fffb 	bl	80019e4 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d302      	bcc.n	8002a00 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d116      	bne.n	8002a2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f043 0220 	orr.w	r2, r3, #32
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e023      	b.n	8002a76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	0c1b      	lsrs	r3, r3, #16
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d10d      	bne.n	8002a54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4013      	ands	r3, r2
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	bf0c      	ite	eq
 8002a4a:	2301      	moveq	r3, #1
 8002a4c:	2300      	movne	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	e00c      	b.n	8002a6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bf0c      	ite	eq
 8002a66:	2301      	moveq	r3, #1
 8002a68:	2300      	movne	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d0b6      	beq.n	80029e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b084      	sub	sp, #16
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a8c:	e051      	b.n	8002b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9c:	d123      	bne.n	8002ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ab6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f043 0204 	orr.w	r2, r3, #4
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e046      	b.n	8002b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d021      	beq.n	8002b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aee:	f7fe ff79 	bl	80019e4 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d302      	bcc.n	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d116      	bne.n	8002b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f043 0220 	orr.w	r2, r3, #32
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e020      	b.n	8002b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	0c1b      	lsrs	r3, r3, #16
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d10c      	bne.n	8002b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	43da      	mvns	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	4013      	ands	r3, r2
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	bf14      	ite	ne
 8002b4e:	2301      	movne	r3, #1
 8002b50:	2300      	moveq	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	e00b      	b.n	8002b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	43da      	mvns	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	4013      	ands	r3, r2
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bf14      	ite	ne
 8002b68:	2301      	movne	r3, #1
 8002b6a:	2300      	moveq	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d18d      	bne.n	8002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b88:	e02d      	b.n	8002be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f88d 	bl	8002caa <I2C_IsAcknowledgeFailed>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e02d      	b.n	8002bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba0:	d021      	beq.n	8002be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba2:	f7fe ff1f 	bl	80019e4 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d302      	bcc.n	8002bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d116      	bne.n	8002be6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f043 0220 	orr.w	r2, r3, #32
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e007      	b.n	8002bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b80      	cmp	r3, #128	; 0x80
 8002bf2:	d1ca      	bne.n	8002b8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c0a:	e042      	b.n	8002c92 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	2b10      	cmp	r3, #16
 8002c18:	d119      	bne.n	8002c4e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f06f 0210 	mvn.w	r2, #16
 8002c22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e029      	b.n	8002ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4e:	f7fe fec9 	bl	80019e4 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d116      	bne.n	8002c92 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f043 0220 	orr.w	r2, r3, #32
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e007      	b.n	8002ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9c:	2b40      	cmp	r3, #64	; 0x40
 8002c9e:	d1b5      	bne.n	8002c0c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc0:	d11b      	bne.n	8002cfa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f043 0204 	orr.w	r2, r3, #4
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e267      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d075      	beq.n	8002e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d26:	4b88      	ldr	r3, [pc, #544]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d00c      	beq.n	8002d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d32:	4b85      	ldr	r3, [pc, #532]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d112      	bne.n	8002d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d3e:	4b82      	ldr	r3, [pc, #520]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d4a:	d10b      	bne.n	8002d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4c:	4b7e      	ldr	r3, [pc, #504]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d05b      	beq.n	8002e10 <HAL_RCC_OscConfig+0x108>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d157      	bne.n	8002e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e242      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6c:	d106      	bne.n	8002d7c <HAL_RCC_OscConfig+0x74>
 8002d6e:	4b76      	ldr	r3, [pc, #472]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a75      	ldr	r2, [pc, #468]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e01d      	b.n	8002db8 <HAL_RCC_OscConfig+0xb0>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x98>
 8002d86:	4b70      	ldr	r3, [pc, #448]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6f      	ldr	r2, [pc, #444]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	4b6d      	ldr	r3, [pc, #436]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a6c      	ldr	r2, [pc, #432]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCC_OscConfig+0xb0>
 8002da0:	4b69      	ldr	r3, [pc, #420]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a68      	ldr	r2, [pc, #416]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4b66      	ldr	r3, [pc, #408]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a65      	ldr	r2, [pc, #404]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d013      	beq.n	8002de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fe10 	bl	80019e4 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7fe fe0c 	bl	80019e4 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	; 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e207      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	4b5b      	ldr	r3, [pc, #364]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0xc0>
 8002de6:	e014      	b.n	8002e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7fe fdfc 	bl	80019e4 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df0:	f7fe fdf8 	bl	80019e4 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	; 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e1f3      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e02:	4b51      	ldr	r3, [pc, #324]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0xe8>
 8002e0e:	e000      	b.n	8002e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d063      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e1e:	4b4a      	ldr	r3, [pc, #296]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2a:	4b47      	ldr	r3, [pc, #284]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d11c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e36:	4b44      	ldr	r3, [pc, #272]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d116      	bne.n	8002e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e42:	4b41      	ldr	r3, [pc, #260]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <HAL_RCC_OscConfig+0x152>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d001      	beq.n	8002e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e1c7      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5a:	4b3b      	ldr	r3, [pc, #236]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4937      	ldr	r1, [pc, #220]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6e:	e03a      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d020      	beq.n	8002eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e78:	4b34      	ldr	r3, [pc, #208]	; (8002f4c <HAL_RCC_OscConfig+0x244>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7e:	f7fe fdb1 	bl	80019e4 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e86:	f7fe fdad 	bl	80019e4 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e1a8      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e98:	4b2b      	ldr	r3, [pc, #172]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea4:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4925      	ldr	r1, [pc, #148]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	600b      	str	r3, [r1, #0]
 8002eb8:	e015      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eba:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <HAL_RCC_OscConfig+0x244>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fd90 	bl	80019e4 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec8:	f7fe fd8c 	bl	80019e4 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e187      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eda:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d036      	beq.n	8002f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d016      	beq.n	8002f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002efa:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <HAL_RCC_OscConfig+0x248>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fe fd70 	bl	80019e4 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f08:	f7fe fd6c 	bl	80019e4 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e167      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x200>
 8002f26:	e01b      	b.n	8002f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f28:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <HAL_RCC_OscConfig+0x248>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe fd59 	bl	80019e4 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f34:	e00e      	b.n	8002f54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f36:	f7fe fd55 	bl	80019e4 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d907      	bls.n	8002f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e150      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	42470000 	.word	0x42470000
 8002f50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f54:	4b88      	ldr	r3, [pc, #544]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1ea      	bne.n	8002f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 8097 	beq.w	800309c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f72:	4b81      	ldr	r3, [pc, #516]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10f      	bne.n	8002f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	4b7d      	ldr	r3, [pc, #500]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	4a7c      	ldr	r2, [pc, #496]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8e:	4b7a      	ldr	r3, [pc, #488]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9e:	4b77      	ldr	r3, [pc, #476]	; (800317c <HAL_RCC_OscConfig+0x474>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d118      	bne.n	8002fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002faa:	4b74      	ldr	r3, [pc, #464]	; (800317c <HAL_RCC_OscConfig+0x474>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a73      	ldr	r2, [pc, #460]	; (800317c <HAL_RCC_OscConfig+0x474>)
 8002fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe fd15 	bl	80019e4 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fbe:	f7fe fd11 	bl	80019e4 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e10c      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd0:	4b6a      	ldr	r3, [pc, #424]	; (800317c <HAL_RCC_OscConfig+0x474>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d106      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x2ea>
 8002fe4:	4b64      	ldr	r3, [pc, #400]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	4a63      	ldr	r2, [pc, #396]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff0:	e01c      	b.n	800302c <HAL_RCC_OscConfig+0x324>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCC_OscConfig+0x30c>
 8002ffa:	4b5f      	ldr	r3, [pc, #380]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	4a5e      	ldr	r2, [pc, #376]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003000:	f043 0304 	orr.w	r3, r3, #4
 8003004:	6713      	str	r3, [r2, #112]	; 0x70
 8003006:	4b5c      	ldr	r3, [pc, #368]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	4a5b      	ldr	r2, [pc, #364]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	6713      	str	r3, [r2, #112]	; 0x70
 8003012:	e00b      	b.n	800302c <HAL_RCC_OscConfig+0x324>
 8003014:	4b58      	ldr	r3, [pc, #352]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	4a57      	ldr	r2, [pc, #348]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 800301a:	f023 0301 	bic.w	r3, r3, #1
 800301e:	6713      	str	r3, [r2, #112]	; 0x70
 8003020:	4b55      	ldr	r3, [pc, #340]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003024:	4a54      	ldr	r2, [pc, #336]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003026:	f023 0304 	bic.w	r3, r3, #4
 800302a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d015      	beq.n	8003060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003034:	f7fe fcd6 	bl	80019e4 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303a:	e00a      	b.n	8003052 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303c:	f7fe fcd2 	bl	80019e4 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	; 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e0cb      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003052:	4b49      	ldr	r3, [pc, #292]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0ee      	beq.n	800303c <HAL_RCC_OscConfig+0x334>
 800305e:	e014      	b.n	800308a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003060:	f7fe fcc0 	bl	80019e4 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003066:	e00a      	b.n	800307e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003068:	f7fe fcbc 	bl	80019e4 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	; 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e0b5      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307e:	4b3e      	ldr	r3, [pc, #248]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1ee      	bne.n	8003068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800308a:	7dfb      	ldrb	r3, [r7, #23]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d105      	bne.n	800309c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003090:	4b39      	ldr	r3, [pc, #228]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	4a38      	ldr	r2, [pc, #224]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800309a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80a1 	beq.w	80031e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030a6:	4b34      	ldr	r3, [pc, #208]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d05c      	beq.n	800316c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d141      	bne.n	800313e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ba:	4b31      	ldr	r3, [pc, #196]	; (8003180 <HAL_RCC_OscConfig+0x478>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fe fc90 	bl	80019e4 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c8:	f7fe fc8c 	bl	80019e4 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e087      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030da:	4b27      	ldr	r3, [pc, #156]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	019b      	lsls	r3, r3, #6
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	085b      	lsrs	r3, r3, #1
 80030fe:	3b01      	subs	r3, #1
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	061b      	lsls	r3, r3, #24
 800310a:	491b      	ldr	r1, [pc, #108]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003110:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <HAL_RCC_OscConfig+0x478>)
 8003112:	2201      	movs	r2, #1
 8003114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7fe fc65 	bl	80019e4 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311e:	f7fe fc61 	bl	80019e4 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e05c      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0f0      	beq.n	800311e <HAL_RCC_OscConfig+0x416>
 800313c:	e054      	b.n	80031e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <HAL_RCC_OscConfig+0x478>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7fe fc4e 	bl	80019e4 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314c:	f7fe fc4a 	bl	80019e4 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e045      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x444>
 800316a:	e03d      	b.n	80031e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d107      	bne.n	8003184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e038      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
 8003178:	40023800 	.word	0x40023800
 800317c:	40007000 	.word	0x40007000
 8003180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003184:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <HAL_RCC_OscConfig+0x4ec>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d028      	beq.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d121      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d11a      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031b4:	4013      	ands	r3, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031bc:	4293      	cmp	r3, r2
 80031be:	d111      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ca:	085b      	lsrs	r3, r3, #1
 80031cc:	3b01      	subs	r3, #1
 80031ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800

080031f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0cc      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800320c:	4b68      	ldr	r3, [pc, #416]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d90c      	bls.n	8003234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b65      	ldr	r3, [pc, #404]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b63      	ldr	r3, [pc, #396]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0b8      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d020      	beq.n	8003282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800324c:	4b59      	ldr	r3, [pc, #356]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a58      	ldr	r2, [pc, #352]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003264:	4b53      	ldr	r3, [pc, #332]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	4a52      	ldr	r2, [pc, #328]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800326e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003270:	4b50      	ldr	r3, [pc, #320]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	494d      	ldr	r1, [pc, #308]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d044      	beq.n	8003318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	4b47      	ldr	r3, [pc, #284]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d119      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e07f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d003      	beq.n	80032b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b6:	4b3f      	ldr	r3, [pc, #252]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e06f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c6:	4b3b      	ldr	r3, [pc, #236]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e067      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032d6:	4b37      	ldr	r3, [pc, #220]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f023 0203 	bic.w	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4934      	ldr	r1, [pc, #208]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e8:	f7fe fb7c 	bl	80019e4 <HAL_GetTick>
 80032ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f0:	f7fe fb78 	bl	80019e4 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e04f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 020c 	and.w	r2, r3, #12
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	429a      	cmp	r2, r3
 8003316:	d1eb      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003318:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d20c      	bcs.n	8003340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e032      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4916      	ldr	r1, [pc, #88]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800336a:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	490e      	ldr	r1, [pc, #56]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800337e:	f000 f821 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003382:	4602      	mov	r2, r0
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	490a      	ldr	r1, [pc, #40]	; (80033b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003390:	5ccb      	ldrb	r3, [r1, r3]
 8003392:	fa22 f303 	lsr.w	r3, r2, r3
 8003396:	4a09      	ldr	r2, [pc, #36]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800339a:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fadc 	bl	800195c <HAL_InitTick>

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40023c00 	.word	0x40023c00
 80033b4:	40023800 	.word	0x40023800
 80033b8:	08006738 	.word	0x08006738
 80033bc:	20000008 	.word	0x20000008
 80033c0:	2000000c 	.word	0x2000000c

080033c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c8:	b094      	sub	sp, #80	; 0x50
 80033ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	647b      	str	r3, [r7, #68]	; 0x44
 80033d0:	2300      	movs	r3, #0
 80033d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033d4:	2300      	movs	r3, #0
 80033d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033dc:	4b79      	ldr	r3, [pc, #484]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d00d      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0x40>
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	f200 80e1 	bhi.w	80035b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x34>
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d003      	beq.n	80033fe <HAL_RCC_GetSysClockFreq+0x3a>
 80033f6:	e0db      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033f8:	4b73      	ldr	r3, [pc, #460]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80033fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033fc:	e0db      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033fe:	4b73      	ldr	r3, [pc, #460]	; (80035cc <HAL_RCC_GetSysClockFreq+0x208>)
 8003400:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003402:	e0d8      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003404:	4b6f      	ldr	r3, [pc, #444]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800340c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800340e:	4b6d      	ldr	r3, [pc, #436]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d063      	beq.n	80034e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800341a:	4b6a      	ldr	r3, [pc, #424]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	099b      	lsrs	r3, r3, #6
 8003420:	2200      	movs	r2, #0
 8003422:	63bb      	str	r3, [r7, #56]	; 0x38
 8003424:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342c:	633b      	str	r3, [r7, #48]	; 0x30
 800342e:	2300      	movs	r3, #0
 8003430:	637b      	str	r3, [r7, #52]	; 0x34
 8003432:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003436:	4622      	mov	r2, r4
 8003438:	462b      	mov	r3, r5
 800343a:	f04f 0000 	mov.w	r0, #0
 800343e:	f04f 0100 	mov.w	r1, #0
 8003442:	0159      	lsls	r1, r3, #5
 8003444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003448:	0150      	lsls	r0, r2, #5
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4621      	mov	r1, r4
 8003450:	1a51      	subs	r1, r2, r1
 8003452:	6139      	str	r1, [r7, #16]
 8003454:	4629      	mov	r1, r5
 8003456:	eb63 0301 	sbc.w	r3, r3, r1
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003468:	4659      	mov	r1, fp
 800346a:	018b      	lsls	r3, r1, #6
 800346c:	4651      	mov	r1, sl
 800346e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003472:	4651      	mov	r1, sl
 8003474:	018a      	lsls	r2, r1, #6
 8003476:	4651      	mov	r1, sl
 8003478:	ebb2 0801 	subs.w	r8, r2, r1
 800347c:	4659      	mov	r1, fp
 800347e:	eb63 0901 	sbc.w	r9, r3, r1
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800348e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003496:	4690      	mov	r8, r2
 8003498:	4699      	mov	r9, r3
 800349a:	4623      	mov	r3, r4
 800349c:	eb18 0303 	adds.w	r3, r8, r3
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	462b      	mov	r3, r5
 80034a4:	eb49 0303 	adc.w	r3, r9, r3
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034b6:	4629      	mov	r1, r5
 80034b8:	024b      	lsls	r3, r1, #9
 80034ba:	4621      	mov	r1, r4
 80034bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034c0:	4621      	mov	r1, r4
 80034c2:	024a      	lsls	r2, r1, #9
 80034c4:	4610      	mov	r0, r2
 80034c6:	4619      	mov	r1, r3
 80034c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ca:	2200      	movs	r2, #0
 80034cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034d4:	f7fc fecc 	bl	8000270 <__aeabi_uldivmod>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4613      	mov	r3, r2
 80034de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034e0:	e058      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e2:	4b38      	ldr	r3, [pc, #224]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	099b      	lsrs	r3, r3, #6
 80034e8:	2200      	movs	r2, #0
 80034ea:	4618      	mov	r0, r3
 80034ec:	4611      	mov	r1, r2
 80034ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034f2:	623b      	str	r3, [r7, #32]
 80034f4:	2300      	movs	r3, #0
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
 80034f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034fc:	4642      	mov	r2, r8
 80034fe:	464b      	mov	r3, r9
 8003500:	f04f 0000 	mov.w	r0, #0
 8003504:	f04f 0100 	mov.w	r1, #0
 8003508:	0159      	lsls	r1, r3, #5
 800350a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800350e:	0150      	lsls	r0, r2, #5
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4641      	mov	r1, r8
 8003516:	ebb2 0a01 	subs.w	sl, r2, r1
 800351a:	4649      	mov	r1, r9
 800351c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800352c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003530:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003534:	ebb2 040a 	subs.w	r4, r2, sl
 8003538:	eb63 050b 	sbc.w	r5, r3, fp
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	00eb      	lsls	r3, r5, #3
 8003546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800354a:	00e2      	lsls	r2, r4, #3
 800354c:	4614      	mov	r4, r2
 800354e:	461d      	mov	r5, r3
 8003550:	4643      	mov	r3, r8
 8003552:	18e3      	adds	r3, r4, r3
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	464b      	mov	r3, r9
 8003558:	eb45 0303 	adc.w	r3, r5, r3
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800356a:	4629      	mov	r1, r5
 800356c:	028b      	lsls	r3, r1, #10
 800356e:	4621      	mov	r1, r4
 8003570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003574:	4621      	mov	r1, r4
 8003576:	028a      	lsls	r2, r1, #10
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800357e:	2200      	movs	r2, #0
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	61fa      	str	r2, [r7, #28]
 8003584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003588:	f7fc fe72 	bl	8000270 <__aeabi_uldivmod>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4613      	mov	r3, r2
 8003592:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	0c1b      	lsrs	r3, r3, #16
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	3301      	adds	r3, #1
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035ae:	e002      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80035b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3750      	adds	r7, #80	; 0x50
 80035bc:	46bd      	mov	sp, r7
 80035be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800
 80035c8:	00f42400 	.word	0x00f42400
 80035cc:	007a1200 	.word	0x007a1200

080035d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20000008 	.word	0x20000008

080035e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035ec:	f7ff fff0 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	0a9b      	lsrs	r3, r3, #10
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	4903      	ldr	r1, [pc, #12]	; (800360c <HAL_RCC_GetPCLK1Freq+0x24>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003604:	4618      	mov	r0, r3
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40023800 	.word	0x40023800
 800360c:	08006748 	.word	0x08006748

08003610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003614:	f7ff ffdc 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	0b5b      	lsrs	r3, r3, #13
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4903      	ldr	r1, [pc, #12]	; (8003634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40023800 	.word	0x40023800
 8003634:	08006748 	.word	0x08006748

08003638 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e07b      	b.n	8003742 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	2b00      	cmp	r3, #0
 8003650:	d108      	bne.n	8003664 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800365a:	d009      	beq.n	8003670 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	61da      	str	r2, [r3, #28]
 8003662:	e005      	b.n	8003670 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fd fe82 	bl	8001394 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f4:	ea42 0103 	orr.w	r1, r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	f003 0104 	and.w	r1, r3, #4
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	f003 0210 	and.w	r2, r3, #16
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69da      	ldr	r2, [r3, #28]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003730:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b088      	sub	sp, #32
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	4613      	mov	r3, r2
 8003758:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_SPI_Transmit+0x22>
 8003768:	2302      	movs	r3, #2
 800376a:	e126      	b.n	80039ba <HAL_SPI_Transmit+0x270>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003774:	f7fe f936 	bl	80019e4 <HAL_GetTick>
 8003778:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b01      	cmp	r3, #1
 8003788:	d002      	beq.n	8003790 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800378a:	2302      	movs	r3, #2
 800378c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800378e:	e10b      	b.n	80039a8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <HAL_SPI_Transmit+0x52>
 8003796:	88fb      	ldrh	r3, [r7, #6]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037a0:	e102      	b.n	80039a8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2203      	movs	r2, #3
 80037a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	88fa      	ldrh	r2, [r7, #6]
 80037ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	88fa      	ldrh	r2, [r7, #6]
 80037c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e8:	d10f      	bne.n	800380a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003808:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003814:	2b40      	cmp	r3, #64	; 0x40
 8003816:	d007      	beq.n	8003828 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003826:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003830:	d14b      	bne.n	80038ca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <HAL_SPI_Transmit+0xf6>
 800383a:	8afb      	ldrh	r3, [r7, #22]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d13e      	bne.n	80038be <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	881a      	ldrh	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	1c9a      	adds	r2, r3, #2
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003864:	e02b      	b.n	80038be <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b02      	cmp	r3, #2
 8003872:	d112      	bne.n	800389a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	881a      	ldrh	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	1c9a      	adds	r2, r3, #2
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	86da      	strh	r2, [r3, #54]	; 0x36
 8003898:	e011      	b.n	80038be <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800389a:	f7fe f8a3 	bl	80019e4 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d803      	bhi.n	80038b2 <HAL_SPI_Transmit+0x168>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b0:	d102      	bne.n	80038b8 <HAL_SPI_Transmit+0x16e>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d102      	bne.n	80038be <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038bc:	e074      	b.n	80039a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1ce      	bne.n	8003866 <HAL_SPI_Transmit+0x11c>
 80038c8:	e04c      	b.n	8003964 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <HAL_SPI_Transmit+0x18e>
 80038d2:	8afb      	ldrh	r3, [r7, #22]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d140      	bne.n	800395a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	330c      	adds	r3, #12
 80038e2:	7812      	ldrb	r2, [r2, #0]
 80038e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80038fe:	e02c      	b.n	800395a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b02      	cmp	r3, #2
 800390c:	d113      	bne.n	8003936 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	330c      	adds	r3, #12
 8003918:	7812      	ldrb	r2, [r2, #0]
 800391a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	86da      	strh	r2, [r3, #54]	; 0x36
 8003934:	e011      	b.n	800395a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003936:	f7fe f855 	bl	80019e4 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d803      	bhi.n	800394e <HAL_SPI_Transmit+0x204>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d102      	bne.n	8003954 <HAL_SPI_Transmit+0x20a>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d102      	bne.n	800395a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003958:	e026      	b.n	80039a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1cd      	bne.n	8003900 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	6839      	ldr	r1, [r7, #0]
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 fbcb 	bl	8004104 <SPI_EndRxTxTransaction>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10a      	bne.n	8003998 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	77fb      	strb	r3, [r7, #31]
 80039a4:	e000      	b.n	80039a8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80039a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3720      	adds	r7, #32
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b088      	sub	sp, #32
 80039c6:	af02      	add	r7, sp, #8
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	4613      	mov	r3, r2
 80039d0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039de:	d112      	bne.n	8003a06 <HAL_SPI_Receive+0x44>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10e      	bne.n	8003a06 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2204      	movs	r2, #4
 80039ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80039f0:	88fa      	ldrh	r2, [r7, #6]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	4613      	mov	r3, r2
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f8f1 	bl	8003be4 <HAL_SPI_TransmitReceive>
 8003a02:	4603      	mov	r3, r0
 8003a04:	e0ea      	b.n	8003bdc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_SPI_Receive+0x52>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e0e3      	b.n	8003bdc <HAL_SPI_Receive+0x21a>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a1c:	f7fd ffe2 	bl	80019e4 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d002      	beq.n	8003a34 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a32:	e0ca      	b.n	8003bca <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_SPI_Receive+0x7e>
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d102      	bne.n	8003a46 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a44:	e0c1      	b.n	8003bca <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2204      	movs	r2, #4
 8003a4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	88fa      	ldrh	r2, [r7, #6]
 8003a5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	88fa      	ldrh	r2, [r7, #6]
 8003a64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a8c:	d10f      	bne.n	8003aae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003aac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab8:	2b40      	cmp	r3, #64	; 0x40
 8003aba:	d007      	beq.n	8003acc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003aca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d162      	bne.n	8003b9a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ad4:	e02e      	b.n	8003b34 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d115      	bne.n	8003b10 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f103 020c 	add.w	r2, r3, #12
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	7812      	ldrb	r2, [r2, #0]
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b0e:	e011      	b.n	8003b34 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b10:	f7fd ff68 	bl	80019e4 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d803      	bhi.n	8003b28 <HAL_SPI_Receive+0x166>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b26:	d102      	bne.n	8003b2e <HAL_SPI_Receive+0x16c>
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d102      	bne.n	8003b34 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b32:	e04a      	b.n	8003bca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1cb      	bne.n	8003ad6 <HAL_SPI_Receive+0x114>
 8003b3e:	e031      	b.n	8003ba4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d113      	bne.n	8003b76 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b58:	b292      	uxth	r2, r2
 8003b5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b60:	1c9a      	adds	r2, r3, #2
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b74:	e011      	b.n	8003b9a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b76:	f7fd ff35 	bl	80019e4 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d803      	bhi.n	8003b8e <HAL_SPI_Receive+0x1cc>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8c:	d102      	bne.n	8003b94 <HAL_SPI_Receive+0x1d2>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d102      	bne.n	8003b9a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b98:	e017      	b.n	8003bca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1cd      	bne.n	8003b40 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	6839      	ldr	r1, [r7, #0]
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fa45 	bl	8004038 <SPI_EndRxTransaction>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d002      	beq.n	8003bc8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	75fb      	strb	r3, [r7, #23]
 8003bc6:	e000      	b.n	8003bca <HAL_SPI_Receive+0x208>
  }

error :
 8003bc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08c      	sub	sp, #48	; 0x30
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_SPI_TransmitReceive+0x26>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e18a      	b.n	8003f20 <HAL_SPI_TransmitReceive+0x33c>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c12:	f7fd fee7 	bl	80019e4 <HAL_GetTick>
 8003c16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c28:	887b      	ldrh	r3, [r7, #2]
 8003c2a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d00f      	beq.n	8003c54 <HAL_SPI_TransmitReceive+0x70>
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c3a:	d107      	bne.n	8003c4c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d103      	bne.n	8003c4c <HAL_SPI_TransmitReceive+0x68>
 8003c44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d003      	beq.n	8003c54 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c52:	e15b      	b.n	8003f0c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d005      	beq.n	8003c66 <HAL_SPI_TransmitReceive+0x82>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <HAL_SPI_TransmitReceive+0x82>
 8003c60:	887b      	ldrh	r3, [r7, #2]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d103      	bne.n	8003c6e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c6c:	e14e      	b.n	8003f0c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d003      	beq.n	8003c82 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2205      	movs	r2, #5
 8003c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	887a      	ldrh	r2, [r7, #2]
 8003c92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	887a      	ldrh	r2, [r7, #2]
 8003c98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	887a      	ldrh	r2, [r7, #2]
 8003ca4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	887a      	ldrh	r2, [r7, #2]
 8003caa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc2:	2b40      	cmp	r3, #64	; 0x40
 8003cc4:	d007      	beq.n	8003cd6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cde:	d178      	bne.n	8003dd2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <HAL_SPI_TransmitReceive+0x10a>
 8003ce8:	8b7b      	ldrh	r3, [r7, #26]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d166      	bne.n	8003dbc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	881a      	ldrh	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	1c9a      	adds	r2, r3, #2
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d12:	e053      	b.n	8003dbc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d11b      	bne.n	8003d5a <HAL_SPI_TransmitReceive+0x176>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d016      	beq.n	8003d5a <HAL_SPI_TransmitReceive+0x176>
 8003d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d113      	bne.n	8003d5a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	881a      	ldrh	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	1c9a      	adds	r2, r3, #2
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d119      	bne.n	8003d9c <HAL_SPI_TransmitReceive+0x1b8>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d014      	beq.n	8003d9c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	b292      	uxth	r2, r2
 8003d7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	1c9a      	adds	r2, r3, #2
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d9c:	f7fd fe22 	bl	80019e4 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d807      	bhi.n	8003dbc <HAL_SPI_TransmitReceive+0x1d8>
 8003dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db2:	d003      	beq.n	8003dbc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003dba:	e0a7      	b.n	8003f0c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1a6      	bne.n	8003d14 <HAL_SPI_TransmitReceive+0x130>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1a1      	bne.n	8003d14 <HAL_SPI_TransmitReceive+0x130>
 8003dd0:	e07c      	b.n	8003ecc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d002      	beq.n	8003de0 <HAL_SPI_TransmitReceive+0x1fc>
 8003dda:	8b7b      	ldrh	r3, [r7, #26]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d16b      	bne.n	8003eb8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	330c      	adds	r3, #12
 8003dea:	7812      	ldrb	r2, [r2, #0]
 8003dec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e06:	e057      	b.n	8003eb8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d11c      	bne.n	8003e50 <HAL_SPI_TransmitReceive+0x26c>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d017      	beq.n	8003e50 <HAL_SPI_TransmitReceive+0x26c>
 8003e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d114      	bne.n	8003e50 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	330c      	adds	r3, #12
 8003e30:	7812      	ldrb	r2, [r2, #0]
 8003e32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d119      	bne.n	8003e92 <HAL_SPI_TransmitReceive+0x2ae>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d014      	beq.n	8003e92 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e92:	f7fd fda7 	bl	80019e4 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d803      	bhi.n	8003eaa <HAL_SPI_TransmitReceive+0x2c6>
 8003ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea8:	d102      	bne.n	8003eb0 <HAL_SPI_TransmitReceive+0x2cc>
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d103      	bne.n	8003eb8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003eb6:	e029      	b.n	8003f0c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1a2      	bne.n	8003e08 <HAL_SPI_TransmitReceive+0x224>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d19d      	bne.n	8003e08 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ece:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f917 	bl	8004104 <SPI_EndRxTxTransaction>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d006      	beq.n	8003eea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003ee8:	e010      	b.n	8003f0c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10b      	bne.n	8003f0a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	e000      	b.n	8003f0c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003f0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3730      	adds	r7, #48	; 0x30
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	4613      	mov	r3, r2
 8003f36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f38:	f7fd fd54 	bl	80019e4 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	4413      	add	r3, r2
 8003f46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f48:	f7fd fd4c 	bl	80019e4 <HAL_GetTick>
 8003f4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f4e:	4b39      	ldr	r3, [pc, #228]	; (8004034 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	015b      	lsls	r3, r3, #5
 8003f54:	0d1b      	lsrs	r3, r3, #20
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	fb02 f303 	mul.w	r3, r2, r3
 8003f5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f5e:	e054      	b.n	800400a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f66:	d050      	beq.n	800400a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f68:	f7fd fd3c 	bl	80019e4 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	69fa      	ldr	r2, [r7, #28]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d902      	bls.n	8003f7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d13d      	bne.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f96:	d111      	bne.n	8003fbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa0:	d004      	beq.n	8003fac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003faa:	d107      	bne.n	8003fbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc4:	d10f      	bne.n	8003fe6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fe4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e017      	b.n	800402a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	3b01      	subs	r3, #1
 8004008:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	4013      	ands	r3, r2
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	429a      	cmp	r2, r3
 8004018:	bf0c      	ite	eq
 800401a:	2301      	moveq	r3, #1
 800401c:	2300      	movne	r3, #0
 800401e:	b2db      	uxtb	r3, r3
 8004020:	461a      	mov	r2, r3
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	429a      	cmp	r2, r3
 8004026:	d19b      	bne.n	8003f60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3720      	adds	r7, #32
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000008 	.word	0x20000008

08004038 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af02      	add	r7, sp, #8
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800404c:	d111      	bne.n	8004072 <SPI_EndRxTransaction+0x3a>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004056:	d004      	beq.n	8004062 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004060:	d107      	bne.n	8004072 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004070:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800407a:	d12a      	bne.n	80040d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004084:	d012      	beq.n	80040ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2200      	movs	r2, #0
 800408e:	2180      	movs	r1, #128	; 0x80
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f7ff ff49 	bl	8003f28 <SPI_WaitFlagStateUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d02d      	beq.n	80040f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a0:	f043 0220 	orr.w	r2, r3, #32
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e026      	b.n	80040fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2200      	movs	r2, #0
 80040b4:	2101      	movs	r1, #1
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f7ff ff36 	bl	8003f28 <SPI_WaitFlagStateUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d01a      	beq.n	80040f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c6:	f043 0220 	orr.w	r2, r3, #32
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e013      	b.n	80040fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2200      	movs	r2, #0
 80040da:	2101      	movs	r1, #1
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f7ff ff23 	bl	8003f28 <SPI_WaitFlagStateUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ec:	f043 0220 	orr.w	r2, r3, #32
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e000      	b.n	80040fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b088      	sub	sp, #32
 8004108:	af02      	add	r7, sp, #8
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004110:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <SPI_EndRxTxTransaction+0x7c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a1b      	ldr	r2, [pc, #108]	; (8004184 <SPI_EndRxTxTransaction+0x80>)
 8004116:	fba2 2303 	umull	r2, r3, r2, r3
 800411a:	0d5b      	lsrs	r3, r3, #21
 800411c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004120:	fb02 f303 	mul.w	r3, r2, r3
 8004124:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800412e:	d112      	bne.n	8004156 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2200      	movs	r2, #0
 8004138:	2180      	movs	r1, #128	; 0x80
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f7ff fef4 	bl	8003f28 <SPI_WaitFlagStateUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d016      	beq.n	8004174 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414a:	f043 0220 	orr.w	r2, r3, #32
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e00f      	b.n	8004176 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	3b01      	subs	r3, #1
 8004160:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416c:	2b80      	cmp	r3, #128	; 0x80
 800416e:	d0f2      	beq.n	8004156 <SPI_EndRxTxTransaction+0x52>
 8004170:	e000      	b.n	8004174 <SPI_EndRxTxTransaction+0x70>
        break;
 8004172:	bf00      	nop
  }

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000008 	.word	0x20000008
 8004184:	165e9f81 	.word	0x165e9f81

08004188 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e038      	b.n	8004210 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f7fc fb7c 	bl	80008b0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	3308      	adds	r3, #8
 80041c0:	4619      	mov	r1, r3
 80041c2:	4610      	mov	r0, r2
 80041c4:	f001 fd22 	bl	8005c0c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6818      	ldr	r0, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	461a      	mov	r2, r3
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	f001 fd84 	bl	8005ce0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6858      	ldr	r0, [r3, #4]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	f001 fdb1 	bl	8005d4c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	6892      	ldr	r2, [r2, #8]
 80041f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	6892      	ldr	r2, [r2, #8]
 80041fe:	f041 0101 	orr.w	r1, r1, #1
 8004202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e041      	b.n	80042ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fd f9ea 	bl	8001618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3304      	adds	r3, #4
 8004254:	4619      	mov	r1, r3
 8004256:	4610      	mov	r0, r2
 8004258:	f000 fa96 	bl	8004788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d001      	beq.n	80042d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e04e      	b.n	800436e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a23      	ldr	r2, [pc, #140]	; (800437c <HAL_TIM_Base_Start_IT+0xc4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d022      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x80>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fa:	d01d      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x80>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a1f      	ldr	r2, [pc, #124]	; (8004380 <HAL_TIM_Base_Start_IT+0xc8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d018      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x80>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a1e      	ldr	r2, [pc, #120]	; (8004384 <HAL_TIM_Base_Start_IT+0xcc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d013      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x80>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a1c      	ldr	r2, [pc, #112]	; (8004388 <HAL_TIM_Base_Start_IT+0xd0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00e      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x80>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a1b      	ldr	r2, [pc, #108]	; (800438c <HAL_TIM_Base_Start_IT+0xd4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d009      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x80>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a19      	ldr	r2, [pc, #100]	; (8004390 <HAL_TIM_Base_Start_IT+0xd8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d004      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x80>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a18      	ldr	r2, [pc, #96]	; (8004394 <HAL_TIM_Base_Start_IT+0xdc>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d111      	bne.n	800435c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b06      	cmp	r3, #6
 8004348:	d010      	beq.n	800436c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0201 	orr.w	r2, r2, #1
 8004358:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435a:	e007      	b.n	800436c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	40010000 	.word	0x40010000
 8004380:	40000400 	.word	0x40000400
 8004384:	40000800 	.word	0x40000800
 8004388:	40000c00 	.word	0x40000c00
 800438c:	40010400 	.word	0x40010400
 8004390:	40014000 	.word	0x40014000
 8004394:	40001800 	.word	0x40001800

08004398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d122      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d11b      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0202 	mvn.w	r2, #2
 80043c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f9b5 	bl	800474a <HAL_TIM_IC_CaptureCallback>
 80043e0:	e005      	b.n	80043ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f9a7 	bl	8004736 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f9b8 	bl	800475e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d122      	bne.n	8004448 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b04      	cmp	r3, #4
 800440e:	d11b      	bne.n	8004448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0204 	mvn.w	r2, #4
 8004418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2202      	movs	r2, #2
 800441e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f98b 	bl	800474a <HAL_TIM_IC_CaptureCallback>
 8004434:	e005      	b.n	8004442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f97d 	bl	8004736 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f98e 	bl	800475e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b08      	cmp	r3, #8
 8004454:	d122      	bne.n	800449c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b08      	cmp	r3, #8
 8004462:	d11b      	bne.n	800449c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0208 	mvn.w	r2, #8
 800446c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2204      	movs	r2, #4
 8004472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f961 	bl	800474a <HAL_TIM_IC_CaptureCallback>
 8004488:	e005      	b.n	8004496 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f953 	bl	8004736 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f964 	bl	800475e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0310 	and.w	r3, r3, #16
 80044a6:	2b10      	cmp	r3, #16
 80044a8:	d122      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d11b      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0210 	mvn.w	r2, #16
 80044c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2208      	movs	r2, #8
 80044c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f937 	bl	800474a <HAL_TIM_IC_CaptureCallback>
 80044dc:	e005      	b.n	80044ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f929 	bl	8004736 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f93a 	bl	800475e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d10e      	bne.n	800451c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b01      	cmp	r3, #1
 800450a:	d107      	bne.n	800451c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0201 	mvn.w	r2, #1
 8004514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fc fedc 	bl	80012d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004526:	2b80      	cmp	r3, #128	; 0x80
 8004528:	d10e      	bne.n	8004548 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004534:	2b80      	cmp	r3, #128	; 0x80
 8004536:	d107      	bne.n	8004548 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fae0 	bl	8004b08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004552:	2b40      	cmp	r3, #64	; 0x40
 8004554:	d10e      	bne.n	8004574 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004560:	2b40      	cmp	r3, #64	; 0x40
 8004562:	d107      	bne.n	8004574 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800456c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f8ff 	bl	8004772 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	2b20      	cmp	r3, #32
 8004580:	d10e      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b20      	cmp	r3, #32
 800458e:	d107      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0220 	mvn.w	r2, #32
 8004598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 faaa 	bl	8004af4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045a0:	bf00      	nop
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_TIM_ConfigClockSource+0x1c>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e0b4      	b.n	800472e <HAL_TIM_ConfigClockSource+0x186>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045fc:	d03e      	beq.n	800467c <HAL_TIM_ConfigClockSource+0xd4>
 80045fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004602:	f200 8087 	bhi.w	8004714 <HAL_TIM_ConfigClockSource+0x16c>
 8004606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800460a:	f000 8086 	beq.w	800471a <HAL_TIM_ConfigClockSource+0x172>
 800460e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004612:	d87f      	bhi.n	8004714 <HAL_TIM_ConfigClockSource+0x16c>
 8004614:	2b70      	cmp	r3, #112	; 0x70
 8004616:	d01a      	beq.n	800464e <HAL_TIM_ConfigClockSource+0xa6>
 8004618:	2b70      	cmp	r3, #112	; 0x70
 800461a:	d87b      	bhi.n	8004714 <HAL_TIM_ConfigClockSource+0x16c>
 800461c:	2b60      	cmp	r3, #96	; 0x60
 800461e:	d050      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x11a>
 8004620:	2b60      	cmp	r3, #96	; 0x60
 8004622:	d877      	bhi.n	8004714 <HAL_TIM_ConfigClockSource+0x16c>
 8004624:	2b50      	cmp	r3, #80	; 0x50
 8004626:	d03c      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0xfa>
 8004628:	2b50      	cmp	r3, #80	; 0x50
 800462a:	d873      	bhi.n	8004714 <HAL_TIM_ConfigClockSource+0x16c>
 800462c:	2b40      	cmp	r3, #64	; 0x40
 800462e:	d058      	beq.n	80046e2 <HAL_TIM_ConfigClockSource+0x13a>
 8004630:	2b40      	cmp	r3, #64	; 0x40
 8004632:	d86f      	bhi.n	8004714 <HAL_TIM_ConfigClockSource+0x16c>
 8004634:	2b30      	cmp	r3, #48	; 0x30
 8004636:	d064      	beq.n	8004702 <HAL_TIM_ConfigClockSource+0x15a>
 8004638:	2b30      	cmp	r3, #48	; 0x30
 800463a:	d86b      	bhi.n	8004714 <HAL_TIM_ConfigClockSource+0x16c>
 800463c:	2b20      	cmp	r3, #32
 800463e:	d060      	beq.n	8004702 <HAL_TIM_ConfigClockSource+0x15a>
 8004640:	2b20      	cmp	r3, #32
 8004642:	d867      	bhi.n	8004714 <HAL_TIM_ConfigClockSource+0x16c>
 8004644:	2b00      	cmp	r3, #0
 8004646:	d05c      	beq.n	8004702 <HAL_TIM_ConfigClockSource+0x15a>
 8004648:	2b10      	cmp	r3, #16
 800464a:	d05a      	beq.n	8004702 <HAL_TIM_ConfigClockSource+0x15a>
 800464c:	e062      	b.n	8004714 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	6899      	ldr	r1, [r3, #8]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f000 f9ad 	bl	80049bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004670:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	609a      	str	r2, [r3, #8]
      break;
 800467a:	e04f      	b.n	800471c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	6899      	ldr	r1, [r3, #8]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f000 f996 	bl	80049bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800469e:	609a      	str	r2, [r3, #8]
      break;
 80046a0:	e03c      	b.n	800471c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6859      	ldr	r1, [r3, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	461a      	mov	r2, r3
 80046b0:	f000 f90a 	bl	80048c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2150      	movs	r1, #80	; 0x50
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 f963 	bl	8004986 <TIM_ITRx_SetConfig>
      break;
 80046c0:	e02c      	b.n	800471c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	6859      	ldr	r1, [r3, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	461a      	mov	r2, r3
 80046d0:	f000 f929 	bl	8004926 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2160      	movs	r1, #96	; 0x60
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 f953 	bl	8004986 <TIM_ITRx_SetConfig>
      break;
 80046e0:	e01c      	b.n	800471c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6818      	ldr	r0, [r3, #0]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	6859      	ldr	r1, [r3, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	461a      	mov	r2, r3
 80046f0:	f000 f8ea 	bl	80048c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2140      	movs	r1, #64	; 0x40
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 f943 	bl	8004986 <TIM_ITRx_SetConfig>
      break;
 8004700:	e00c      	b.n	800471c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4619      	mov	r1, r3
 800470c:	4610      	mov	r0, r2
 800470e:	f000 f93a 	bl	8004986 <TIM_ITRx_SetConfig>
      break;
 8004712:	e003      	b.n	800471c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	73fb      	strb	r3, [r7, #15]
      break;
 8004718:	e000      	b.n	800471c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800471a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800472c:	7bfb      	ldrb	r3, [r7, #15]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
	...

08004788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a40      	ldr	r2, [pc, #256]	; (800489c <TIM_Base_SetConfig+0x114>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d013      	beq.n	80047c8 <TIM_Base_SetConfig+0x40>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a6:	d00f      	beq.n	80047c8 <TIM_Base_SetConfig+0x40>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a3d      	ldr	r2, [pc, #244]	; (80048a0 <TIM_Base_SetConfig+0x118>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d00b      	beq.n	80047c8 <TIM_Base_SetConfig+0x40>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a3c      	ldr	r2, [pc, #240]	; (80048a4 <TIM_Base_SetConfig+0x11c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d007      	beq.n	80047c8 <TIM_Base_SetConfig+0x40>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a3b      	ldr	r2, [pc, #236]	; (80048a8 <TIM_Base_SetConfig+0x120>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d003      	beq.n	80047c8 <TIM_Base_SetConfig+0x40>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a3a      	ldr	r2, [pc, #232]	; (80048ac <TIM_Base_SetConfig+0x124>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d108      	bne.n	80047da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a2f      	ldr	r2, [pc, #188]	; (800489c <TIM_Base_SetConfig+0x114>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d02b      	beq.n	800483a <TIM_Base_SetConfig+0xb2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e8:	d027      	beq.n	800483a <TIM_Base_SetConfig+0xb2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a2c      	ldr	r2, [pc, #176]	; (80048a0 <TIM_Base_SetConfig+0x118>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d023      	beq.n	800483a <TIM_Base_SetConfig+0xb2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a2b      	ldr	r2, [pc, #172]	; (80048a4 <TIM_Base_SetConfig+0x11c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d01f      	beq.n	800483a <TIM_Base_SetConfig+0xb2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a2a      	ldr	r2, [pc, #168]	; (80048a8 <TIM_Base_SetConfig+0x120>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d01b      	beq.n	800483a <TIM_Base_SetConfig+0xb2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a29      	ldr	r2, [pc, #164]	; (80048ac <TIM_Base_SetConfig+0x124>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d017      	beq.n	800483a <TIM_Base_SetConfig+0xb2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a28      	ldr	r2, [pc, #160]	; (80048b0 <TIM_Base_SetConfig+0x128>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d013      	beq.n	800483a <TIM_Base_SetConfig+0xb2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a27      	ldr	r2, [pc, #156]	; (80048b4 <TIM_Base_SetConfig+0x12c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00f      	beq.n	800483a <TIM_Base_SetConfig+0xb2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a26      	ldr	r2, [pc, #152]	; (80048b8 <TIM_Base_SetConfig+0x130>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d00b      	beq.n	800483a <TIM_Base_SetConfig+0xb2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a25      	ldr	r2, [pc, #148]	; (80048bc <TIM_Base_SetConfig+0x134>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d007      	beq.n	800483a <TIM_Base_SetConfig+0xb2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a24      	ldr	r2, [pc, #144]	; (80048c0 <TIM_Base_SetConfig+0x138>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d003      	beq.n	800483a <TIM_Base_SetConfig+0xb2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a23      	ldr	r2, [pc, #140]	; (80048c4 <TIM_Base_SetConfig+0x13c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d108      	bne.n	800484c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a0a      	ldr	r2, [pc, #40]	; (800489c <TIM_Base_SetConfig+0x114>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d003      	beq.n	8004880 <TIM_Base_SetConfig+0xf8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a0c      	ldr	r2, [pc, #48]	; (80048ac <TIM_Base_SetConfig+0x124>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d103      	bne.n	8004888 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	615a      	str	r2, [r3, #20]
}
 800488e:	bf00      	nop
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40010000 	.word	0x40010000
 80048a0:	40000400 	.word	0x40000400
 80048a4:	40000800 	.word	0x40000800
 80048a8:	40000c00 	.word	0x40000c00
 80048ac:	40010400 	.word	0x40010400
 80048b0:	40014000 	.word	0x40014000
 80048b4:	40014400 	.word	0x40014400
 80048b8:	40014800 	.word	0x40014800
 80048bc:	40001800 	.word	0x40001800
 80048c0:	40001c00 	.word	0x40001c00
 80048c4:	40002000 	.word	0x40002000

080048c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	f023 0201 	bic.w	r2, r3, #1
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f023 030a 	bic.w	r3, r3, #10
 8004904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	4313      	orrs	r3, r2
 800490c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	621a      	str	r2, [r3, #32]
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004926:	b480      	push	{r7}
 8004928:	b087      	sub	sp, #28
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	f023 0210 	bic.w	r2, r3, #16
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004950:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	031b      	lsls	r3, r3, #12
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004962:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	621a      	str	r2, [r3, #32]
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004986:	b480      	push	{r7}
 8004988:	b085      	sub	sp, #20
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f043 0307 	orr.w	r3, r3, #7
 80049a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	609a      	str	r2, [r3, #8]
}
 80049b0:	bf00      	nop
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	021a      	lsls	r2, r3, #8
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	431a      	orrs	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	609a      	str	r2, [r3, #8]
}
 80049f0:	bf00      	nop
 80049f2:	371c      	adds	r7, #28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e05a      	b.n	8004aca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a21      	ldr	r2, [pc, #132]	; (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d022      	beq.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a60:	d01d      	beq.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a1d      	ldr	r2, [pc, #116]	; (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d018      	beq.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a1b      	ldr	r2, [pc, #108]	; (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d013      	beq.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00e      	beq.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a18      	ldr	r2, [pc, #96]	; (8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d009      	beq.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a17      	ldr	r2, [pc, #92]	; (8004aec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d004      	beq.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a15      	ldr	r2, [pc, #84]	; (8004af0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d10c      	bne.n	8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	40010000 	.word	0x40010000
 8004adc:	40000400 	.word	0x40000400
 8004ae0:	40000800 	.word	0x40000800
 8004ae4:	40000c00 	.word	0x40000c00
 8004ae8:	40010400 	.word	0x40010400
 8004aec:	40014000 	.word	0x40014000
 8004af0:	40001800 	.word	0x40001800

08004af4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e03f      	b.n	8004bae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fc fe54 	bl	80017f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2224      	movs	r2, #36	; 0x24
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fddf 	bl	8005724 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695a      	ldr	r2, [r3, #20]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b08a      	sub	sp, #40	; 0x28
 8004bba:	af02      	add	r7, sp, #8
 8004bbc:	60f8      	str	r0, [r7, #12]
 8004bbe:	60b9      	str	r1, [r7, #8]
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b20      	cmp	r3, #32
 8004bd4:	d17c      	bne.n	8004cd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <HAL_UART_Transmit+0x2c>
 8004bdc:	88fb      	ldrh	r3, [r7, #6]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e075      	b.n	8004cd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_UART_Transmit+0x3e>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e06e      	b.n	8004cd2 <HAL_UART_Transmit+0x11c>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2221      	movs	r2, #33	; 0x21
 8004c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c0a:	f7fc feeb 	bl	80019e4 <HAL_GetTick>
 8004c0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	88fa      	ldrh	r2, [r7, #6]
 8004c14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	88fa      	ldrh	r2, [r7, #6]
 8004c1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c24:	d108      	bne.n	8004c38 <HAL_UART_Transmit+0x82>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d104      	bne.n	8004c38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	61bb      	str	r3, [r7, #24]
 8004c36:	e003      	b.n	8004c40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c48:	e02a      	b.n	8004ca0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2200      	movs	r2, #0
 8004c52:	2180      	movs	r1, #128	; 0x80
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 fb1f 	bl	8005298 <UART_WaitOnFlagUntilTimeout>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e036      	b.n	8004cd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10b      	bne.n	8004c82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	3302      	adds	r3, #2
 8004c7e:	61bb      	str	r3, [r7, #24]
 8004c80:	e007      	b.n	8004c92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	781a      	ldrb	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1cf      	bne.n	8004c4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2140      	movs	r1, #64	; 0x40
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 faef 	bl	8005298 <UART_WaitOnFlagUntilTimeout>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e006      	b.n	8004cd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	e000      	b.n	8004cd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004cd0:	2302      	movs	r3, #2
  }
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3720      	adds	r7, #32
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	d11d      	bne.n	8004d30 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <HAL_UART_Receive_IT+0x26>
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e016      	b.n	8004d32 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <HAL_UART_Receive_IT+0x38>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e00f      	b.n	8004d32 <HAL_UART_Receive_IT+0x58>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d20:	88fb      	ldrh	r3, [r7, #6]
 8004d22:	461a      	mov	r2, r3
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 fb24 	bl	8005374 <UART_Start_Receive_IT>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	e000      	b.n	8004d32 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004d30:	2302      	movs	r3, #2
  }
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b0ba      	sub	sp, #232	; 0xe8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10f      	bne.n	8004da2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d009      	beq.n	8004da2 <HAL_UART_IRQHandler+0x66>
 8004d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d92:	f003 0320 	and.w	r3, r3, #32
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fc07 	bl	80055ae <UART_Receive_IT>
      return;
 8004da0:	e256      	b.n	8005250 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004da2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 80de 	beq.w	8004f68 <HAL_UART_IRQHandler+0x22c>
 8004dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d106      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dbc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 80d1 	beq.w	8004f68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00b      	beq.n	8004dea <HAL_UART_IRQHandler+0xae>
 8004dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d005      	beq.n	8004dea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	f043 0201 	orr.w	r2, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00b      	beq.n	8004e0e <HAL_UART_IRQHandler+0xd2>
 8004df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	f043 0202 	orr.w	r2, r3, #2
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00b      	beq.n	8004e32 <HAL_UART_IRQHandler+0xf6>
 8004e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d005      	beq.n	8004e32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f043 0204 	orr.w	r2, r3, #4
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d011      	beq.n	8004e62 <HAL_UART_IRQHandler+0x126>
 8004e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d105      	bne.n	8004e56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	f043 0208 	orr.w	r2, r3, #8
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 81ed 	beq.w	8005246 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d008      	beq.n	8004e8a <HAL_UART_IRQHandler+0x14e>
 8004e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e7c:	f003 0320 	and.w	r3, r3, #32
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 fb92 	bl	80055ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e94:	2b40      	cmp	r3, #64	; 0x40
 8004e96:	bf0c      	ite	eq
 8004e98:	2301      	moveq	r3, #1
 8004e9a:	2300      	movne	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d103      	bne.n	8004eb6 <HAL_UART_IRQHandler+0x17a>
 8004eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d04f      	beq.n	8004f56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fa9a 	bl	80053f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec6:	2b40      	cmp	r3, #64	; 0x40
 8004ec8:	d141      	bne.n	8004f4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3314      	adds	r3, #20
 8004ed0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3314      	adds	r3, #20
 8004ef2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ef6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f06:	e841 2300 	strex	r3, r2, [r1]
 8004f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1d9      	bne.n	8004eca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d013      	beq.n	8004f46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f22:	4a7d      	ldr	r2, [pc, #500]	; (8005118 <HAL_UART_IRQHandler+0x3dc>)
 8004f24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fc ff0b 	bl	8001d46 <HAL_DMA_Abort_IT>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d016      	beq.n	8004f64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f40:	4610      	mov	r0, r2
 8004f42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f44:	e00e      	b.n	8004f64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f990 	bl	800526c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f4c:	e00a      	b.n	8004f64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f98c 	bl	800526c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f54:	e006      	b.n	8004f64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f988 	bl	800526c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004f62:	e170      	b.n	8005246 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f64:	bf00      	nop
    return;
 8004f66:	e16e      	b.n	8005246 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	f040 814a 	bne.w	8005206 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 8143 	beq.w	8005206 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 813c 	beq.w	8005206 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60bb      	str	r3, [r7, #8]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	60bb      	str	r3, [r7, #8]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	60bb      	str	r3, [r7, #8]
 8004fa2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fae:	2b40      	cmp	r3, #64	; 0x40
 8004fb0:	f040 80b4 	bne.w	800511c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 8140 	beq.w	800524a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	f080 8139 	bcs.w	800524a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fde:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fea:	f000 8088 	beq.w	80050fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	330c      	adds	r3, #12
 8004ff4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ffc:	e853 3f00 	ldrex	r3, [r3]
 8005000:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005004:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800500c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	330c      	adds	r3, #12
 8005016:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800501a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800501e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005022:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005026:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800502a:	e841 2300 	strex	r3, r2, [r1]
 800502e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005032:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1d9      	bne.n	8004fee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3314      	adds	r3, #20
 8005040:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800504a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800504c:	f023 0301 	bic.w	r3, r3, #1
 8005050:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3314      	adds	r3, #20
 800505a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800505e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005062:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005064:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005066:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e1      	bne.n	800503a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3314      	adds	r3, #20
 800507c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005080:	e853 3f00 	ldrex	r3, [r3]
 8005084:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800508c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3314      	adds	r3, #20
 8005096:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800509a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800509c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050a2:	e841 2300 	strex	r3, r2, [r1]
 80050a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80050a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1e3      	bne.n	8005076 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	330c      	adds	r3, #12
 80050c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c6:	e853 3f00 	ldrex	r3, [r3]
 80050ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050ce:	f023 0310 	bic.w	r3, r3, #16
 80050d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	330c      	adds	r3, #12
 80050dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80050e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80050e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e3      	bne.n	80050bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7fc fdb4 	bl	8001c66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005106:	b29b      	uxth	r3, r3
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	b29b      	uxth	r3, r3
 800510c:	4619      	mov	r1, r3
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f8b6 	bl	8005280 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005114:	e099      	b.n	800524a <HAL_UART_IRQHandler+0x50e>
 8005116:	bf00      	nop
 8005118:	080054b7 	.word	0x080054b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005124:	b29b      	uxth	r3, r3
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 808b 	beq.w	800524e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005138:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8086 	beq.w	800524e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	330c      	adds	r3, #12
 8005148:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514c:	e853 3f00 	ldrex	r3, [r3]
 8005150:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005154:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005158:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	330c      	adds	r3, #12
 8005162:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005166:	647a      	str	r2, [r7, #68]	; 0x44
 8005168:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800516c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e3      	bne.n	8005142 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3314      	adds	r3, #20
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	623b      	str	r3, [r7, #32]
   return(result);
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3314      	adds	r3, #20
 800519a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800519e:	633a      	str	r2, [r7, #48]	; 0x30
 80051a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e3      	bne.n	800517a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	330c      	adds	r3, #12
 80051c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	e853 3f00 	ldrex	r3, [r3]
 80051ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0310 	bic.w	r3, r3, #16
 80051d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	330c      	adds	r3, #12
 80051e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80051e4:	61fa      	str	r2, [r7, #28]
 80051e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e8:	69b9      	ldr	r1, [r7, #24]
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	e841 2300 	strex	r3, r2, [r1]
 80051f0:	617b      	str	r3, [r7, #20]
   return(result);
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e3      	bne.n	80051c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051fc:	4619      	mov	r1, r3
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f83e 	bl	8005280 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005204:	e023      	b.n	800524e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520e:	2b00      	cmp	r3, #0
 8005210:	d009      	beq.n	8005226 <HAL_UART_IRQHandler+0x4ea>
 8005212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f95d 	bl	80054de <UART_Transmit_IT>
    return;
 8005224:	e014      	b.n	8005250 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800522a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00e      	beq.n	8005250 <HAL_UART_IRQHandler+0x514>
 8005232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d008      	beq.n	8005250 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f99d 	bl	800557e <UART_EndTransmit_IT>
    return;
 8005244:	e004      	b.n	8005250 <HAL_UART_IRQHandler+0x514>
    return;
 8005246:	bf00      	nop
 8005248:	e002      	b.n	8005250 <HAL_UART_IRQHandler+0x514>
      return;
 800524a:	bf00      	nop
 800524c:	e000      	b.n	8005250 <HAL_UART_IRQHandler+0x514>
      return;
 800524e:	bf00      	nop
  }
}
 8005250:	37e8      	adds	r7, #232	; 0xe8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop

08005258 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b090      	sub	sp, #64	; 0x40
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	603b      	str	r3, [r7, #0]
 80052a4:	4613      	mov	r3, r2
 80052a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a8:	e050      	b.n	800534c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b0:	d04c      	beq.n	800534c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d007      	beq.n	80052c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80052b8:	f7fc fb94 	bl	80019e4 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d241      	bcs.n	800534c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	330c      	adds	r3, #12
 80052ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	330c      	adds	r3, #12
 80052e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052e8:	637a      	str	r2, [r7, #52]	; 0x34
 80052ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052f0:	e841 2300 	strex	r3, r2, [r1]
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e5      	bne.n	80052c8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3314      	adds	r3, #20
 8005302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	e853 3f00 	ldrex	r3, [r3]
 800530a:	613b      	str	r3, [r7, #16]
   return(result);
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f023 0301 	bic.w	r3, r3, #1
 8005312:	63bb      	str	r3, [r7, #56]	; 0x38
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3314      	adds	r3, #20
 800531a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800531c:	623a      	str	r2, [r7, #32]
 800531e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005320:	69f9      	ldr	r1, [r7, #28]
 8005322:	6a3a      	ldr	r2, [r7, #32]
 8005324:	e841 2300 	strex	r3, r2, [r1]
 8005328:	61bb      	str	r3, [r7, #24]
   return(result);
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1e5      	bne.n	80052fc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2220      	movs	r2, #32
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e00f      	b.n	800536c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	4013      	ands	r3, r2
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	429a      	cmp	r2, r3
 800535a:	bf0c      	ite	eq
 800535c:	2301      	moveq	r3, #1
 800535e:	2300      	movne	r3, #0
 8005360:	b2db      	uxtb	r3, r3
 8005362:	461a      	mov	r2, r3
 8005364:	79fb      	ldrb	r3, [r7, #7]
 8005366:	429a      	cmp	r2, r3
 8005368:	d09f      	beq.n	80052aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3740      	adds	r7, #64	; 0x40
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	4613      	mov	r3, r2
 8005380:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	88fa      	ldrh	r2, [r7, #6]
 800538c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	88fa      	ldrh	r2, [r7, #6]
 8005392:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2222      	movs	r2, #34	; 0x22
 800539e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d007      	beq.n	80053c2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053c0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695a      	ldr	r2, [r3, #20]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0201 	orr.w	r2, r2, #1
 80053d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f042 0220 	orr.w	r2, r2, #32
 80053e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b095      	sub	sp, #84	; 0x54
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	330c      	adds	r3, #12
 80053fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005402:	e853 3f00 	ldrex	r3, [r3]
 8005406:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800540e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	330c      	adds	r3, #12
 8005416:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005418:	643a      	str	r2, [r7, #64]	; 0x40
 800541a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800541e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e5      	bne.n	80053f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3314      	adds	r3, #20
 8005432:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	e853 3f00 	ldrex	r3, [r3]
 800543a:	61fb      	str	r3, [r7, #28]
   return(result);
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	f023 0301 	bic.w	r3, r3, #1
 8005442:	64bb      	str	r3, [r7, #72]	; 0x48
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3314      	adds	r3, #20
 800544a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800544c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800544e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005450:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005454:	e841 2300 	strex	r3, r2, [r1]
 8005458:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1e5      	bne.n	800542c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005464:	2b01      	cmp	r3, #1
 8005466:	d119      	bne.n	800549c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	330c      	adds	r3, #12
 800546e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	e853 3f00 	ldrex	r3, [r3]
 8005476:	60bb      	str	r3, [r7, #8]
   return(result);
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f023 0310 	bic.w	r3, r3, #16
 800547e:	647b      	str	r3, [r7, #68]	; 0x44
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	330c      	adds	r3, #12
 8005486:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005488:	61ba      	str	r2, [r7, #24]
 800548a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	6979      	ldr	r1, [r7, #20]
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	613b      	str	r3, [r7, #16]
   return(result);
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e5      	bne.n	8005468 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80054aa:	bf00      	nop
 80054ac:	3754      	adds	r7, #84	; 0x54
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f7ff fecb 	bl	800526c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054d6:	bf00      	nop
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054de:	b480      	push	{r7}
 80054e0:	b085      	sub	sp, #20
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b21      	cmp	r3, #33	; 0x21
 80054f0:	d13e      	bne.n	8005570 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fa:	d114      	bne.n	8005526 <UART_Transmit_IT+0x48>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d110      	bne.n	8005526 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005518:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	1c9a      	adds	r2, r3, #2
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	621a      	str	r2, [r3, #32]
 8005524:	e008      	b.n	8005538 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	1c59      	adds	r1, r3, #1
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6211      	str	r1, [r2, #32]
 8005530:	781a      	ldrb	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800553c:	b29b      	uxth	r3, r3
 800553e:	3b01      	subs	r3, #1
 8005540:	b29b      	uxth	r3, r3
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	4619      	mov	r1, r3
 8005546:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10f      	bne.n	800556c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800555a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800556a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	e000      	b.n	8005572 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005570:	2302      	movs	r3, #2
  }
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b082      	sub	sp, #8
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005594:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff fe5a 	bl	8005258 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b08c      	sub	sp, #48	; 0x30
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b22      	cmp	r3, #34	; 0x22
 80055c0:	f040 80ab 	bne.w	800571a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055cc:	d117      	bne.n	80055fe <UART_Receive_IT+0x50>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d113      	bne.n	80055fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	1c9a      	adds	r2, r3, #2
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	629a      	str	r2, [r3, #40]	; 0x28
 80055fc:	e026      	b.n	800564c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005602:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005604:	2300      	movs	r3, #0
 8005606:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005610:	d007      	beq.n	8005622 <UART_Receive_IT+0x74>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10a      	bne.n	8005630 <UART_Receive_IT+0x82>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	b2da      	uxtb	r2, r3
 800562a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	e008      	b.n	8005642 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	b2db      	uxtb	r3, r3
 8005638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800563c:	b2da      	uxtb	r2, r3
 800563e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005640:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005650:	b29b      	uxth	r3, r3
 8005652:	3b01      	subs	r3, #1
 8005654:	b29b      	uxth	r3, r3
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	4619      	mov	r1, r3
 800565a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800565c:	2b00      	cmp	r3, #0
 800565e:	d15a      	bne.n	8005716 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0220 	bic.w	r2, r2, #32
 800566e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800567e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0201 	bic.w	r2, r2, #1
 800568e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	2b01      	cmp	r3, #1
 800569e:	d135      	bne.n	800570c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	330c      	adds	r3, #12
 80056ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	613b      	str	r3, [r7, #16]
   return(result);
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	f023 0310 	bic.w	r3, r3, #16
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	330c      	adds	r3, #12
 80056c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c6:	623a      	str	r2, [r7, #32]
 80056c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	69f9      	ldr	r1, [r7, #28]
 80056cc:	6a3a      	ldr	r2, [r7, #32]
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e5      	bne.n	80056a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0310 	and.w	r3, r3, #16
 80056e4:	2b10      	cmp	r3, #16
 80056e6:	d10a      	bne.n	80056fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005702:	4619      	mov	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff fdbb 	bl	8005280 <HAL_UARTEx_RxEventCallback>
 800570a:	e002      	b.n	8005712 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7fc f827 	bl	8001760 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	e002      	b.n	800571c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	e000      	b.n	800571c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800571a:	2302      	movs	r3, #2
  }
}
 800571c:	4618      	mov	r0, r3
 800571e:	3730      	adds	r7, #48	; 0x30
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005728:	b0c0      	sub	sp, #256	; 0x100
 800572a:	af00      	add	r7, sp, #0
 800572c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800573c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005740:	68d9      	ldr	r1, [r3, #12]
 8005742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	ea40 0301 	orr.w	r3, r0, r1
 800574c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800574e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	431a      	orrs	r2, r3
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	431a      	orrs	r2, r3
 8005764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	4313      	orrs	r3, r2
 800576c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800577c:	f021 010c 	bic.w	r1, r1, #12
 8005780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800578a:	430b      	orrs	r3, r1
 800578c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800578e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800579a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800579e:	6999      	ldr	r1, [r3, #24]
 80057a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	ea40 0301 	orr.w	r3, r0, r1
 80057aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	4b8f      	ldr	r3, [pc, #572]	; (80059f0 <UART_SetConfig+0x2cc>)
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d005      	beq.n	80057c4 <UART_SetConfig+0xa0>
 80057b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4b8d      	ldr	r3, [pc, #564]	; (80059f4 <UART_SetConfig+0x2d0>)
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d104      	bne.n	80057ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057c4:	f7fd ff24 	bl	8003610 <HAL_RCC_GetPCLK2Freq>
 80057c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80057cc:	e003      	b.n	80057d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057ce:	f7fd ff0b 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 80057d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e0:	f040 810c 	bne.w	80059fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057e8:	2200      	movs	r2, #0
 80057ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80057f6:	4622      	mov	r2, r4
 80057f8:	462b      	mov	r3, r5
 80057fa:	1891      	adds	r1, r2, r2
 80057fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80057fe:	415b      	adcs	r3, r3
 8005800:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005802:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005806:	4621      	mov	r1, r4
 8005808:	eb12 0801 	adds.w	r8, r2, r1
 800580c:	4629      	mov	r1, r5
 800580e:	eb43 0901 	adc.w	r9, r3, r1
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800581e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005822:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005826:	4690      	mov	r8, r2
 8005828:	4699      	mov	r9, r3
 800582a:	4623      	mov	r3, r4
 800582c:	eb18 0303 	adds.w	r3, r8, r3
 8005830:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005834:	462b      	mov	r3, r5
 8005836:	eb49 0303 	adc.w	r3, r9, r3
 800583a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800583e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800584a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800584e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005852:	460b      	mov	r3, r1
 8005854:	18db      	adds	r3, r3, r3
 8005856:	653b      	str	r3, [r7, #80]	; 0x50
 8005858:	4613      	mov	r3, r2
 800585a:	eb42 0303 	adc.w	r3, r2, r3
 800585e:	657b      	str	r3, [r7, #84]	; 0x54
 8005860:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005864:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005868:	f7fa fd02 	bl	8000270 <__aeabi_uldivmod>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	4b61      	ldr	r3, [pc, #388]	; (80059f8 <UART_SetConfig+0x2d4>)
 8005872:	fba3 2302 	umull	r2, r3, r3, r2
 8005876:	095b      	lsrs	r3, r3, #5
 8005878:	011c      	lsls	r4, r3, #4
 800587a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800587e:	2200      	movs	r2, #0
 8005880:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005884:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005888:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800588c:	4642      	mov	r2, r8
 800588e:	464b      	mov	r3, r9
 8005890:	1891      	adds	r1, r2, r2
 8005892:	64b9      	str	r1, [r7, #72]	; 0x48
 8005894:	415b      	adcs	r3, r3
 8005896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005898:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800589c:	4641      	mov	r1, r8
 800589e:	eb12 0a01 	adds.w	sl, r2, r1
 80058a2:	4649      	mov	r1, r9
 80058a4:	eb43 0b01 	adc.w	fp, r3, r1
 80058a8:	f04f 0200 	mov.w	r2, #0
 80058ac:	f04f 0300 	mov.w	r3, #0
 80058b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058bc:	4692      	mov	sl, r2
 80058be:	469b      	mov	fp, r3
 80058c0:	4643      	mov	r3, r8
 80058c2:	eb1a 0303 	adds.w	r3, sl, r3
 80058c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058ca:	464b      	mov	r3, r9
 80058cc:	eb4b 0303 	adc.w	r3, fp, r3
 80058d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80058d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80058e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80058e8:	460b      	mov	r3, r1
 80058ea:	18db      	adds	r3, r3, r3
 80058ec:	643b      	str	r3, [r7, #64]	; 0x40
 80058ee:	4613      	mov	r3, r2
 80058f0:	eb42 0303 	adc.w	r3, r2, r3
 80058f4:	647b      	str	r3, [r7, #68]	; 0x44
 80058f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80058fe:	f7fa fcb7 	bl	8000270 <__aeabi_uldivmod>
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	4611      	mov	r1, r2
 8005908:	4b3b      	ldr	r3, [pc, #236]	; (80059f8 <UART_SetConfig+0x2d4>)
 800590a:	fba3 2301 	umull	r2, r3, r3, r1
 800590e:	095b      	lsrs	r3, r3, #5
 8005910:	2264      	movs	r2, #100	; 0x64
 8005912:	fb02 f303 	mul.w	r3, r2, r3
 8005916:	1acb      	subs	r3, r1, r3
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800591e:	4b36      	ldr	r3, [pc, #216]	; (80059f8 <UART_SetConfig+0x2d4>)
 8005920:	fba3 2302 	umull	r2, r3, r3, r2
 8005924:	095b      	lsrs	r3, r3, #5
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800592c:	441c      	add	r4, r3
 800592e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005932:	2200      	movs	r2, #0
 8005934:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005938:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800593c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005940:	4642      	mov	r2, r8
 8005942:	464b      	mov	r3, r9
 8005944:	1891      	adds	r1, r2, r2
 8005946:	63b9      	str	r1, [r7, #56]	; 0x38
 8005948:	415b      	adcs	r3, r3
 800594a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800594c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005950:	4641      	mov	r1, r8
 8005952:	1851      	adds	r1, r2, r1
 8005954:	6339      	str	r1, [r7, #48]	; 0x30
 8005956:	4649      	mov	r1, r9
 8005958:	414b      	adcs	r3, r1
 800595a:	637b      	str	r3, [r7, #52]	; 0x34
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005968:	4659      	mov	r1, fp
 800596a:	00cb      	lsls	r3, r1, #3
 800596c:	4651      	mov	r1, sl
 800596e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005972:	4651      	mov	r1, sl
 8005974:	00ca      	lsls	r2, r1, #3
 8005976:	4610      	mov	r0, r2
 8005978:	4619      	mov	r1, r3
 800597a:	4603      	mov	r3, r0
 800597c:	4642      	mov	r2, r8
 800597e:	189b      	adds	r3, r3, r2
 8005980:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005984:	464b      	mov	r3, r9
 8005986:	460a      	mov	r2, r1
 8005988:	eb42 0303 	adc.w	r3, r2, r3
 800598c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800599c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80059a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80059a4:	460b      	mov	r3, r1
 80059a6:	18db      	adds	r3, r3, r3
 80059a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80059aa:	4613      	mov	r3, r2
 80059ac:	eb42 0303 	adc.w	r3, r2, r3
 80059b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80059ba:	f7fa fc59 	bl	8000270 <__aeabi_uldivmod>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4b0d      	ldr	r3, [pc, #52]	; (80059f8 <UART_SetConfig+0x2d4>)
 80059c4:	fba3 1302 	umull	r1, r3, r3, r2
 80059c8:	095b      	lsrs	r3, r3, #5
 80059ca:	2164      	movs	r1, #100	; 0x64
 80059cc:	fb01 f303 	mul.w	r3, r1, r3
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	3332      	adds	r3, #50	; 0x32
 80059d6:	4a08      	ldr	r2, [pc, #32]	; (80059f8 <UART_SetConfig+0x2d4>)
 80059d8:	fba2 2303 	umull	r2, r3, r2, r3
 80059dc:	095b      	lsrs	r3, r3, #5
 80059de:	f003 0207 	and.w	r2, r3, #7
 80059e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4422      	add	r2, r4
 80059ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059ec:	e106      	b.n	8005bfc <UART_SetConfig+0x4d8>
 80059ee:	bf00      	nop
 80059f0:	40011000 	.word	0x40011000
 80059f4:	40011400 	.word	0x40011400
 80059f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a00:	2200      	movs	r2, #0
 8005a02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a0e:	4642      	mov	r2, r8
 8005a10:	464b      	mov	r3, r9
 8005a12:	1891      	adds	r1, r2, r2
 8005a14:	6239      	str	r1, [r7, #32]
 8005a16:	415b      	adcs	r3, r3
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a1e:	4641      	mov	r1, r8
 8005a20:	1854      	adds	r4, r2, r1
 8005a22:	4649      	mov	r1, r9
 8005a24:	eb43 0501 	adc.w	r5, r3, r1
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	00eb      	lsls	r3, r5, #3
 8005a32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a36:	00e2      	lsls	r2, r4, #3
 8005a38:	4614      	mov	r4, r2
 8005a3a:	461d      	mov	r5, r3
 8005a3c:	4643      	mov	r3, r8
 8005a3e:	18e3      	adds	r3, r4, r3
 8005a40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a44:	464b      	mov	r3, r9
 8005a46:	eb45 0303 	adc.w	r3, r5, r3
 8005a4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a5e:	f04f 0200 	mov.w	r2, #0
 8005a62:	f04f 0300 	mov.w	r3, #0
 8005a66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a6a:	4629      	mov	r1, r5
 8005a6c:	008b      	lsls	r3, r1, #2
 8005a6e:	4621      	mov	r1, r4
 8005a70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a74:	4621      	mov	r1, r4
 8005a76:	008a      	lsls	r2, r1, #2
 8005a78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a7c:	f7fa fbf8 	bl	8000270 <__aeabi_uldivmod>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4b60      	ldr	r3, [pc, #384]	; (8005c08 <UART_SetConfig+0x4e4>)
 8005a86:	fba3 2302 	umull	r2, r3, r3, r2
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	011c      	lsls	r4, r3, #4
 8005a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a92:	2200      	movs	r2, #0
 8005a94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005aa0:	4642      	mov	r2, r8
 8005aa2:	464b      	mov	r3, r9
 8005aa4:	1891      	adds	r1, r2, r2
 8005aa6:	61b9      	str	r1, [r7, #24]
 8005aa8:	415b      	adcs	r3, r3
 8005aaa:	61fb      	str	r3, [r7, #28]
 8005aac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ab0:	4641      	mov	r1, r8
 8005ab2:	1851      	adds	r1, r2, r1
 8005ab4:	6139      	str	r1, [r7, #16]
 8005ab6:	4649      	mov	r1, r9
 8005ab8:	414b      	adcs	r3, r1
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	f04f 0300 	mov.w	r3, #0
 8005ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ac8:	4659      	mov	r1, fp
 8005aca:	00cb      	lsls	r3, r1, #3
 8005acc:	4651      	mov	r1, sl
 8005ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ad2:	4651      	mov	r1, sl
 8005ad4:	00ca      	lsls	r2, r1, #3
 8005ad6:	4610      	mov	r0, r2
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4603      	mov	r3, r0
 8005adc:	4642      	mov	r2, r8
 8005ade:	189b      	adds	r3, r3, r2
 8005ae0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ae4:	464b      	mov	r3, r9
 8005ae6:	460a      	mov	r2, r1
 8005ae8:	eb42 0303 	adc.w	r3, r2, r3
 8005aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005afa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	f04f 0300 	mov.w	r3, #0
 8005b04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b08:	4649      	mov	r1, r9
 8005b0a:	008b      	lsls	r3, r1, #2
 8005b0c:	4641      	mov	r1, r8
 8005b0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b12:	4641      	mov	r1, r8
 8005b14:	008a      	lsls	r2, r1, #2
 8005b16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005b1a:	f7fa fba9 	bl	8000270 <__aeabi_uldivmod>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	4611      	mov	r1, r2
 8005b24:	4b38      	ldr	r3, [pc, #224]	; (8005c08 <UART_SetConfig+0x4e4>)
 8005b26:	fba3 2301 	umull	r2, r3, r3, r1
 8005b2a:	095b      	lsrs	r3, r3, #5
 8005b2c:	2264      	movs	r2, #100	; 0x64
 8005b2e:	fb02 f303 	mul.w	r3, r2, r3
 8005b32:	1acb      	subs	r3, r1, r3
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	3332      	adds	r3, #50	; 0x32
 8005b38:	4a33      	ldr	r2, [pc, #204]	; (8005c08 <UART_SetConfig+0x4e4>)
 8005b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3e:	095b      	lsrs	r3, r3, #5
 8005b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b44:	441c      	add	r4, r3
 8005b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	673b      	str	r3, [r7, #112]	; 0x70
 8005b4e:	677a      	str	r2, [r7, #116]	; 0x74
 8005b50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b54:	4642      	mov	r2, r8
 8005b56:	464b      	mov	r3, r9
 8005b58:	1891      	adds	r1, r2, r2
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	415b      	adcs	r3, r3
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b64:	4641      	mov	r1, r8
 8005b66:	1851      	adds	r1, r2, r1
 8005b68:	6039      	str	r1, [r7, #0]
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	414b      	adcs	r3, r1
 8005b6e:	607b      	str	r3, [r7, #4]
 8005b70:	f04f 0200 	mov.w	r2, #0
 8005b74:	f04f 0300 	mov.w	r3, #0
 8005b78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b7c:	4659      	mov	r1, fp
 8005b7e:	00cb      	lsls	r3, r1, #3
 8005b80:	4651      	mov	r1, sl
 8005b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b86:	4651      	mov	r1, sl
 8005b88:	00ca      	lsls	r2, r1, #3
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4603      	mov	r3, r0
 8005b90:	4642      	mov	r2, r8
 8005b92:	189b      	adds	r3, r3, r2
 8005b94:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b96:	464b      	mov	r3, r9
 8005b98:	460a      	mov	r2, r1
 8005b9a:	eb42 0303 	adc.w	r3, r2, r3
 8005b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	663b      	str	r3, [r7, #96]	; 0x60
 8005baa:	667a      	str	r2, [r7, #100]	; 0x64
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	f04f 0300 	mov.w	r3, #0
 8005bb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005bb8:	4649      	mov	r1, r9
 8005bba:	008b      	lsls	r3, r1, #2
 8005bbc:	4641      	mov	r1, r8
 8005bbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bc2:	4641      	mov	r1, r8
 8005bc4:	008a      	lsls	r2, r1, #2
 8005bc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005bca:	f7fa fb51 	bl	8000270 <__aeabi_uldivmod>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4b0d      	ldr	r3, [pc, #52]	; (8005c08 <UART_SetConfig+0x4e4>)
 8005bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8005bd8:	095b      	lsrs	r3, r3, #5
 8005bda:	2164      	movs	r1, #100	; 0x64
 8005bdc:	fb01 f303 	mul.w	r3, r1, r3
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	3332      	adds	r3, #50	; 0x32
 8005be6:	4a08      	ldr	r2, [pc, #32]	; (8005c08 <UART_SetConfig+0x4e4>)
 8005be8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bec:	095b      	lsrs	r3, r3, #5
 8005bee:	f003 020f 	and.w	r2, r3, #15
 8005bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4422      	add	r2, r4
 8005bfa:	609a      	str	r2, [r3, #8]
}
 8005bfc:	bf00      	nop
 8005bfe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c02:	46bd      	mov	sp, r7
 8005c04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c08:	51eb851f 	.word	0x51eb851f

08005c0c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	6812      	ldr	r2, [r2, #0]
 8005c24:	f023 0101 	bic.w	r1, r3, #1
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d102      	bne.n	8005c3c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005c36:	2340      	movs	r3, #64	; 0x40
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	e001      	b.n	8005c40 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005c4c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005c52:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005c58:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005c5e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005c64:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8005c6a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8005c70:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8005c76:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8005c7c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8005c9a:	4b10      	ldr	r3, [pc, #64]	; (8005cdc <FSMC_NORSRAM_Init+0xd0>)
 8005c9c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ca4:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8005cac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	43db      	mvns	r3, r3
 8005cbc:	ea02 0103 	and.w	r1, r2, r3
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	4319      	orrs	r1, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	371c      	adds	r7, #28
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	0008fb7f 	.word	0x0008fb7f

08005ce0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	431a      	orrs	r2, r3
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	021b      	lsls	r3, r3, #8
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	041b      	lsls	r3, r3, #16
 8005d14:	431a      	orrs	r2, r3
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	051b      	lsls	r3, r3, #20
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	3b02      	subs	r3, #2
 8005d26:	061b      	lsls	r3, r3, #24
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	3201      	adds	r2, #1
 8005d34:	4319      	orrs	r1, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
	...

08005d4c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d60:	d11d      	bne.n	8005d9e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d6a:	4b13      	ldr	r3, [pc, #76]	; (8005db8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	6811      	ldr	r1, [r2, #0]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	6852      	ldr	r2, [r2, #4]
 8005d76:	0112      	lsls	r2, r2, #4
 8005d78:	4311      	orrs	r1, r2
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	6892      	ldr	r2, [r2, #8]
 8005d7e:	0212      	lsls	r2, r2, #8
 8005d80:	4311      	orrs	r1, r2
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	6992      	ldr	r2, [r2, #24]
 8005d86:	4311      	orrs	r1, r2
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	68d2      	ldr	r2, [r2, #12]
 8005d8c:	0412      	lsls	r2, r2, #16
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	ea43 0102 	orr.w	r1, r3, r2
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005d9c:	e005      	b.n	8005daa <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	cff00000 	.word	0xcff00000

08005dbc <siprintf>:
 8005dbc:	b40e      	push	{r1, r2, r3}
 8005dbe:	b500      	push	{lr}
 8005dc0:	b09c      	sub	sp, #112	; 0x70
 8005dc2:	ab1d      	add	r3, sp, #116	; 0x74
 8005dc4:	9002      	str	r0, [sp, #8]
 8005dc6:	9006      	str	r0, [sp, #24]
 8005dc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005dcc:	4809      	ldr	r0, [pc, #36]	; (8005df4 <siprintf+0x38>)
 8005dce:	9107      	str	r1, [sp, #28]
 8005dd0:	9104      	str	r1, [sp, #16]
 8005dd2:	4909      	ldr	r1, [pc, #36]	; (8005df8 <siprintf+0x3c>)
 8005dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dd8:	9105      	str	r1, [sp, #20]
 8005dda:	6800      	ldr	r0, [r0, #0]
 8005ddc:	9301      	str	r3, [sp, #4]
 8005dde:	a902      	add	r1, sp, #8
 8005de0:	f000 f992 	bl	8006108 <_svfiprintf_r>
 8005de4:	9b02      	ldr	r3, [sp, #8]
 8005de6:	2200      	movs	r2, #0
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	b01c      	add	sp, #112	; 0x70
 8005dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8005df0:	b003      	add	sp, #12
 8005df2:	4770      	bx	lr
 8005df4:	20000060 	.word	0x20000060
 8005df8:	ffff0208 	.word	0xffff0208

08005dfc <memset>:
 8005dfc:	4402      	add	r2, r0
 8005dfe:	4603      	mov	r3, r0
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d100      	bne.n	8005e06 <memset+0xa>
 8005e04:	4770      	bx	lr
 8005e06:	f803 1b01 	strb.w	r1, [r3], #1
 8005e0a:	e7f9      	b.n	8005e00 <memset+0x4>

08005e0c <__errno>:
 8005e0c:	4b01      	ldr	r3, [pc, #4]	; (8005e14 <__errno+0x8>)
 8005e0e:	6818      	ldr	r0, [r3, #0]
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20000060 	.word	0x20000060

08005e18 <__libc_init_array>:
 8005e18:	b570      	push	{r4, r5, r6, lr}
 8005e1a:	4d0d      	ldr	r5, [pc, #52]	; (8005e50 <__libc_init_array+0x38>)
 8005e1c:	4c0d      	ldr	r4, [pc, #52]	; (8005e54 <__libc_init_array+0x3c>)
 8005e1e:	1b64      	subs	r4, r4, r5
 8005e20:	10a4      	asrs	r4, r4, #2
 8005e22:	2600      	movs	r6, #0
 8005e24:	42a6      	cmp	r6, r4
 8005e26:	d109      	bne.n	8005e3c <__libc_init_array+0x24>
 8005e28:	4d0b      	ldr	r5, [pc, #44]	; (8005e58 <__libc_init_array+0x40>)
 8005e2a:	4c0c      	ldr	r4, [pc, #48]	; (8005e5c <__libc_init_array+0x44>)
 8005e2c:	f000 fc6a 	bl	8006704 <_init>
 8005e30:	1b64      	subs	r4, r4, r5
 8005e32:	10a4      	asrs	r4, r4, #2
 8005e34:	2600      	movs	r6, #0
 8005e36:	42a6      	cmp	r6, r4
 8005e38:	d105      	bne.n	8005e46 <__libc_init_array+0x2e>
 8005e3a:	bd70      	pop	{r4, r5, r6, pc}
 8005e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e40:	4798      	blx	r3
 8005e42:	3601      	adds	r6, #1
 8005e44:	e7ee      	b.n	8005e24 <__libc_init_array+0xc>
 8005e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e4a:	4798      	blx	r3
 8005e4c:	3601      	adds	r6, #1
 8005e4e:	e7f2      	b.n	8005e36 <__libc_init_array+0x1e>
 8005e50:	0800678c 	.word	0x0800678c
 8005e54:	0800678c 	.word	0x0800678c
 8005e58:	0800678c 	.word	0x0800678c
 8005e5c:	08006790 	.word	0x08006790

08005e60 <__retarget_lock_acquire_recursive>:
 8005e60:	4770      	bx	lr

08005e62 <__retarget_lock_release_recursive>:
 8005e62:	4770      	bx	lr

08005e64 <_free_r>:
 8005e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e66:	2900      	cmp	r1, #0
 8005e68:	d044      	beq.n	8005ef4 <_free_r+0x90>
 8005e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e6e:	9001      	str	r0, [sp, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f1a1 0404 	sub.w	r4, r1, #4
 8005e76:	bfb8      	it	lt
 8005e78:	18e4      	addlt	r4, r4, r3
 8005e7a:	f000 f8df 	bl	800603c <__malloc_lock>
 8005e7e:	4a1e      	ldr	r2, [pc, #120]	; (8005ef8 <_free_r+0x94>)
 8005e80:	9801      	ldr	r0, [sp, #4]
 8005e82:	6813      	ldr	r3, [r2, #0]
 8005e84:	b933      	cbnz	r3, 8005e94 <_free_r+0x30>
 8005e86:	6063      	str	r3, [r4, #4]
 8005e88:	6014      	str	r4, [r2, #0]
 8005e8a:	b003      	add	sp, #12
 8005e8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e90:	f000 b8da 	b.w	8006048 <__malloc_unlock>
 8005e94:	42a3      	cmp	r3, r4
 8005e96:	d908      	bls.n	8005eaa <_free_r+0x46>
 8005e98:	6825      	ldr	r5, [r4, #0]
 8005e9a:	1961      	adds	r1, r4, r5
 8005e9c:	428b      	cmp	r3, r1
 8005e9e:	bf01      	itttt	eq
 8005ea0:	6819      	ldreq	r1, [r3, #0]
 8005ea2:	685b      	ldreq	r3, [r3, #4]
 8005ea4:	1949      	addeq	r1, r1, r5
 8005ea6:	6021      	streq	r1, [r4, #0]
 8005ea8:	e7ed      	b.n	8005e86 <_free_r+0x22>
 8005eaa:	461a      	mov	r2, r3
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	b10b      	cbz	r3, 8005eb4 <_free_r+0x50>
 8005eb0:	42a3      	cmp	r3, r4
 8005eb2:	d9fa      	bls.n	8005eaa <_free_r+0x46>
 8005eb4:	6811      	ldr	r1, [r2, #0]
 8005eb6:	1855      	adds	r5, r2, r1
 8005eb8:	42a5      	cmp	r5, r4
 8005eba:	d10b      	bne.n	8005ed4 <_free_r+0x70>
 8005ebc:	6824      	ldr	r4, [r4, #0]
 8005ebe:	4421      	add	r1, r4
 8005ec0:	1854      	adds	r4, r2, r1
 8005ec2:	42a3      	cmp	r3, r4
 8005ec4:	6011      	str	r1, [r2, #0]
 8005ec6:	d1e0      	bne.n	8005e8a <_free_r+0x26>
 8005ec8:	681c      	ldr	r4, [r3, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	6053      	str	r3, [r2, #4]
 8005ece:	440c      	add	r4, r1
 8005ed0:	6014      	str	r4, [r2, #0]
 8005ed2:	e7da      	b.n	8005e8a <_free_r+0x26>
 8005ed4:	d902      	bls.n	8005edc <_free_r+0x78>
 8005ed6:	230c      	movs	r3, #12
 8005ed8:	6003      	str	r3, [r0, #0]
 8005eda:	e7d6      	b.n	8005e8a <_free_r+0x26>
 8005edc:	6825      	ldr	r5, [r4, #0]
 8005ede:	1961      	adds	r1, r4, r5
 8005ee0:	428b      	cmp	r3, r1
 8005ee2:	bf04      	itt	eq
 8005ee4:	6819      	ldreq	r1, [r3, #0]
 8005ee6:	685b      	ldreq	r3, [r3, #4]
 8005ee8:	6063      	str	r3, [r4, #4]
 8005eea:	bf04      	itt	eq
 8005eec:	1949      	addeq	r1, r1, r5
 8005eee:	6021      	streq	r1, [r4, #0]
 8005ef0:	6054      	str	r4, [r2, #4]
 8005ef2:	e7ca      	b.n	8005e8a <_free_r+0x26>
 8005ef4:	b003      	add	sp, #12
 8005ef6:	bd30      	pop	{r4, r5, pc}
 8005ef8:	20000404 	.word	0x20000404

08005efc <sbrk_aligned>:
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	4e0e      	ldr	r6, [pc, #56]	; (8005f38 <sbrk_aligned+0x3c>)
 8005f00:	460c      	mov	r4, r1
 8005f02:	6831      	ldr	r1, [r6, #0]
 8005f04:	4605      	mov	r5, r0
 8005f06:	b911      	cbnz	r1, 8005f0e <sbrk_aligned+0x12>
 8005f08:	f000 fba6 	bl	8006658 <_sbrk_r>
 8005f0c:	6030      	str	r0, [r6, #0]
 8005f0e:	4621      	mov	r1, r4
 8005f10:	4628      	mov	r0, r5
 8005f12:	f000 fba1 	bl	8006658 <_sbrk_r>
 8005f16:	1c43      	adds	r3, r0, #1
 8005f18:	d00a      	beq.n	8005f30 <sbrk_aligned+0x34>
 8005f1a:	1cc4      	adds	r4, r0, #3
 8005f1c:	f024 0403 	bic.w	r4, r4, #3
 8005f20:	42a0      	cmp	r0, r4
 8005f22:	d007      	beq.n	8005f34 <sbrk_aligned+0x38>
 8005f24:	1a21      	subs	r1, r4, r0
 8005f26:	4628      	mov	r0, r5
 8005f28:	f000 fb96 	bl	8006658 <_sbrk_r>
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	d101      	bne.n	8005f34 <sbrk_aligned+0x38>
 8005f30:	f04f 34ff 	mov.w	r4, #4294967295
 8005f34:	4620      	mov	r0, r4
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	20000408 	.word	0x20000408

08005f3c <_malloc_r>:
 8005f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f40:	1ccd      	adds	r5, r1, #3
 8005f42:	f025 0503 	bic.w	r5, r5, #3
 8005f46:	3508      	adds	r5, #8
 8005f48:	2d0c      	cmp	r5, #12
 8005f4a:	bf38      	it	cc
 8005f4c:	250c      	movcc	r5, #12
 8005f4e:	2d00      	cmp	r5, #0
 8005f50:	4607      	mov	r7, r0
 8005f52:	db01      	blt.n	8005f58 <_malloc_r+0x1c>
 8005f54:	42a9      	cmp	r1, r5
 8005f56:	d905      	bls.n	8005f64 <_malloc_r+0x28>
 8005f58:	230c      	movs	r3, #12
 8005f5a:	603b      	str	r3, [r7, #0]
 8005f5c:	2600      	movs	r6, #0
 8005f5e:	4630      	mov	r0, r6
 8005f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006038 <_malloc_r+0xfc>
 8005f68:	f000 f868 	bl	800603c <__malloc_lock>
 8005f6c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f70:	461c      	mov	r4, r3
 8005f72:	bb5c      	cbnz	r4, 8005fcc <_malloc_r+0x90>
 8005f74:	4629      	mov	r1, r5
 8005f76:	4638      	mov	r0, r7
 8005f78:	f7ff ffc0 	bl	8005efc <sbrk_aligned>
 8005f7c:	1c43      	adds	r3, r0, #1
 8005f7e:	4604      	mov	r4, r0
 8005f80:	d155      	bne.n	800602e <_malloc_r+0xf2>
 8005f82:	f8d8 4000 	ldr.w	r4, [r8]
 8005f86:	4626      	mov	r6, r4
 8005f88:	2e00      	cmp	r6, #0
 8005f8a:	d145      	bne.n	8006018 <_malloc_r+0xdc>
 8005f8c:	2c00      	cmp	r4, #0
 8005f8e:	d048      	beq.n	8006022 <_malloc_r+0xe6>
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	4631      	mov	r1, r6
 8005f94:	4638      	mov	r0, r7
 8005f96:	eb04 0903 	add.w	r9, r4, r3
 8005f9a:	f000 fb5d 	bl	8006658 <_sbrk_r>
 8005f9e:	4581      	cmp	r9, r0
 8005fa0:	d13f      	bne.n	8006022 <_malloc_r+0xe6>
 8005fa2:	6821      	ldr	r1, [r4, #0]
 8005fa4:	1a6d      	subs	r5, r5, r1
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	4638      	mov	r0, r7
 8005faa:	f7ff ffa7 	bl	8005efc <sbrk_aligned>
 8005fae:	3001      	adds	r0, #1
 8005fb0:	d037      	beq.n	8006022 <_malloc_r+0xe6>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	442b      	add	r3, r5
 8005fb6:	6023      	str	r3, [r4, #0]
 8005fb8:	f8d8 3000 	ldr.w	r3, [r8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d038      	beq.n	8006032 <_malloc_r+0xf6>
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	42a2      	cmp	r2, r4
 8005fc4:	d12b      	bne.n	800601e <_malloc_r+0xe2>
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	605a      	str	r2, [r3, #4]
 8005fca:	e00f      	b.n	8005fec <_malloc_r+0xb0>
 8005fcc:	6822      	ldr	r2, [r4, #0]
 8005fce:	1b52      	subs	r2, r2, r5
 8005fd0:	d41f      	bmi.n	8006012 <_malloc_r+0xd6>
 8005fd2:	2a0b      	cmp	r2, #11
 8005fd4:	d917      	bls.n	8006006 <_malloc_r+0xca>
 8005fd6:	1961      	adds	r1, r4, r5
 8005fd8:	42a3      	cmp	r3, r4
 8005fda:	6025      	str	r5, [r4, #0]
 8005fdc:	bf18      	it	ne
 8005fde:	6059      	strne	r1, [r3, #4]
 8005fe0:	6863      	ldr	r3, [r4, #4]
 8005fe2:	bf08      	it	eq
 8005fe4:	f8c8 1000 	streq.w	r1, [r8]
 8005fe8:	5162      	str	r2, [r4, r5]
 8005fea:	604b      	str	r3, [r1, #4]
 8005fec:	4638      	mov	r0, r7
 8005fee:	f104 060b 	add.w	r6, r4, #11
 8005ff2:	f000 f829 	bl	8006048 <__malloc_unlock>
 8005ff6:	f026 0607 	bic.w	r6, r6, #7
 8005ffa:	1d23      	adds	r3, r4, #4
 8005ffc:	1af2      	subs	r2, r6, r3
 8005ffe:	d0ae      	beq.n	8005f5e <_malloc_r+0x22>
 8006000:	1b9b      	subs	r3, r3, r6
 8006002:	50a3      	str	r3, [r4, r2]
 8006004:	e7ab      	b.n	8005f5e <_malloc_r+0x22>
 8006006:	42a3      	cmp	r3, r4
 8006008:	6862      	ldr	r2, [r4, #4]
 800600a:	d1dd      	bne.n	8005fc8 <_malloc_r+0x8c>
 800600c:	f8c8 2000 	str.w	r2, [r8]
 8006010:	e7ec      	b.n	8005fec <_malloc_r+0xb0>
 8006012:	4623      	mov	r3, r4
 8006014:	6864      	ldr	r4, [r4, #4]
 8006016:	e7ac      	b.n	8005f72 <_malloc_r+0x36>
 8006018:	4634      	mov	r4, r6
 800601a:	6876      	ldr	r6, [r6, #4]
 800601c:	e7b4      	b.n	8005f88 <_malloc_r+0x4c>
 800601e:	4613      	mov	r3, r2
 8006020:	e7cc      	b.n	8005fbc <_malloc_r+0x80>
 8006022:	230c      	movs	r3, #12
 8006024:	603b      	str	r3, [r7, #0]
 8006026:	4638      	mov	r0, r7
 8006028:	f000 f80e 	bl	8006048 <__malloc_unlock>
 800602c:	e797      	b.n	8005f5e <_malloc_r+0x22>
 800602e:	6025      	str	r5, [r4, #0]
 8006030:	e7dc      	b.n	8005fec <_malloc_r+0xb0>
 8006032:	605b      	str	r3, [r3, #4]
 8006034:	deff      	udf	#255	; 0xff
 8006036:	bf00      	nop
 8006038:	20000404 	.word	0x20000404

0800603c <__malloc_lock>:
 800603c:	4801      	ldr	r0, [pc, #4]	; (8006044 <__malloc_lock+0x8>)
 800603e:	f7ff bf0f 	b.w	8005e60 <__retarget_lock_acquire_recursive>
 8006042:	bf00      	nop
 8006044:	20000400 	.word	0x20000400

08006048 <__malloc_unlock>:
 8006048:	4801      	ldr	r0, [pc, #4]	; (8006050 <__malloc_unlock+0x8>)
 800604a:	f7ff bf0a 	b.w	8005e62 <__retarget_lock_release_recursive>
 800604e:	bf00      	nop
 8006050:	20000400 	.word	0x20000400

08006054 <__ssputs_r>:
 8006054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006058:	688e      	ldr	r6, [r1, #8]
 800605a:	461f      	mov	r7, r3
 800605c:	42be      	cmp	r6, r7
 800605e:	680b      	ldr	r3, [r1, #0]
 8006060:	4682      	mov	sl, r0
 8006062:	460c      	mov	r4, r1
 8006064:	4690      	mov	r8, r2
 8006066:	d82c      	bhi.n	80060c2 <__ssputs_r+0x6e>
 8006068:	898a      	ldrh	r2, [r1, #12]
 800606a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800606e:	d026      	beq.n	80060be <__ssputs_r+0x6a>
 8006070:	6965      	ldr	r5, [r4, #20]
 8006072:	6909      	ldr	r1, [r1, #16]
 8006074:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006078:	eba3 0901 	sub.w	r9, r3, r1
 800607c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006080:	1c7b      	adds	r3, r7, #1
 8006082:	444b      	add	r3, r9
 8006084:	106d      	asrs	r5, r5, #1
 8006086:	429d      	cmp	r5, r3
 8006088:	bf38      	it	cc
 800608a:	461d      	movcc	r5, r3
 800608c:	0553      	lsls	r3, r2, #21
 800608e:	d527      	bpl.n	80060e0 <__ssputs_r+0x8c>
 8006090:	4629      	mov	r1, r5
 8006092:	f7ff ff53 	bl	8005f3c <_malloc_r>
 8006096:	4606      	mov	r6, r0
 8006098:	b360      	cbz	r0, 80060f4 <__ssputs_r+0xa0>
 800609a:	6921      	ldr	r1, [r4, #16]
 800609c:	464a      	mov	r2, r9
 800609e:	f000 faeb 	bl	8006678 <memcpy>
 80060a2:	89a3      	ldrh	r3, [r4, #12]
 80060a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ac:	81a3      	strh	r3, [r4, #12]
 80060ae:	6126      	str	r6, [r4, #16]
 80060b0:	6165      	str	r5, [r4, #20]
 80060b2:	444e      	add	r6, r9
 80060b4:	eba5 0509 	sub.w	r5, r5, r9
 80060b8:	6026      	str	r6, [r4, #0]
 80060ba:	60a5      	str	r5, [r4, #8]
 80060bc:	463e      	mov	r6, r7
 80060be:	42be      	cmp	r6, r7
 80060c0:	d900      	bls.n	80060c4 <__ssputs_r+0x70>
 80060c2:	463e      	mov	r6, r7
 80060c4:	6820      	ldr	r0, [r4, #0]
 80060c6:	4632      	mov	r2, r6
 80060c8:	4641      	mov	r1, r8
 80060ca:	f000 faab 	bl	8006624 <memmove>
 80060ce:	68a3      	ldr	r3, [r4, #8]
 80060d0:	1b9b      	subs	r3, r3, r6
 80060d2:	60a3      	str	r3, [r4, #8]
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	4433      	add	r3, r6
 80060d8:	6023      	str	r3, [r4, #0]
 80060da:	2000      	movs	r0, #0
 80060dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e0:	462a      	mov	r2, r5
 80060e2:	f000 fad7 	bl	8006694 <_realloc_r>
 80060e6:	4606      	mov	r6, r0
 80060e8:	2800      	cmp	r0, #0
 80060ea:	d1e0      	bne.n	80060ae <__ssputs_r+0x5a>
 80060ec:	6921      	ldr	r1, [r4, #16]
 80060ee:	4650      	mov	r0, sl
 80060f0:	f7ff feb8 	bl	8005e64 <_free_r>
 80060f4:	230c      	movs	r3, #12
 80060f6:	f8ca 3000 	str.w	r3, [sl]
 80060fa:	89a3      	ldrh	r3, [r4, #12]
 80060fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006100:	81a3      	strh	r3, [r4, #12]
 8006102:	f04f 30ff 	mov.w	r0, #4294967295
 8006106:	e7e9      	b.n	80060dc <__ssputs_r+0x88>

08006108 <_svfiprintf_r>:
 8006108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610c:	4698      	mov	r8, r3
 800610e:	898b      	ldrh	r3, [r1, #12]
 8006110:	061b      	lsls	r3, r3, #24
 8006112:	b09d      	sub	sp, #116	; 0x74
 8006114:	4607      	mov	r7, r0
 8006116:	460d      	mov	r5, r1
 8006118:	4614      	mov	r4, r2
 800611a:	d50e      	bpl.n	800613a <_svfiprintf_r+0x32>
 800611c:	690b      	ldr	r3, [r1, #16]
 800611e:	b963      	cbnz	r3, 800613a <_svfiprintf_r+0x32>
 8006120:	2140      	movs	r1, #64	; 0x40
 8006122:	f7ff ff0b 	bl	8005f3c <_malloc_r>
 8006126:	6028      	str	r0, [r5, #0]
 8006128:	6128      	str	r0, [r5, #16]
 800612a:	b920      	cbnz	r0, 8006136 <_svfiprintf_r+0x2e>
 800612c:	230c      	movs	r3, #12
 800612e:	603b      	str	r3, [r7, #0]
 8006130:	f04f 30ff 	mov.w	r0, #4294967295
 8006134:	e0d0      	b.n	80062d8 <_svfiprintf_r+0x1d0>
 8006136:	2340      	movs	r3, #64	; 0x40
 8006138:	616b      	str	r3, [r5, #20]
 800613a:	2300      	movs	r3, #0
 800613c:	9309      	str	r3, [sp, #36]	; 0x24
 800613e:	2320      	movs	r3, #32
 8006140:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006144:	f8cd 800c 	str.w	r8, [sp, #12]
 8006148:	2330      	movs	r3, #48	; 0x30
 800614a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80062f0 <_svfiprintf_r+0x1e8>
 800614e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006152:	f04f 0901 	mov.w	r9, #1
 8006156:	4623      	mov	r3, r4
 8006158:	469a      	mov	sl, r3
 800615a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800615e:	b10a      	cbz	r2, 8006164 <_svfiprintf_r+0x5c>
 8006160:	2a25      	cmp	r2, #37	; 0x25
 8006162:	d1f9      	bne.n	8006158 <_svfiprintf_r+0x50>
 8006164:	ebba 0b04 	subs.w	fp, sl, r4
 8006168:	d00b      	beq.n	8006182 <_svfiprintf_r+0x7a>
 800616a:	465b      	mov	r3, fp
 800616c:	4622      	mov	r2, r4
 800616e:	4629      	mov	r1, r5
 8006170:	4638      	mov	r0, r7
 8006172:	f7ff ff6f 	bl	8006054 <__ssputs_r>
 8006176:	3001      	adds	r0, #1
 8006178:	f000 80a9 	beq.w	80062ce <_svfiprintf_r+0x1c6>
 800617c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800617e:	445a      	add	r2, fp
 8006180:	9209      	str	r2, [sp, #36]	; 0x24
 8006182:	f89a 3000 	ldrb.w	r3, [sl]
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 80a1 	beq.w	80062ce <_svfiprintf_r+0x1c6>
 800618c:	2300      	movs	r3, #0
 800618e:	f04f 32ff 	mov.w	r2, #4294967295
 8006192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006196:	f10a 0a01 	add.w	sl, sl, #1
 800619a:	9304      	str	r3, [sp, #16]
 800619c:	9307      	str	r3, [sp, #28]
 800619e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061a2:	931a      	str	r3, [sp, #104]	; 0x68
 80061a4:	4654      	mov	r4, sl
 80061a6:	2205      	movs	r2, #5
 80061a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ac:	4850      	ldr	r0, [pc, #320]	; (80062f0 <_svfiprintf_r+0x1e8>)
 80061ae:	f7fa f80f 	bl	80001d0 <memchr>
 80061b2:	9a04      	ldr	r2, [sp, #16]
 80061b4:	b9d8      	cbnz	r0, 80061ee <_svfiprintf_r+0xe6>
 80061b6:	06d0      	lsls	r0, r2, #27
 80061b8:	bf44      	itt	mi
 80061ba:	2320      	movmi	r3, #32
 80061bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061c0:	0711      	lsls	r1, r2, #28
 80061c2:	bf44      	itt	mi
 80061c4:	232b      	movmi	r3, #43	; 0x2b
 80061c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061ca:	f89a 3000 	ldrb.w	r3, [sl]
 80061ce:	2b2a      	cmp	r3, #42	; 0x2a
 80061d0:	d015      	beq.n	80061fe <_svfiprintf_r+0xf6>
 80061d2:	9a07      	ldr	r2, [sp, #28]
 80061d4:	4654      	mov	r4, sl
 80061d6:	2000      	movs	r0, #0
 80061d8:	f04f 0c0a 	mov.w	ip, #10
 80061dc:	4621      	mov	r1, r4
 80061de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061e2:	3b30      	subs	r3, #48	; 0x30
 80061e4:	2b09      	cmp	r3, #9
 80061e6:	d94d      	bls.n	8006284 <_svfiprintf_r+0x17c>
 80061e8:	b1b0      	cbz	r0, 8006218 <_svfiprintf_r+0x110>
 80061ea:	9207      	str	r2, [sp, #28]
 80061ec:	e014      	b.n	8006218 <_svfiprintf_r+0x110>
 80061ee:	eba0 0308 	sub.w	r3, r0, r8
 80061f2:	fa09 f303 	lsl.w	r3, r9, r3
 80061f6:	4313      	orrs	r3, r2
 80061f8:	9304      	str	r3, [sp, #16]
 80061fa:	46a2      	mov	sl, r4
 80061fc:	e7d2      	b.n	80061a4 <_svfiprintf_r+0x9c>
 80061fe:	9b03      	ldr	r3, [sp, #12]
 8006200:	1d19      	adds	r1, r3, #4
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	9103      	str	r1, [sp, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	bfbb      	ittet	lt
 800620a:	425b      	neglt	r3, r3
 800620c:	f042 0202 	orrlt.w	r2, r2, #2
 8006210:	9307      	strge	r3, [sp, #28]
 8006212:	9307      	strlt	r3, [sp, #28]
 8006214:	bfb8      	it	lt
 8006216:	9204      	strlt	r2, [sp, #16]
 8006218:	7823      	ldrb	r3, [r4, #0]
 800621a:	2b2e      	cmp	r3, #46	; 0x2e
 800621c:	d10c      	bne.n	8006238 <_svfiprintf_r+0x130>
 800621e:	7863      	ldrb	r3, [r4, #1]
 8006220:	2b2a      	cmp	r3, #42	; 0x2a
 8006222:	d134      	bne.n	800628e <_svfiprintf_r+0x186>
 8006224:	9b03      	ldr	r3, [sp, #12]
 8006226:	1d1a      	adds	r2, r3, #4
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	9203      	str	r2, [sp, #12]
 800622c:	2b00      	cmp	r3, #0
 800622e:	bfb8      	it	lt
 8006230:	f04f 33ff 	movlt.w	r3, #4294967295
 8006234:	3402      	adds	r4, #2
 8006236:	9305      	str	r3, [sp, #20]
 8006238:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006300 <_svfiprintf_r+0x1f8>
 800623c:	7821      	ldrb	r1, [r4, #0]
 800623e:	2203      	movs	r2, #3
 8006240:	4650      	mov	r0, sl
 8006242:	f7f9 ffc5 	bl	80001d0 <memchr>
 8006246:	b138      	cbz	r0, 8006258 <_svfiprintf_r+0x150>
 8006248:	9b04      	ldr	r3, [sp, #16]
 800624a:	eba0 000a 	sub.w	r0, r0, sl
 800624e:	2240      	movs	r2, #64	; 0x40
 8006250:	4082      	lsls	r2, r0
 8006252:	4313      	orrs	r3, r2
 8006254:	3401      	adds	r4, #1
 8006256:	9304      	str	r3, [sp, #16]
 8006258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800625c:	4825      	ldr	r0, [pc, #148]	; (80062f4 <_svfiprintf_r+0x1ec>)
 800625e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006262:	2206      	movs	r2, #6
 8006264:	f7f9 ffb4 	bl	80001d0 <memchr>
 8006268:	2800      	cmp	r0, #0
 800626a:	d038      	beq.n	80062de <_svfiprintf_r+0x1d6>
 800626c:	4b22      	ldr	r3, [pc, #136]	; (80062f8 <_svfiprintf_r+0x1f0>)
 800626e:	bb1b      	cbnz	r3, 80062b8 <_svfiprintf_r+0x1b0>
 8006270:	9b03      	ldr	r3, [sp, #12]
 8006272:	3307      	adds	r3, #7
 8006274:	f023 0307 	bic.w	r3, r3, #7
 8006278:	3308      	adds	r3, #8
 800627a:	9303      	str	r3, [sp, #12]
 800627c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800627e:	4433      	add	r3, r6
 8006280:	9309      	str	r3, [sp, #36]	; 0x24
 8006282:	e768      	b.n	8006156 <_svfiprintf_r+0x4e>
 8006284:	fb0c 3202 	mla	r2, ip, r2, r3
 8006288:	460c      	mov	r4, r1
 800628a:	2001      	movs	r0, #1
 800628c:	e7a6      	b.n	80061dc <_svfiprintf_r+0xd4>
 800628e:	2300      	movs	r3, #0
 8006290:	3401      	adds	r4, #1
 8006292:	9305      	str	r3, [sp, #20]
 8006294:	4619      	mov	r1, r3
 8006296:	f04f 0c0a 	mov.w	ip, #10
 800629a:	4620      	mov	r0, r4
 800629c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062a0:	3a30      	subs	r2, #48	; 0x30
 80062a2:	2a09      	cmp	r2, #9
 80062a4:	d903      	bls.n	80062ae <_svfiprintf_r+0x1a6>
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0c6      	beq.n	8006238 <_svfiprintf_r+0x130>
 80062aa:	9105      	str	r1, [sp, #20]
 80062ac:	e7c4      	b.n	8006238 <_svfiprintf_r+0x130>
 80062ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80062b2:	4604      	mov	r4, r0
 80062b4:	2301      	movs	r3, #1
 80062b6:	e7f0      	b.n	800629a <_svfiprintf_r+0x192>
 80062b8:	ab03      	add	r3, sp, #12
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	462a      	mov	r2, r5
 80062be:	4b0f      	ldr	r3, [pc, #60]	; (80062fc <_svfiprintf_r+0x1f4>)
 80062c0:	a904      	add	r1, sp, #16
 80062c2:	4638      	mov	r0, r7
 80062c4:	f3af 8000 	nop.w
 80062c8:	1c42      	adds	r2, r0, #1
 80062ca:	4606      	mov	r6, r0
 80062cc:	d1d6      	bne.n	800627c <_svfiprintf_r+0x174>
 80062ce:	89ab      	ldrh	r3, [r5, #12]
 80062d0:	065b      	lsls	r3, r3, #25
 80062d2:	f53f af2d 	bmi.w	8006130 <_svfiprintf_r+0x28>
 80062d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062d8:	b01d      	add	sp, #116	; 0x74
 80062da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062de:	ab03      	add	r3, sp, #12
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	462a      	mov	r2, r5
 80062e4:	4b05      	ldr	r3, [pc, #20]	; (80062fc <_svfiprintf_r+0x1f4>)
 80062e6:	a904      	add	r1, sp, #16
 80062e8:	4638      	mov	r0, r7
 80062ea:	f000 f879 	bl	80063e0 <_printf_i>
 80062ee:	e7eb      	b.n	80062c8 <_svfiprintf_r+0x1c0>
 80062f0:	08006750 	.word	0x08006750
 80062f4:	0800675a 	.word	0x0800675a
 80062f8:	00000000 	.word	0x00000000
 80062fc:	08006055 	.word	0x08006055
 8006300:	08006756 	.word	0x08006756

08006304 <_printf_common>:
 8006304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006308:	4616      	mov	r6, r2
 800630a:	4699      	mov	r9, r3
 800630c:	688a      	ldr	r2, [r1, #8]
 800630e:	690b      	ldr	r3, [r1, #16]
 8006310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006314:	4293      	cmp	r3, r2
 8006316:	bfb8      	it	lt
 8006318:	4613      	movlt	r3, r2
 800631a:	6033      	str	r3, [r6, #0]
 800631c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006320:	4607      	mov	r7, r0
 8006322:	460c      	mov	r4, r1
 8006324:	b10a      	cbz	r2, 800632a <_printf_common+0x26>
 8006326:	3301      	adds	r3, #1
 8006328:	6033      	str	r3, [r6, #0]
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	0699      	lsls	r1, r3, #26
 800632e:	bf42      	ittt	mi
 8006330:	6833      	ldrmi	r3, [r6, #0]
 8006332:	3302      	addmi	r3, #2
 8006334:	6033      	strmi	r3, [r6, #0]
 8006336:	6825      	ldr	r5, [r4, #0]
 8006338:	f015 0506 	ands.w	r5, r5, #6
 800633c:	d106      	bne.n	800634c <_printf_common+0x48>
 800633e:	f104 0a19 	add.w	sl, r4, #25
 8006342:	68e3      	ldr	r3, [r4, #12]
 8006344:	6832      	ldr	r2, [r6, #0]
 8006346:	1a9b      	subs	r3, r3, r2
 8006348:	42ab      	cmp	r3, r5
 800634a:	dc26      	bgt.n	800639a <_printf_common+0x96>
 800634c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006350:	1e13      	subs	r3, r2, #0
 8006352:	6822      	ldr	r2, [r4, #0]
 8006354:	bf18      	it	ne
 8006356:	2301      	movne	r3, #1
 8006358:	0692      	lsls	r2, r2, #26
 800635a:	d42b      	bmi.n	80063b4 <_printf_common+0xb0>
 800635c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006360:	4649      	mov	r1, r9
 8006362:	4638      	mov	r0, r7
 8006364:	47c0      	blx	r8
 8006366:	3001      	adds	r0, #1
 8006368:	d01e      	beq.n	80063a8 <_printf_common+0xa4>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	6922      	ldr	r2, [r4, #16]
 800636e:	f003 0306 	and.w	r3, r3, #6
 8006372:	2b04      	cmp	r3, #4
 8006374:	bf02      	ittt	eq
 8006376:	68e5      	ldreq	r5, [r4, #12]
 8006378:	6833      	ldreq	r3, [r6, #0]
 800637a:	1aed      	subeq	r5, r5, r3
 800637c:	68a3      	ldr	r3, [r4, #8]
 800637e:	bf0c      	ite	eq
 8006380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006384:	2500      	movne	r5, #0
 8006386:	4293      	cmp	r3, r2
 8006388:	bfc4      	itt	gt
 800638a:	1a9b      	subgt	r3, r3, r2
 800638c:	18ed      	addgt	r5, r5, r3
 800638e:	2600      	movs	r6, #0
 8006390:	341a      	adds	r4, #26
 8006392:	42b5      	cmp	r5, r6
 8006394:	d11a      	bne.n	80063cc <_printf_common+0xc8>
 8006396:	2000      	movs	r0, #0
 8006398:	e008      	b.n	80063ac <_printf_common+0xa8>
 800639a:	2301      	movs	r3, #1
 800639c:	4652      	mov	r2, sl
 800639e:	4649      	mov	r1, r9
 80063a0:	4638      	mov	r0, r7
 80063a2:	47c0      	blx	r8
 80063a4:	3001      	adds	r0, #1
 80063a6:	d103      	bne.n	80063b0 <_printf_common+0xac>
 80063a8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b0:	3501      	adds	r5, #1
 80063b2:	e7c6      	b.n	8006342 <_printf_common+0x3e>
 80063b4:	18e1      	adds	r1, r4, r3
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	2030      	movs	r0, #48	; 0x30
 80063ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063be:	4422      	add	r2, r4
 80063c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063c8:	3302      	adds	r3, #2
 80063ca:	e7c7      	b.n	800635c <_printf_common+0x58>
 80063cc:	2301      	movs	r3, #1
 80063ce:	4622      	mov	r2, r4
 80063d0:	4649      	mov	r1, r9
 80063d2:	4638      	mov	r0, r7
 80063d4:	47c0      	blx	r8
 80063d6:	3001      	adds	r0, #1
 80063d8:	d0e6      	beq.n	80063a8 <_printf_common+0xa4>
 80063da:	3601      	adds	r6, #1
 80063dc:	e7d9      	b.n	8006392 <_printf_common+0x8e>
	...

080063e0 <_printf_i>:
 80063e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063e4:	7e0f      	ldrb	r7, [r1, #24]
 80063e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063e8:	2f78      	cmp	r7, #120	; 0x78
 80063ea:	4691      	mov	r9, r2
 80063ec:	4680      	mov	r8, r0
 80063ee:	460c      	mov	r4, r1
 80063f0:	469a      	mov	sl, r3
 80063f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063f6:	d807      	bhi.n	8006408 <_printf_i+0x28>
 80063f8:	2f62      	cmp	r7, #98	; 0x62
 80063fa:	d80a      	bhi.n	8006412 <_printf_i+0x32>
 80063fc:	2f00      	cmp	r7, #0
 80063fe:	f000 80d4 	beq.w	80065aa <_printf_i+0x1ca>
 8006402:	2f58      	cmp	r7, #88	; 0x58
 8006404:	f000 80c0 	beq.w	8006588 <_printf_i+0x1a8>
 8006408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800640c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006410:	e03a      	b.n	8006488 <_printf_i+0xa8>
 8006412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006416:	2b15      	cmp	r3, #21
 8006418:	d8f6      	bhi.n	8006408 <_printf_i+0x28>
 800641a:	a101      	add	r1, pc, #4	; (adr r1, 8006420 <_printf_i+0x40>)
 800641c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006420:	08006479 	.word	0x08006479
 8006424:	0800648d 	.word	0x0800648d
 8006428:	08006409 	.word	0x08006409
 800642c:	08006409 	.word	0x08006409
 8006430:	08006409 	.word	0x08006409
 8006434:	08006409 	.word	0x08006409
 8006438:	0800648d 	.word	0x0800648d
 800643c:	08006409 	.word	0x08006409
 8006440:	08006409 	.word	0x08006409
 8006444:	08006409 	.word	0x08006409
 8006448:	08006409 	.word	0x08006409
 800644c:	08006591 	.word	0x08006591
 8006450:	080064b9 	.word	0x080064b9
 8006454:	0800654b 	.word	0x0800654b
 8006458:	08006409 	.word	0x08006409
 800645c:	08006409 	.word	0x08006409
 8006460:	080065b3 	.word	0x080065b3
 8006464:	08006409 	.word	0x08006409
 8006468:	080064b9 	.word	0x080064b9
 800646c:	08006409 	.word	0x08006409
 8006470:	08006409 	.word	0x08006409
 8006474:	08006553 	.word	0x08006553
 8006478:	682b      	ldr	r3, [r5, #0]
 800647a:	1d1a      	adds	r2, r3, #4
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	602a      	str	r2, [r5, #0]
 8006480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006488:	2301      	movs	r3, #1
 800648a:	e09f      	b.n	80065cc <_printf_i+0x1ec>
 800648c:	6820      	ldr	r0, [r4, #0]
 800648e:	682b      	ldr	r3, [r5, #0]
 8006490:	0607      	lsls	r7, r0, #24
 8006492:	f103 0104 	add.w	r1, r3, #4
 8006496:	6029      	str	r1, [r5, #0]
 8006498:	d501      	bpl.n	800649e <_printf_i+0xbe>
 800649a:	681e      	ldr	r6, [r3, #0]
 800649c:	e003      	b.n	80064a6 <_printf_i+0xc6>
 800649e:	0646      	lsls	r6, r0, #25
 80064a0:	d5fb      	bpl.n	800649a <_printf_i+0xba>
 80064a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80064a6:	2e00      	cmp	r6, #0
 80064a8:	da03      	bge.n	80064b2 <_printf_i+0xd2>
 80064aa:	232d      	movs	r3, #45	; 0x2d
 80064ac:	4276      	negs	r6, r6
 80064ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064b2:	485a      	ldr	r0, [pc, #360]	; (800661c <_printf_i+0x23c>)
 80064b4:	230a      	movs	r3, #10
 80064b6:	e012      	b.n	80064de <_printf_i+0xfe>
 80064b8:	682b      	ldr	r3, [r5, #0]
 80064ba:	6820      	ldr	r0, [r4, #0]
 80064bc:	1d19      	adds	r1, r3, #4
 80064be:	6029      	str	r1, [r5, #0]
 80064c0:	0605      	lsls	r5, r0, #24
 80064c2:	d501      	bpl.n	80064c8 <_printf_i+0xe8>
 80064c4:	681e      	ldr	r6, [r3, #0]
 80064c6:	e002      	b.n	80064ce <_printf_i+0xee>
 80064c8:	0641      	lsls	r1, r0, #25
 80064ca:	d5fb      	bpl.n	80064c4 <_printf_i+0xe4>
 80064cc:	881e      	ldrh	r6, [r3, #0]
 80064ce:	4853      	ldr	r0, [pc, #332]	; (800661c <_printf_i+0x23c>)
 80064d0:	2f6f      	cmp	r7, #111	; 0x6f
 80064d2:	bf0c      	ite	eq
 80064d4:	2308      	moveq	r3, #8
 80064d6:	230a      	movne	r3, #10
 80064d8:	2100      	movs	r1, #0
 80064da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064de:	6865      	ldr	r5, [r4, #4]
 80064e0:	60a5      	str	r5, [r4, #8]
 80064e2:	2d00      	cmp	r5, #0
 80064e4:	bfa2      	ittt	ge
 80064e6:	6821      	ldrge	r1, [r4, #0]
 80064e8:	f021 0104 	bicge.w	r1, r1, #4
 80064ec:	6021      	strge	r1, [r4, #0]
 80064ee:	b90e      	cbnz	r6, 80064f4 <_printf_i+0x114>
 80064f0:	2d00      	cmp	r5, #0
 80064f2:	d04b      	beq.n	800658c <_printf_i+0x1ac>
 80064f4:	4615      	mov	r5, r2
 80064f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80064fa:	fb03 6711 	mls	r7, r3, r1, r6
 80064fe:	5dc7      	ldrb	r7, [r0, r7]
 8006500:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006504:	4637      	mov	r7, r6
 8006506:	42bb      	cmp	r3, r7
 8006508:	460e      	mov	r6, r1
 800650a:	d9f4      	bls.n	80064f6 <_printf_i+0x116>
 800650c:	2b08      	cmp	r3, #8
 800650e:	d10b      	bne.n	8006528 <_printf_i+0x148>
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	07de      	lsls	r6, r3, #31
 8006514:	d508      	bpl.n	8006528 <_printf_i+0x148>
 8006516:	6923      	ldr	r3, [r4, #16]
 8006518:	6861      	ldr	r1, [r4, #4]
 800651a:	4299      	cmp	r1, r3
 800651c:	bfde      	ittt	le
 800651e:	2330      	movle	r3, #48	; 0x30
 8006520:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006524:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006528:	1b52      	subs	r2, r2, r5
 800652a:	6122      	str	r2, [r4, #16]
 800652c:	f8cd a000 	str.w	sl, [sp]
 8006530:	464b      	mov	r3, r9
 8006532:	aa03      	add	r2, sp, #12
 8006534:	4621      	mov	r1, r4
 8006536:	4640      	mov	r0, r8
 8006538:	f7ff fee4 	bl	8006304 <_printf_common>
 800653c:	3001      	adds	r0, #1
 800653e:	d14a      	bne.n	80065d6 <_printf_i+0x1f6>
 8006540:	f04f 30ff 	mov.w	r0, #4294967295
 8006544:	b004      	add	sp, #16
 8006546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	f043 0320 	orr.w	r3, r3, #32
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	4833      	ldr	r0, [pc, #204]	; (8006620 <_printf_i+0x240>)
 8006554:	2778      	movs	r7, #120	; 0x78
 8006556:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	6829      	ldr	r1, [r5, #0]
 800655e:	061f      	lsls	r7, r3, #24
 8006560:	f851 6b04 	ldr.w	r6, [r1], #4
 8006564:	d402      	bmi.n	800656c <_printf_i+0x18c>
 8006566:	065f      	lsls	r7, r3, #25
 8006568:	bf48      	it	mi
 800656a:	b2b6      	uxthmi	r6, r6
 800656c:	07df      	lsls	r7, r3, #31
 800656e:	bf48      	it	mi
 8006570:	f043 0320 	orrmi.w	r3, r3, #32
 8006574:	6029      	str	r1, [r5, #0]
 8006576:	bf48      	it	mi
 8006578:	6023      	strmi	r3, [r4, #0]
 800657a:	b91e      	cbnz	r6, 8006584 <_printf_i+0x1a4>
 800657c:	6823      	ldr	r3, [r4, #0]
 800657e:	f023 0320 	bic.w	r3, r3, #32
 8006582:	6023      	str	r3, [r4, #0]
 8006584:	2310      	movs	r3, #16
 8006586:	e7a7      	b.n	80064d8 <_printf_i+0xf8>
 8006588:	4824      	ldr	r0, [pc, #144]	; (800661c <_printf_i+0x23c>)
 800658a:	e7e4      	b.n	8006556 <_printf_i+0x176>
 800658c:	4615      	mov	r5, r2
 800658e:	e7bd      	b.n	800650c <_printf_i+0x12c>
 8006590:	682b      	ldr	r3, [r5, #0]
 8006592:	6826      	ldr	r6, [r4, #0]
 8006594:	6961      	ldr	r1, [r4, #20]
 8006596:	1d18      	adds	r0, r3, #4
 8006598:	6028      	str	r0, [r5, #0]
 800659a:	0635      	lsls	r5, r6, #24
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	d501      	bpl.n	80065a4 <_printf_i+0x1c4>
 80065a0:	6019      	str	r1, [r3, #0]
 80065a2:	e002      	b.n	80065aa <_printf_i+0x1ca>
 80065a4:	0670      	lsls	r0, r6, #25
 80065a6:	d5fb      	bpl.n	80065a0 <_printf_i+0x1c0>
 80065a8:	8019      	strh	r1, [r3, #0]
 80065aa:	2300      	movs	r3, #0
 80065ac:	6123      	str	r3, [r4, #16]
 80065ae:	4615      	mov	r5, r2
 80065b0:	e7bc      	b.n	800652c <_printf_i+0x14c>
 80065b2:	682b      	ldr	r3, [r5, #0]
 80065b4:	1d1a      	adds	r2, r3, #4
 80065b6:	602a      	str	r2, [r5, #0]
 80065b8:	681d      	ldr	r5, [r3, #0]
 80065ba:	6862      	ldr	r2, [r4, #4]
 80065bc:	2100      	movs	r1, #0
 80065be:	4628      	mov	r0, r5
 80065c0:	f7f9 fe06 	bl	80001d0 <memchr>
 80065c4:	b108      	cbz	r0, 80065ca <_printf_i+0x1ea>
 80065c6:	1b40      	subs	r0, r0, r5
 80065c8:	6060      	str	r0, [r4, #4]
 80065ca:	6863      	ldr	r3, [r4, #4]
 80065cc:	6123      	str	r3, [r4, #16]
 80065ce:	2300      	movs	r3, #0
 80065d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065d4:	e7aa      	b.n	800652c <_printf_i+0x14c>
 80065d6:	6923      	ldr	r3, [r4, #16]
 80065d8:	462a      	mov	r2, r5
 80065da:	4649      	mov	r1, r9
 80065dc:	4640      	mov	r0, r8
 80065de:	47d0      	blx	sl
 80065e0:	3001      	adds	r0, #1
 80065e2:	d0ad      	beq.n	8006540 <_printf_i+0x160>
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	079b      	lsls	r3, r3, #30
 80065e8:	d413      	bmi.n	8006612 <_printf_i+0x232>
 80065ea:	68e0      	ldr	r0, [r4, #12]
 80065ec:	9b03      	ldr	r3, [sp, #12]
 80065ee:	4298      	cmp	r0, r3
 80065f0:	bfb8      	it	lt
 80065f2:	4618      	movlt	r0, r3
 80065f4:	e7a6      	b.n	8006544 <_printf_i+0x164>
 80065f6:	2301      	movs	r3, #1
 80065f8:	4632      	mov	r2, r6
 80065fa:	4649      	mov	r1, r9
 80065fc:	4640      	mov	r0, r8
 80065fe:	47d0      	blx	sl
 8006600:	3001      	adds	r0, #1
 8006602:	d09d      	beq.n	8006540 <_printf_i+0x160>
 8006604:	3501      	adds	r5, #1
 8006606:	68e3      	ldr	r3, [r4, #12]
 8006608:	9903      	ldr	r1, [sp, #12]
 800660a:	1a5b      	subs	r3, r3, r1
 800660c:	42ab      	cmp	r3, r5
 800660e:	dcf2      	bgt.n	80065f6 <_printf_i+0x216>
 8006610:	e7eb      	b.n	80065ea <_printf_i+0x20a>
 8006612:	2500      	movs	r5, #0
 8006614:	f104 0619 	add.w	r6, r4, #25
 8006618:	e7f5      	b.n	8006606 <_printf_i+0x226>
 800661a:	bf00      	nop
 800661c:	08006761 	.word	0x08006761
 8006620:	08006772 	.word	0x08006772

08006624 <memmove>:
 8006624:	4288      	cmp	r0, r1
 8006626:	b510      	push	{r4, lr}
 8006628:	eb01 0402 	add.w	r4, r1, r2
 800662c:	d902      	bls.n	8006634 <memmove+0x10>
 800662e:	4284      	cmp	r4, r0
 8006630:	4623      	mov	r3, r4
 8006632:	d807      	bhi.n	8006644 <memmove+0x20>
 8006634:	1e43      	subs	r3, r0, #1
 8006636:	42a1      	cmp	r1, r4
 8006638:	d008      	beq.n	800664c <memmove+0x28>
 800663a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800663e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006642:	e7f8      	b.n	8006636 <memmove+0x12>
 8006644:	4402      	add	r2, r0
 8006646:	4601      	mov	r1, r0
 8006648:	428a      	cmp	r2, r1
 800664a:	d100      	bne.n	800664e <memmove+0x2a>
 800664c:	bd10      	pop	{r4, pc}
 800664e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006652:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006656:	e7f7      	b.n	8006648 <memmove+0x24>

08006658 <_sbrk_r>:
 8006658:	b538      	push	{r3, r4, r5, lr}
 800665a:	4d06      	ldr	r5, [pc, #24]	; (8006674 <_sbrk_r+0x1c>)
 800665c:	2300      	movs	r3, #0
 800665e:	4604      	mov	r4, r0
 8006660:	4608      	mov	r0, r1
 8006662:	602b      	str	r3, [r5, #0]
 8006664:	f7fa ff44 	bl	80014f0 <_sbrk>
 8006668:	1c43      	adds	r3, r0, #1
 800666a:	d102      	bne.n	8006672 <_sbrk_r+0x1a>
 800666c:	682b      	ldr	r3, [r5, #0]
 800666e:	b103      	cbz	r3, 8006672 <_sbrk_r+0x1a>
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	bd38      	pop	{r3, r4, r5, pc}
 8006674:	200003fc 	.word	0x200003fc

08006678 <memcpy>:
 8006678:	440a      	add	r2, r1
 800667a:	4291      	cmp	r1, r2
 800667c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006680:	d100      	bne.n	8006684 <memcpy+0xc>
 8006682:	4770      	bx	lr
 8006684:	b510      	push	{r4, lr}
 8006686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800668a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800668e:	4291      	cmp	r1, r2
 8006690:	d1f9      	bne.n	8006686 <memcpy+0xe>
 8006692:	bd10      	pop	{r4, pc}

08006694 <_realloc_r>:
 8006694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006698:	4680      	mov	r8, r0
 800669a:	4614      	mov	r4, r2
 800669c:	460e      	mov	r6, r1
 800669e:	b921      	cbnz	r1, 80066aa <_realloc_r+0x16>
 80066a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066a4:	4611      	mov	r1, r2
 80066a6:	f7ff bc49 	b.w	8005f3c <_malloc_r>
 80066aa:	b92a      	cbnz	r2, 80066b8 <_realloc_r+0x24>
 80066ac:	f7ff fbda 	bl	8005e64 <_free_r>
 80066b0:	4625      	mov	r5, r4
 80066b2:	4628      	mov	r0, r5
 80066b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066b8:	f000 f81b 	bl	80066f2 <_malloc_usable_size_r>
 80066bc:	4284      	cmp	r4, r0
 80066be:	4607      	mov	r7, r0
 80066c0:	d802      	bhi.n	80066c8 <_realloc_r+0x34>
 80066c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80066c6:	d812      	bhi.n	80066ee <_realloc_r+0x5a>
 80066c8:	4621      	mov	r1, r4
 80066ca:	4640      	mov	r0, r8
 80066cc:	f7ff fc36 	bl	8005f3c <_malloc_r>
 80066d0:	4605      	mov	r5, r0
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d0ed      	beq.n	80066b2 <_realloc_r+0x1e>
 80066d6:	42bc      	cmp	r4, r7
 80066d8:	4622      	mov	r2, r4
 80066da:	4631      	mov	r1, r6
 80066dc:	bf28      	it	cs
 80066de:	463a      	movcs	r2, r7
 80066e0:	f7ff ffca 	bl	8006678 <memcpy>
 80066e4:	4631      	mov	r1, r6
 80066e6:	4640      	mov	r0, r8
 80066e8:	f7ff fbbc 	bl	8005e64 <_free_r>
 80066ec:	e7e1      	b.n	80066b2 <_realloc_r+0x1e>
 80066ee:	4635      	mov	r5, r6
 80066f0:	e7df      	b.n	80066b2 <_realloc_r+0x1e>

080066f2 <_malloc_usable_size_r>:
 80066f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066f6:	1f18      	subs	r0, r3, #4
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	bfbc      	itt	lt
 80066fc:	580b      	ldrlt	r3, [r1, r0]
 80066fe:	18c0      	addlt	r0, r0, r3
 8006700:	4770      	bx	lr
	...

08006704 <_init>:
 8006704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006706:	bf00      	nop
 8006708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670a:	bc08      	pop	{r3}
 800670c:	469e      	mov	lr, r3
 800670e:	4770      	bx	lr

08006710 <_fini>:
 8006710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006712:	bf00      	nop
 8006714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006716:	bc08      	pop	{r3}
 8006718:	469e      	mov	lr, r3
 800671a:	4770      	bx	lr
