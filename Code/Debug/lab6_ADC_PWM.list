
lab6_ADC_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a578  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030e0  0800a708  0800a708  0001a708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7e8  0800d7e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7e8  0800d7e8  0001d7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7f0  0800d7f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7f0  0800d7f0  0001d7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7f4  0800d7f4  0001d7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800d7f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000004e4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000554  20000554  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a733  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000478e  00000000  00000000  0003a816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017a0  00000000  00000000  0003efa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000124f  00000000  00000000  00040748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026f23  00000000  00000000  00041997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00024560  00000000  00000000  000688ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e0149  00000000  00000000  0008ce1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000662c  00000000  00000000  0016cf64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00173590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a6f0 	.word	0x0800a6f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800a6f0 	.word	0x0800a6f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b970 	b.w	8000de4 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	460d      	mov	r5, r1
 8000b24:	4604      	mov	r4, r0
 8000b26:	460f      	mov	r7, r1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d14a      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4694      	mov	ip, r2
 8000b30:	d965      	bls.n	8000bfe <__udivmoddi4+0xe2>
 8000b32:	fab2 f382 	clz	r3, r2
 8000b36:	b143      	cbz	r3, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b3c:	f1c3 0220 	rsb	r2, r3, #32
 8000b40:	409f      	lsls	r7, r3
 8000b42:	fa20 f202 	lsr.w	r2, r0, r2
 8000b46:	4317      	orrs	r7, r2
 8000b48:	409c      	lsls	r4, r3
 8000b4a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b4e:	fa1f f58c 	uxth.w	r5, ip
 8000b52:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b56:	0c22      	lsrs	r2, r4, #16
 8000b58:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b5c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b60:	fb01 f005 	mul.w	r0, r1, r5
 8000b64:	4290      	cmp	r0, r2
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x62>
 8000b68:	eb1c 0202 	adds.w	r2, ip, r2
 8000b6c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b70:	f080 811c 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b74:	4290      	cmp	r0, r2
 8000b76:	f240 8119 	bls.w	8000dac <__udivmoddi4+0x290>
 8000b7a:	3902      	subs	r1, #2
 8000b7c:	4462      	add	r2, ip
 8000b7e:	1a12      	subs	r2, r2, r0
 8000b80:	b2a4      	uxth	r4, r4
 8000b82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b8a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b8e:	fb00 f505 	mul.w	r5, r0, r5
 8000b92:	42a5      	cmp	r5, r4
 8000b94:	d90a      	bls.n	8000bac <__udivmoddi4+0x90>
 8000b96:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b9e:	f080 8107 	bcs.w	8000db0 <__udivmoddi4+0x294>
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	f240 8104 	bls.w	8000db0 <__udivmoddi4+0x294>
 8000ba8:	4464      	add	r4, ip
 8000baa:	3802      	subs	r0, #2
 8000bac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bb0:	1b64      	subs	r4, r4, r5
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	b11e      	cbz	r6, 8000bbe <__udivmoddi4+0xa2>
 8000bb6:	40dc      	lsrs	r4, r3
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0xbc>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80ed 	beq.w	8000da6 <__udivmoddi4+0x28a>
 8000bcc:	2100      	movs	r1, #0
 8000bce:	e9c6 0500 	strd	r0, r5, [r6]
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd8:	fab3 f183 	clz	r1, r3
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	d149      	bne.n	8000c74 <__udivmoddi4+0x158>
 8000be0:	42ab      	cmp	r3, r5
 8000be2:	d302      	bcc.n	8000bea <__udivmoddi4+0xce>
 8000be4:	4282      	cmp	r2, r0
 8000be6:	f200 80f8 	bhi.w	8000dda <__udivmoddi4+0x2be>
 8000bea:	1a84      	subs	r4, r0, r2
 8000bec:	eb65 0203 	sbc.w	r2, r5, r3
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	2e00      	cmp	r6, #0
 8000bf6:	d0e2      	beq.n	8000bbe <__udivmoddi4+0xa2>
 8000bf8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bfc:	e7df      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000bfe:	b902      	cbnz	r2, 8000c02 <__udivmoddi4+0xe6>
 8000c00:	deff      	udf	#255	; 0xff
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f040 8090 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0c:	1a8a      	subs	r2, r1, r2
 8000c0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c12:	fa1f fe8c 	uxth.w	lr, ip
 8000c16:	2101      	movs	r1, #1
 8000c18:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c1c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c20:	0c22      	lsrs	r2, r4, #16
 8000c22:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c26:	fb0e f005 	mul.w	r0, lr, r5
 8000c2a:	4290      	cmp	r0, r2
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c32:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4290      	cmp	r0, r2
 8000c3a:	f200 80cb 	bhi.w	8000dd4 <__udivmoddi4+0x2b8>
 8000c3e:	4645      	mov	r5, r8
 8000c40:	1a12      	subs	r2, r2, r0
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c48:	fb07 2210 	mls	r2, r7, r0, r2
 8000c4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c50:	fb0e fe00 	mul.w	lr, lr, r0
 8000c54:	45a6      	cmp	lr, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x14e>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c60:	d202      	bcs.n	8000c68 <__udivmoddi4+0x14c>
 8000c62:	45a6      	cmp	lr, r4
 8000c64:	f200 80bb 	bhi.w	8000dde <__udivmoddi4+0x2c2>
 8000c68:	4610      	mov	r0, r2
 8000c6a:	eba4 040e 	sub.w	r4, r4, lr
 8000c6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c72:	e79f      	b.n	8000bb4 <__udivmoddi4+0x98>
 8000c74:	f1c1 0720 	rsb	r7, r1, #32
 8000c78:	408b      	lsls	r3, r1
 8000c7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c82:	fa05 f401 	lsl.w	r4, r5, r1
 8000c86:	fa20 f307 	lsr.w	r3, r0, r7
 8000c8a:	40fd      	lsrs	r5, r7
 8000c8c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c90:	4323      	orrs	r3, r4
 8000c92:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c96:	fa1f fe8c 	uxth.w	lr, ip
 8000c9a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c9e:	0c1c      	lsrs	r4, r3, #16
 8000ca0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ca8:	42a5      	cmp	r5, r4
 8000caa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cae:	fa00 f001 	lsl.w	r0, r0, r1
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cbc:	f080 8088 	bcs.w	8000dd0 <__udivmoddi4+0x2b4>
 8000cc0:	42a5      	cmp	r5, r4
 8000cc2:	f240 8085 	bls.w	8000dd0 <__udivmoddi4+0x2b4>
 8000cc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cca:	4464      	add	r4, ip
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	b29d      	uxth	r5, r3
 8000cd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cd8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cdc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cec:	d26c      	bcs.n	8000dc8 <__udivmoddi4+0x2ac>
 8000cee:	45a6      	cmp	lr, r4
 8000cf0:	d96a      	bls.n	8000dc8 <__udivmoddi4+0x2ac>
 8000cf2:	3b02      	subs	r3, #2
 8000cf4:	4464      	add	r4, ip
 8000cf6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfa:	fba3 9502 	umull	r9, r5, r3, r2
 8000cfe:	eba4 040e 	sub.w	r4, r4, lr
 8000d02:	42ac      	cmp	r4, r5
 8000d04:	46c8      	mov	r8, r9
 8000d06:	46ae      	mov	lr, r5
 8000d08:	d356      	bcc.n	8000db8 <__udivmoddi4+0x29c>
 8000d0a:	d053      	beq.n	8000db4 <__udivmoddi4+0x298>
 8000d0c:	b156      	cbz	r6, 8000d24 <__udivmoddi4+0x208>
 8000d0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d12:	eb64 040e 	sbc.w	r4, r4, lr
 8000d16:	fa04 f707 	lsl.w	r7, r4, r7
 8000d1a:	40ca      	lsrs	r2, r1
 8000d1c:	40cc      	lsrs	r4, r1
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	e9c6 7400 	strd	r7, r4, [r6]
 8000d24:	4618      	mov	r0, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2c:	f1c3 0120 	rsb	r1, r3, #32
 8000d30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d34:	fa20 f201 	lsr.w	r2, r0, r1
 8000d38:	fa25 f101 	lsr.w	r1, r5, r1
 8000d3c:	409d      	lsls	r5, r3
 8000d3e:	432a      	orrs	r2, r5
 8000d40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d44:	fa1f fe8c 	uxth.w	lr, ip
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d50:	0c11      	lsrs	r1, r2, #16
 8000d52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d56:	fb00 f50e 	mul.w	r5, r0, lr
 8000d5a:	428d      	cmp	r5, r1
 8000d5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x258>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d6a:	d22f      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d6c:	428d      	cmp	r5, r1
 8000d6e:	d92d      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4461      	add	r1, ip
 8000d74:	1b49      	subs	r1, r1, r5
 8000d76:	b292      	uxth	r2, r2
 8000d78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d84:	fb05 f10e 	mul.w	r1, r5, lr
 8000d88:	4291      	cmp	r1, r2
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x282>
 8000d8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d90:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d94:	d216      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d96:	4291      	cmp	r1, r2
 8000d98:	d914      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d9a:	3d02      	subs	r5, #2
 8000d9c:	4462      	add	r2, ip
 8000d9e:	1a52      	subs	r2, r2, r1
 8000da0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000da4:	e738      	b.n	8000c18 <__udivmoddi4+0xfc>
 8000da6:	4631      	mov	r1, r6
 8000da8:	4630      	mov	r0, r6
 8000daa:	e708      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000dac:	4639      	mov	r1, r7
 8000dae:	e6e6      	b.n	8000b7e <__udivmoddi4+0x62>
 8000db0:	4610      	mov	r0, r2
 8000db2:	e6fb      	b.n	8000bac <__udivmoddi4+0x90>
 8000db4:	4548      	cmp	r0, r9
 8000db6:	d2a9      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dbc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	e7a3      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc4:	4645      	mov	r5, r8
 8000dc6:	e7ea      	b.n	8000d9e <__udivmoddi4+0x282>
 8000dc8:	462b      	mov	r3, r5
 8000dca:	e794      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dcc:	4640      	mov	r0, r8
 8000dce:	e7d1      	b.n	8000d74 <__udivmoddi4+0x258>
 8000dd0:	46d0      	mov	r8, sl
 8000dd2:	e77b      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd4:	3d02      	subs	r5, #2
 8000dd6:	4462      	add	r2, ip
 8000dd8:	e732      	b.n	8000c40 <__udivmoddi4+0x124>
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e70a      	b.n	8000bf4 <__udivmoddi4+0xd8>
 8000dde:	4464      	add	r4, ip
 8000de0:	3802      	subs	r0, #2
 8000de2:	e742      	b.n	8000c6a <__udivmoddi4+0x14e>

08000de4 <__aeabi_idiv0>:
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dee:	463b      	mov	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dfa:	4b3d      	ldr	r3, [pc, #244]	; (8000ef0 <MX_ADC1_Init+0x108>)
 8000dfc:	4a3d      	ldr	r2, [pc, #244]	; (8000ef4 <MX_ADC1_Init+0x10c>)
 8000dfe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e00:	4b3b      	ldr	r3, [pc, #236]	; (8000ef0 <MX_ADC1_Init+0x108>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e06:	4b3a      	ldr	r3, [pc, #232]	; (8000ef0 <MX_ADC1_Init+0x108>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e0c:	4b38      	ldr	r3, [pc, #224]	; (8000ef0 <MX_ADC1_Init+0x108>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e12:	4b37      	ldr	r3, [pc, #220]	; (8000ef0 <MX_ADC1_Init+0x108>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e18:	4b35      	ldr	r3, [pc, #212]	; (8000ef0 <MX_ADC1_Init+0x108>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e20:	4b33      	ldr	r3, [pc, #204]	; (8000ef0 <MX_ADC1_Init+0x108>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e26:	4b32      	ldr	r3, [pc, #200]	; (8000ef0 <MX_ADC1_Init+0x108>)
 8000e28:	4a33      	ldr	r2, [pc, #204]	; (8000ef8 <MX_ADC1_Init+0x110>)
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e2c:	4b30      	ldr	r3, [pc, #192]	; (8000ef0 <MX_ADC1_Init+0x108>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000e32:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <MX_ADC1_Init+0x108>)
 8000e34:	2205      	movs	r2, #5
 8000e36:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e38:	4b2d      	ldr	r3, [pc, #180]	; (8000ef0 <MX_ADC1_Init+0x108>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e40:	4b2b      	ldr	r3, [pc, #172]	; (8000ef0 <MX_ADC1_Init+0x108>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e46:	482a      	ldr	r0, [pc, #168]	; (8000ef0 <MX_ADC1_Init+0x108>)
 8000e48:	f003 fa3a 	bl	80042c0 <HAL_ADC_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e52:	f001 f9cf 	bl	80021f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e56:	2308      	movs	r3, #8
 8000e58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e62:	463b      	mov	r3, r7
 8000e64:	4619      	mov	r1, r3
 8000e66:	4822      	ldr	r0, [pc, #136]	; (8000ef0 <MX_ADC1_Init+0x108>)
 8000e68:	f003 fb9c 	bl	80045a4 <HAL_ADC_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e72:	f001 f9bf 	bl	80021f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e76:	2309      	movs	r3, #9
 8000e78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7e:	463b      	mov	r3, r7
 8000e80:	4619      	mov	r1, r3
 8000e82:	481b      	ldr	r0, [pc, #108]	; (8000ef0 <MX_ADC1_Init+0x108>)
 8000e84:	f003 fb8e 	bl	80045a4 <HAL_ADC_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e8e:	f001 f9b1 	bl	80021f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e92:	230a      	movs	r3, #10
 8000e94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e96:	2303      	movs	r3, #3
 8000e98:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4814      	ldr	r0, [pc, #80]	; (8000ef0 <MX_ADC1_Init+0x108>)
 8000ea0:	f003 fb80 	bl	80045a4 <HAL_ADC_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000eaa:	f001 f9a3 	bl	80021f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000eae:	230b      	movs	r3, #11
 8000eb0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <MX_ADC1_Init+0x108>)
 8000ebc:	f003 fb72 	bl	80045a4 <HAL_ADC_ConfigChannel>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000ec6:	f001 f995 	bl	80021f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000eca:	230c      	movs	r3, #12
 8000ecc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000ece:	2305      	movs	r3, #5
 8000ed0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <MX_ADC1_Init+0x108>)
 8000ed8:	f003 fb64 	bl	80045a4 <HAL_ADC_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000ee2:	f001 f987 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000008c 	.word	0x2000008c
 8000ef4:	40012000 	.word	0x40012000
 8000ef8:	0f000001 	.word	0x0f000001

08000efc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a3c      	ldr	r2, [pc, #240]	; (800100c <HAL_ADC_MspInit+0x110>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d171      	bne.n	8001002 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <HAL_ADC_MspInit+0x114>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	4a3a      	ldr	r2, [pc, #232]	; (8001010 <HAL_ADC_MspInit+0x114>)
 8000f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2e:	4b38      	ldr	r3, [pc, #224]	; (8001010 <HAL_ADC_MspInit+0x114>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b34      	ldr	r3, [pc, #208]	; (8001010 <HAL_ADC_MspInit+0x114>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a33      	ldr	r2, [pc, #204]	; (8001010 <HAL_ADC_MspInit+0x114>)
 8000f44:	f043 0304 	orr.w	r3, r3, #4
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b31      	ldr	r3, [pc, #196]	; (8001010 <HAL_ADC_MspInit+0x114>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0304 	and.w	r3, r3, #4
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <HAL_ADC_MspInit+0x114>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a2c      	ldr	r2, [pc, #176]	; (8001010 <HAL_ADC_MspInit+0x114>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <HAL_ADC_MspInit+0x114>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f72:	2307      	movs	r3, #7
 8000f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f76:	2303      	movs	r3, #3
 8000f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	4823      	ldr	r0, [pc, #140]	; (8001014 <HAL_ADC_MspInit+0x118>)
 8000f86:	f004 fac1 	bl	800550c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	481e      	ldr	r0, [pc, #120]	; (8001018 <HAL_ADC_MspInit+0x11c>)
 8000f9e:	f004 fab5 	bl	800550c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	; (800101c <HAL_ADC_MspInit+0x120>)
 8000fa4:	4a1e      	ldr	r2, [pc, #120]	; (8001020 <HAL_ADC_MspInit+0x124>)
 8000fa6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	; (800101c <HAL_ADC_MspInit+0x120>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fae:	4b1b      	ldr	r3, [pc, #108]	; (800101c <HAL_ADC_MspInit+0x120>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <HAL_ADC_MspInit+0x120>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fba:	4b18      	ldr	r3, [pc, #96]	; (800101c <HAL_ADC_MspInit+0x120>)
 8000fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fc0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <HAL_ADC_MspInit+0x120>)
 8000fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <HAL_ADC_MspInit+0x120>)
 8000fcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_ADC_MspInit+0x120>)
 8000fd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fd8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <HAL_ADC_MspInit+0x120>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	; (800101c <HAL_ADC_MspInit+0x120>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fe6:	480d      	ldr	r0, [pc, #52]	; (800101c <HAL_ADC_MspInit+0x120>)
 8000fe8:	f003 fe8e 	bl	8004d08 <HAL_DMA_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000ff2:	f001 f8ff 	bl	80021f4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_ADC_MspInit+0x120>)
 8000ffa:	639a      	str	r2, [r3, #56]	; 0x38
 8000ffc:	4a07      	ldr	r2, [pc, #28]	; (800101c <HAL_ADC_MspInit+0x120>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001002:	bf00      	nop
 8001004:	3728      	adds	r7, #40	; 0x28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40012000 	.word	0x40012000
 8001010:	40023800 	.word	0x40023800
 8001014:	40020800 	.word	0x40020800
 8001018:	40020400 	.word	0x40020400
 800101c:	200000d4 	.word	0x200000d4
 8001020:	40026410 	.word	0x40026410

08001024 <button_init>:
/**
 * @brief  Init matrix button
 * @param  None
 * @retval None
 */
void button_init() {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001028:	2201      	movs	r2, #1
 800102a:	2108      	movs	r1, #8
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <button_init+0x14>)
 800102e:	f004 fc09 	bl	8005844 <HAL_GPIO_WritePin>
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40020c00 	.word	0x40020c00

0800103c <button_Scan>:
 * @brief  Scan matrix button
 * @param  None
 * @note  	Call every 50ms
 * @retval None
 */
void button_Scan() {
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2108      	movs	r1, #8
 8001046:	482f      	ldr	r0, [pc, #188]	; (8001104 <button_Scan+0xc8>)
 8001048:	f004 fbfc 	bl	8005844 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800104c:	2201      	movs	r2, #1
 800104e:	2108      	movs	r1, #8
 8001050:	482c      	ldr	r0, [pc, #176]	; (8001104 <button_Scan+0xc8>)
 8001052:	f004 fbf7 	bl	8005844 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &spi_button, 2, 10);
 8001056:	230a      	movs	r3, #10
 8001058:	2202      	movs	r2, #2
 800105a:	492b      	ldr	r1, [pc, #172]	; (8001108 <button_Scan+0xcc>)
 800105c:	482b      	ldr	r0, [pc, #172]	; (800110c <button_Scan+0xd0>)
 800105e:	f006 f8ec 	bl	800723a <HAL_SPI_Receive>
	int button_index = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
	uint16_t mask = 0x8000;
 8001066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800106a:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	e03f      	b.n	80010f2 <button_Scan+0xb6>
		if (i >= 0 && i <= 3) {
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db06      	blt.n	8001086 <button_Scan+0x4a>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b03      	cmp	r3, #3
 800107c:	dc03      	bgt.n	8001086 <button_Scan+0x4a>
			button_index = i + 4;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3304      	adds	r3, #4
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e018      	b.n	80010b8 <button_Scan+0x7c>
		} else if (i >= 4 && i <= 7) {
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b03      	cmp	r3, #3
 800108a:	dd07      	ble.n	800109c <button_Scan+0x60>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b07      	cmp	r3, #7
 8001090:	dc04      	bgt.n	800109c <button_Scan+0x60>
			button_index = 7 - i;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f1c3 0307 	rsb	r3, r3, #7
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	e00d      	b.n	80010b8 <button_Scan+0x7c>
		} else if (i >= 8 && i <= 11) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b07      	cmp	r3, #7
 80010a0:	dd06      	ble.n	80010b0 <button_Scan+0x74>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b0b      	cmp	r3, #11
 80010a6:	dc03      	bgt.n	80010b0 <button_Scan+0x74>
			button_index = i + 4;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3304      	adds	r3, #4
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	e003      	b.n	80010b8 <button_Scan+0x7c>
		} else {
			button_index = 23 - i;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f1c3 0317 	rsb	r3, r3, #23
 80010b6:	60fb      	str	r3, [r7, #12]
		}
		if (spi_button & mask)
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <button_Scan+0xcc>)
 80010ba:	881a      	ldrh	r2, [r3, #0]
 80010bc:	897b      	ldrh	r3, [r7, #10]
 80010be:	4013      	ands	r3, r2
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d005      	beq.n	80010d2 <button_Scan+0x96>
			button_count[button_index] = 0;
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <button_Scan+0xd4>)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2100      	movs	r1, #0
 80010cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80010d0:	e009      	b.n	80010e6 <button_Scan+0xaa>
		else
			button_count[button_index]++;
 80010d2:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <button_Scan+0xd4>)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010da:	3301      	adds	r3, #1
 80010dc:	b299      	uxth	r1, r3
 80010de:	4a0c      	ldr	r2, [pc, #48]	; (8001110 <button_Scan+0xd4>)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 80010e6:	897b      	ldrh	r3, [r7, #10]
 80010e8:	085b      	lsrs	r3, r3, #1
 80010ea:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3301      	adds	r3, #1
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b0f      	cmp	r3, #15
 80010f6:	ddbc      	ble.n	8001072 <button_Scan+0x36>
	}
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40020c00 	.word	0x40020c00
 8001108:	20000154 	.word	0x20000154
 800110c:	2000026c 	.word	0x2000026c
 8001110:	20000134 	.word	0x20000134

08001114 <is_button_pressed>:
 * @brief  check button "id" is pressed
 * @param  id - id of button [0...15]
 * @retval 1: button is pressed
 * 		0: invalid para OR button is not pressed
 */
bool is_button_pressed(uint8_t id) {
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
	if (id > 16)
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b10      	cmp	r3, #16
 8001122:	d901      	bls.n	8001128 <is_button_pressed+0x14>
		return 0;
 8001124:	2300      	movs	r3, #0
 8001126:	e008      	b.n	800113a <is_button_pressed+0x26>
	return button_count[id] != 0;
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	4a07      	ldr	r2, [pc, #28]	; (8001148 <is_button_pressed+0x34>)
 800112c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001130:	2b00      	cmp	r3, #0
 8001132:	bf14      	ite	ne
 8001134:	2301      	movne	r3, #1
 8001136:	2300      	moveq	r3, #0
 8001138:	b2db      	uxtb	r3, r3
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000134 	.word	0x20000134

0800114c <is_button_long_pressed>:
 * @brief  check button "id" is pressed
 * @param  id - id of button [0...15]
 * @retval 1: button is long pressed
 * 		0: invalid para OR button is not long pressed
 */
bool is_button_long_pressed(uint8_t id) {
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
	if (id > 16)
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	2b10      	cmp	r3, #16
 800115a:	d901      	bls.n	8001160 <is_button_long_pressed+0x14>
		return 0;
 800115c:	2300      	movs	r3, #0
 800115e:	e008      	b.n	8001172 <is_button_long_pressed+0x26>
	if (button_count[id] < LONG_PRESSED_TIME / READ_BUTTON_TIME) {
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	4a07      	ldr	r2, [pc, #28]	; (8001180 <is_button_long_pressed+0x34>)
 8001164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001168:	2bc7      	cmp	r3, #199	; 0xc7
 800116a:	d801      	bhi.n	8001170 <is_button_long_pressed+0x24>
		return 0;
 800116c:	2300      	movs	r3, #0
 800116e:	e000      	b.n	8001172 <is_button_long_pressed+0x26>
	}
	return 1;
 8001170:	2301      	movs	r3, #1
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000134 	.word	0x20000134

08001184 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001188:	2100      	movs	r1, #0
 800118a:	4802      	ldr	r0, [pc, #8]	; (8001194 <buzzer_init+0x10>)
 800118c:	f006 fd9a 	bl	8007cc4 <HAL_TIM_PWM_Start>
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000314 	.word	0x20000314

08001198 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 80011a2:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <buzzer_SetVolume+0x28>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <buzzer_SetVolume+0x28>)
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <buzzer_SetVolume+0x2c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000156 	.word	0x20000156
 80011c4:	20000314 	.word	0x20000314

080011c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_DMA_Init+0x3c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <MX_DMA_Init+0x3c>)
 80011d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_DMA_Init+0x3c>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	2038      	movs	r0, #56	; 0x38
 80011f0:	f003 fd53 	bl	8004c9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011f4:	2038      	movs	r0, #56	; 0x38
 80011f6:	f003 fd6c 	bl	8004cd2 <HAL_NVIC_EnableIRQ>

}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800

08001208 <ds3231_Write>:
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
		while(1);
	};
}

void ds3231_Write(uint8_t address, uint8_t value){
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af04      	add	r7, sp, #16
 800120e:	4603      	mov	r3, r0
 8001210:	460a      	mov	r2, r1
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	4613      	mov	r3, r2
 8001216:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8001218:	79bb      	ldrb	r3, [r7, #6]
 800121a:	4618      	mov	r0, r3
 800121c:	f002 ff6c 	bl	80040f8 <DEC2BCD>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	b29a      	uxth	r2, r3
 8001228:	230a      	movs	r3, #10
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	2301      	movs	r3, #1
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	f107 030f 	add.w	r3, r7, #15
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	21d0      	movs	r1, #208	; 0xd0
 800123a:	4803      	ldr	r0, [pc, #12]	; (8001248 <ds3231_Write+0x40>)
 800123c:	f004 fc60 	bl	8005b00 <HAL_I2C_Mem_Write>
}
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200001bc 	.word	0x200001bc

0800124c <ds3231_ReadTime>:

void ds3231_ReadTime(){
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8001252:	230a      	movs	r3, #10
 8001254:	9302      	str	r3, [sp, #8]
 8001256:	2307      	movs	r3, #7
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <ds3231_ReadTime+0xa4>)
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2301      	movs	r3, #1
 8001260:	2200      	movs	r2, #0
 8001262:	21d0      	movs	r1, #208	; 0xd0
 8001264:	4823      	ldr	r0, [pc, #140]	; (80012f4 <ds3231_ReadTime+0xa8>)
 8001266:	f004 fd45 	bl	8005cf4 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <ds3231_ReadTime+0xa4>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f002 ff28 	bl	80040c4 <BCD2DEC>
 8001274:	4603      	mov	r3, r0
 8001276:	461a      	mov	r2, r3
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <ds3231_ReadTime+0xac>)
 800127a:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 800127c:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <ds3231_ReadTime+0xa4>)
 800127e:	785b      	ldrb	r3, [r3, #1]
 8001280:	4618      	mov	r0, r3
 8001282:	f002 ff1f 	bl	80040c4 <BCD2DEC>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <ds3231_ReadTime+0xb0>)
 800128c:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <ds3231_ReadTime+0xa4>)
 8001290:	789b      	ldrb	r3, [r3, #2]
 8001292:	4618      	mov	r0, r3
 8001294:	f002 ff16 	bl	80040c4 <BCD2DEC>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <ds3231_ReadTime+0xb4>)
 800129e:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <ds3231_ReadTime+0xa4>)
 80012a2:	78db      	ldrb	r3, [r3, #3]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 ff0d 	bl	80040c4 <BCD2DEC>
 80012aa:	4603      	mov	r3, r0
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <ds3231_ReadTime+0xb8>)
 80012b0:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <ds3231_ReadTime+0xa4>)
 80012b4:	791b      	ldrb	r3, [r3, #4]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f002 ff04 	bl	80040c4 <BCD2DEC>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <ds3231_ReadTime+0xbc>)
 80012c2:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <ds3231_ReadTime+0xa4>)
 80012c6:	795b      	ldrb	r3, [r3, #5]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f002 fefb 	bl	80040c4 <BCD2DEC>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <ds3231_ReadTime+0xc0>)
 80012d4:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <ds3231_ReadTime+0xa4>)
 80012d8:	799b      	ldrb	r3, [r3, #6]
 80012da:	4618      	mov	r0, r3
 80012dc:	f002 fef2 	bl	80040c4 <BCD2DEC>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <ds3231_ReadTime+0xc4>)
 80012e6:	701a      	strb	r2, [r3, #0]
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000158 	.word	0x20000158
 80012f4:	200001bc 	.word	0x200001bc
 80012f8:	20000161 	.word	0x20000161
 80012fc:	20000160 	.word	0x20000160
 8001300:	2000015f 	.word	0x2000015f
 8001304:	20000163 	.word	0x20000163
 8001308:	20000162 	.word	0x20000162
 800130c:	20000164 	.word	0x20000164
 8001310:	20000165 	.word	0x20000165

08001314 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08e      	sub	sp, #56	; 0x38
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]
 800132a:	615a      	str	r2, [r3, #20]
 800132c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800132e:	463b      	mov	r3, r7
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
 800133c:	615a      	str	r2, [r3, #20]
 800133e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <MX_FSMC_Init+0xec>)
 8001342:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001346:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001348:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <MX_FSMC_Init+0xec>)
 800134a:	4a2e      	ldr	r2, [pc, #184]	; (8001404 <MX_FSMC_Init+0xf0>)
 800134c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800134e:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <MX_FSMC_Init+0xec>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001354:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <MX_FSMC_Init+0xec>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800135a:	4b29      	ldr	r3, [pc, #164]	; (8001400 <MX_FSMC_Init+0xec>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001360:	4b27      	ldr	r3, [pc, #156]	; (8001400 <MX_FSMC_Init+0xec>)
 8001362:	2210      	movs	r2, #16
 8001364:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001366:	4b26      	ldr	r3, [pc, #152]	; (8001400 <MX_FSMC_Init+0xec>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800136c:	4b24      	ldr	r3, [pc, #144]	; (8001400 <MX_FSMC_Init+0xec>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001372:	4b23      	ldr	r3, [pc, #140]	; (8001400 <MX_FSMC_Init+0xec>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001378:	4b21      	ldr	r3, [pc, #132]	; (8001400 <MX_FSMC_Init+0xec>)
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800137e:	4b20      	ldr	r3, [pc, #128]	; (8001400 <MX_FSMC_Init+0xec>)
 8001380:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001386:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <MX_FSMC_Init+0xec>)
 8001388:	2200      	movs	r2, #0
 800138a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <MX_FSMC_Init+0xec>)
 800138e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001392:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001394:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <MX_FSMC_Init+0xec>)
 8001396:	2200      	movs	r2, #0
 8001398:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <MX_FSMC_Init+0xec>)
 800139c:	2200      	movs	r2, #0
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <MX_FSMC_Init+0xec>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80013a6:	230f      	movs	r3, #15
 80013a8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80013aa:	230f      	movs	r3, #15
 80013ac:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80013ae:	233c      	movs	r3, #60	; 0x3c
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80013b6:	2310      	movs	r3, #16
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80013ba:	2311      	movs	r3, #17
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80013be:	2300      	movs	r3, #0
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80013c2:	2308      	movs	r3, #8
 80013c4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80013c6:	230f      	movs	r3, #15
 80013c8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80013ca:	2309      	movs	r3, #9
 80013cc:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80013d2:	2310      	movs	r3, #16
 80013d4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80013d6:	2311      	movs	r3, #17
 80013d8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80013da:	2300      	movs	r3, #0
 80013dc:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80013de:	463a      	mov	r2, r7
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	4806      	ldr	r0, [pc, #24]	; (8001400 <MX_FSMC_Init+0xec>)
 80013e8:	f006 fb0a 	bl	8007a00 <HAL_SRAM_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80013f2:	f000 feff 	bl	80021f4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80013f6:	bf00      	nop
 80013f8:	3738      	adds	r7, #56	; 0x38
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000168 	.word	0x20000168
 8001404:	a0000104 	.word	0xa0000104

08001408 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800141c:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <HAL_FSMC_MspInit+0x88>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d131      	bne.n	8001488 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <HAL_FSMC_MspInit+0x88>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <HAL_FSMC_MspInit+0x8c>)
 8001430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001432:	4a18      	ldr	r2, [pc, #96]	; (8001494 <HAL_FSMC_MspInit+0x8c>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6393      	str	r3, [r2, #56]	; 0x38
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <HAL_FSMC_MspInit+0x8c>)
 800143c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001446:	f64f 7388 	movw	r3, #65416	; 0xff88
 800144a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001458:	230c      	movs	r3, #12
 800145a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	4619      	mov	r1, r3
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <HAL_FSMC_MspInit+0x90>)
 8001462:	f004 f853 	bl	800550c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001466:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800146a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001478:	230c      	movs	r3, #12
 800147a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	4619      	mov	r1, r3
 8001480:	4806      	ldr	r0, [pc, #24]	; (800149c <HAL_FSMC_MspInit+0x94>)
 8001482:	f004 f843 	bl	800550c <HAL_GPIO_Init>
 8001486:	e000      	b.n	800148a <HAL_FSMC_MspInit+0x82>
    return;
 8001488:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200001b8 	.word	0x200001b8
 8001494:	40023800 	.word	0x40023800
 8001498:	40021000 	.word	0x40021000
 800149c:	40020c00 	.word	0x40020c00

080014a0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80014a8:	f7ff ffae 	bl	8001408 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08e      	sub	sp, #56	; 0x38
 80014b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
 80014ce:	4b76      	ldr	r3, [pc, #472]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a75      	ldr	r2, [pc, #468]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 80014d4:	f043 0310 	orr.w	r3, r3, #16
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b73      	ldr	r3, [pc, #460]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	623b      	str	r3, [r7, #32]
 80014e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	4b6f      	ldr	r3, [pc, #444]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a6e      	ldr	r2, [pc, #440]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b6c      	ldr	r3, [pc, #432]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
 8001506:	4b68      	ldr	r3, [pc, #416]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a67      	ldr	r2, [pc, #412]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 800150c:	f043 0320 	orr.w	r3, r3, #32
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b65      	ldr	r3, [pc, #404]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0320 	and.w	r3, r3, #32
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	4b61      	ldr	r3, [pc, #388]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a60      	ldr	r2, [pc, #384]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 8001528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b5e      	ldr	r3, [pc, #376]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b5a      	ldr	r3, [pc, #360]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a59      	ldr	r2, [pc, #356]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b57      	ldr	r3, [pc, #348]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b53      	ldr	r3, [pc, #332]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a52      	ldr	r2, [pc, #328]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b50      	ldr	r3, [pc, #320]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	4b4c      	ldr	r3, [pc, #304]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a4b      	ldr	r2, [pc, #300]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b45      	ldr	r3, [pc, #276]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a44      	ldr	r2, [pc, #272]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 8001598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b42      	ldr	r3, [pc, #264]	; (80016a8 <MX_GPIO_Init+0x1f4>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2170      	movs	r1, #112	; 0x70
 80015ae:	483f      	ldr	r0, [pc, #252]	; (80016ac <MX_GPIO_Init+0x1f8>)
 80015b0:	f004 f948 	bl	8005844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ba:	483d      	ldr	r0, [pc, #244]	; (80016b0 <MX_GPIO_Init+0x1fc>)
 80015bc:	f004 f942 	bl	8005844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2140      	movs	r1, #64	; 0x40
 80015c4:	483b      	ldr	r0, [pc, #236]	; (80016b4 <MX_GPIO_Init+0x200>)
 80015c6:	f004 f93d 	bl	8005844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d0:	4839      	ldr	r0, [pc, #228]	; (80016b8 <MX_GPIO_Init+0x204>)
 80015d2:	f004 f937 	bl	8005844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2108      	movs	r1, #8
 80015da:	4838      	ldr	r0, [pc, #224]	; (80016bc <MX_GPIO_Init+0x208>)
 80015dc:	f004 f932 	bl	8005844 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80015e0:	2370      	movs	r3, #112	; 0x70
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f4:	4619      	mov	r1, r3
 80015f6:	482d      	ldr	r0, [pc, #180]	; (80016ac <MX_GPIO_Init+0x1f8>)
 80015f8:	f003 ff88 	bl	800550c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80015fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	2301      	movs	r3, #1
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800160e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001612:	4619      	mov	r1, r3
 8001614:	4826      	ldr	r0, [pc, #152]	; (80016b0 <MX_GPIO_Init+0x1fc>)
 8001616:	f003 ff79 	bl	800550c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800161a:	23c0      	movs	r3, #192	; 0xc0
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161e:	2300      	movs	r3, #0
 8001620:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162a:	4619      	mov	r1, r3
 800162c:	4822      	ldr	r0, [pc, #136]	; (80016b8 <MX_GPIO_Init+0x204>)
 800162e:	f003 ff6d 	bl	800550c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001632:	2330      	movs	r3, #48	; 0x30
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001636:	2300      	movs	r3, #0
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001642:	4619      	mov	r1, r3
 8001644:	481a      	ldr	r0, [pc, #104]	; (80016b0 <MX_GPIO_Init+0x1fc>)
 8001646:	f003 ff61 	bl	800550c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800164a:	2340      	movs	r3, #64	; 0x40
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165e:	4619      	mov	r1, r3
 8001660:	4814      	ldr	r0, [pc, #80]	; (80016b4 <MX_GPIO_Init+0x200>)
 8001662:	f003 ff53 	bl	800550c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001666:	f44f 7380 	mov.w	r3, #256	; 0x100
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	4619      	mov	r1, r3
 800167e:	480e      	ldr	r0, [pc, #56]	; (80016b8 <MX_GPIO_Init+0x204>)
 8001680:	f003 ff44 	bl	800550c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001684:	2308      	movs	r3, #8
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001698:	4619      	mov	r1, r3
 800169a:	4808      	ldr	r0, [pc, #32]	; (80016bc <MX_GPIO_Init+0x208>)
 800169c:	f003 ff36 	bl	800550c <HAL_GPIO_Init>

}
 80016a0:	bf00      	nop
 80016a2:	3738      	adds	r7, #56	; 0x38
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40021800 	.word	0x40021800
 80016b8:	40020000 	.word	0x40020000
 80016bc:	40020c00 	.word	0x40020c00

080016c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_I2C1_Init+0x50>)
 80016c6:	4a13      	ldr	r2, [pc, #76]	; (8001714 <MX_I2C1_Init+0x54>)
 80016c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_I2C1_Init+0x50>)
 80016cc:	4a12      	ldr	r2, [pc, #72]	; (8001718 <MX_I2C1_Init+0x58>)
 80016ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <MX_I2C1_Init+0x50>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_I2C1_Init+0x50>)
 80016d8:	2200      	movs	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_I2C1_Init+0x50>)
 80016de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <MX_I2C1_Init+0x50>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_I2C1_Init+0x50>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <MX_I2C1_Init+0x50>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_I2C1_Init+0x50>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016fc:	4804      	ldr	r0, [pc, #16]	; (8001710 <MX_I2C1_Init+0x50>)
 80016fe:	f004 f8bb 	bl	8005878 <HAL_I2C_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001708:	f000 fd74 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	200001bc 	.word	0x200001bc
 8001714:	40005400 	.word	0x40005400
 8001718:	000186a0 	.word	0x000186a0

0800171c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a19      	ldr	r2, [pc, #100]	; (80017a0 <HAL_I2C_MspInit+0x84>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d12b      	bne.n	8001796 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_I2C_MspInit+0x88>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a17      	ldr	r2, [pc, #92]	; (80017a4 <HAL_I2C_MspInit+0x88>)
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_I2C_MspInit+0x88>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800175a:	23c0      	movs	r3, #192	; 0xc0
 800175c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800175e:	2312      	movs	r3, #18
 8001760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800176a:	2304      	movs	r3, #4
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	480c      	ldr	r0, [pc, #48]	; (80017a8 <HAL_I2C_MspInit+0x8c>)
 8001776:	f003 fec9 	bl	800550c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_I2C_MspInit+0x88>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	4a08      	ldr	r2, [pc, #32]	; (80017a4 <HAL_I2C_MspInit+0x88>)
 8001784:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001788:	6413      	str	r3, [r2, #64]	; 0x40
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_I2C_MspInit+0x88>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001796:	bf00      	nop
 8001798:	3728      	adds	r7, #40	; 0x28
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40005400 	.word	0x40005400
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40020400 	.word	0x40020400

080017ac <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <LCD_WR_REG+0x1c>)
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	8013      	strh	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	600ffffe 	.word	0x600ffffe

080017cc <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <LCD_WR_DATA+0x1c>)
 80017d8:	88fb      	ldrh	r3, [r7, #6]
 80017da:	8053      	strh	r3, [r2, #2]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	600ffffe 	.word	0x600ffffe

080017ec <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <LCD_RD_DATA+0x20>)
 80017f4:	885b      	ldrh	r3, [r3, #2]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	80fb      	strh	r3, [r7, #6]
	return ram;
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	b29b      	uxth	r3, r3
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	600ffffe 	.word	0x600ffffe

08001810 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4604      	mov	r4, r0
 8001818:	4608      	mov	r0, r1
 800181a:	4611      	mov	r1, r2
 800181c:	461a      	mov	r2, r3
 800181e:	4623      	mov	r3, r4
 8001820:	80fb      	strh	r3, [r7, #6]
 8001822:	4603      	mov	r3, r0
 8001824:	80bb      	strh	r3, [r7, #4]
 8001826:	460b      	mov	r3, r1
 8001828:	807b      	strh	r3, [r7, #2]
 800182a:	4613      	mov	r3, r2
 800182c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800182e:	202a      	movs	r0, #42	; 0x2a
 8001830:	f7ff ffbc 	bl	80017ac <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	0a1b      	lsrs	r3, r3, #8
 8001838:	b29b      	uxth	r3, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ffc6 	bl	80017cc <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	b29b      	uxth	r3, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ffc0 	bl	80017cc <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 800184c:	887b      	ldrh	r3, [r7, #2]
 800184e:	0a1b      	lsrs	r3, r3, #8
 8001850:	b29b      	uxth	r3, r3
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ffba 	bl	80017cc <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001858:	887b      	ldrh	r3, [r7, #2]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	b29b      	uxth	r3, r3
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ffb4 	bl	80017cc <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001864:	202b      	movs	r0, #43	; 0x2b
 8001866:	f7ff ffa1 	bl	80017ac <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800186a:	88bb      	ldrh	r3, [r7, #4]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	b29b      	uxth	r3, r3
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ffab 	bl	80017cc <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001876:	88bb      	ldrh	r3, [r7, #4]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	b29b      	uxth	r3, r3
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ffa5 	bl	80017cc <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001882:	883b      	ldrh	r3, [r7, #0]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	b29b      	uxth	r3, r3
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff9f 	bl	80017cc <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800188e:	883b      	ldrh	r3, [r7, #0]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	b29b      	uxth	r3, r3
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff99 	bl	80017cc <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 800189a:	202c      	movs	r0, #44	; 0x2c
 800189c:	f7ff ff86 	bl	80017ac <LCD_WR_REG>
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd90      	pop	{r4, r7, pc}

080018a8 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
 80018b2:	460b      	mov	r3, r1
 80018b4:	80bb      	strh	r3, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80018ba:	88bb      	ldrh	r3, [r7, #4]
 80018bc:	88fa      	ldrh	r2, [r7, #6]
 80018be:	88b9      	ldrh	r1, [r7, #4]
 80018c0:	88f8      	ldrh	r0, [r7, #6]
 80018c2:	f7ff ffa5 	bl	8001810 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80018c6:	887b      	ldrh	r3, [r7, #2]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff7f 	bl	80017cc <LCD_WR_DATA>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b087      	sub	sp, #28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4604      	mov	r4, r0
 80018e0:	4608      	mov	r0, r1
 80018e2:	4611      	mov	r1, r2
 80018e4:	461a      	mov	r2, r3
 80018e6:	4623      	mov	r3, r4
 80018e8:	80fb      	strh	r3, [r7, #6]
 80018ea:	4603      	mov	r3, r0
 80018ec:	80bb      	strh	r3, [r7, #4]
 80018ee:	460b      	mov	r3, r1
 80018f0:	70fb      	strb	r3, [r7, #3]
 80018f2:	4613      	mov	r3, r2
 80018f4:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80018fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001902:	085b      	lsrs	r3, r3, #1
 8001904:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	08db      	lsrs	r3, r3, #3
 800190a:	b2db      	uxtb	r3, r3
 800190c:	461a      	mov	r2, r3
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	bf14      	ite	ne
 800191a:	2301      	movne	r3, #1
 800191c:	2300      	moveq	r3, #0
 800191e:	b2db      	uxtb	r3, r3
 8001920:	4413      	add	r3, r2
 8001922:	b29a      	uxth	r2, r3
 8001924:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001928:	b29b      	uxth	r3, r3
 800192a:	fb12 f303 	smulbb	r3, r2, r3
 800192e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001930:	78fb      	ldrb	r3, [r7, #3]
 8001932:	3b20      	subs	r3, #32
 8001934:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	b29a      	uxth	r2, r3
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	4413      	add	r3, r2
 800193e:	b29b      	uxth	r3, r3
 8001940:	3b01      	subs	r3, #1
 8001942:	b29c      	uxth	r4, r3
 8001944:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001948:	b29a      	uxth	r2, r3
 800194a:	88bb      	ldrh	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	b29b      	uxth	r3, r3
 8001950:	3b01      	subs	r3, #1
 8001952:	b29b      	uxth	r3, r3
 8001954:	88b9      	ldrh	r1, [r7, #4]
 8001956:	88f8      	ldrh	r0, [r7, #6]
 8001958:	4622      	mov	r2, r4
 800195a:	f7ff ff59 	bl	8001810 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800195e:	2300      	movs	r3, #0
 8001960:	827b      	strh	r3, [r7, #18]
 8001962:	e07a      	b.n	8001a5a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001964:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001968:	2b0c      	cmp	r3, #12
 800196a:	d028      	beq.n	80019be <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 800196c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001970:	2b10      	cmp	r3, #16
 8001972:	d108      	bne.n	8001986 <lcd_ShowChar+0xae>
 8001974:	78fa      	ldrb	r2, [r7, #3]
 8001976:	8a7b      	ldrh	r3, [r7, #18]
 8001978:	493c      	ldr	r1, [pc, #240]	; (8001a6c <lcd_ShowChar+0x194>)
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	440a      	add	r2, r1
 800197e:	4413      	add	r3, r2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	75fb      	strb	r3, [r7, #23]
 8001984:	e01b      	b.n	80019be <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001986:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800198a:	2b18      	cmp	r3, #24
 800198c:	d10b      	bne.n	80019a6 <lcd_ShowChar+0xce>
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	8a79      	ldrh	r1, [r7, #18]
 8001992:	4837      	ldr	r0, [pc, #220]	; (8001a70 <lcd_ShowChar+0x198>)
 8001994:	4613      	mov	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	4403      	add	r3, r0
 800199e:	440b      	add	r3, r1
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	75fb      	strb	r3, [r7, #23]
 80019a4:	e00b      	b.n	80019be <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 80019a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019aa:	2b20      	cmp	r3, #32
 80019ac:	d15a      	bne.n	8001a64 <lcd_ShowChar+0x18c>
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	8a7b      	ldrh	r3, [r7, #18]
 80019b2:	4930      	ldr	r1, [pc, #192]	; (8001a74 <lcd_ShowChar+0x19c>)
 80019b4:	0192      	lsls	r2, r2, #6
 80019b6:	440a      	add	r2, r1
 80019b8:	4413      	add	r3, r2
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80019be:	2300      	movs	r3, #0
 80019c0:	75bb      	strb	r3, [r7, #22]
 80019c2:	e044      	b.n	8001a4e <lcd_ShowChar+0x176>
		{
			if(!mode)
 80019c4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d120      	bne.n	8001a0e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80019cc:	7dfa      	ldrb	r2, [r7, #23]
 80019ce:	7dbb      	ldrb	r3, [r7, #22]
 80019d0:	fa42 f303 	asr.w	r3, r2, r3
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d004      	beq.n	80019e6 <lcd_ShowChar+0x10e>
 80019dc:	883b      	ldrh	r3, [r7, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fef4 	bl	80017cc <LCD_WR_DATA>
 80019e4:	e003      	b.n	80019ee <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80019e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff feef 	bl	80017cc <LCD_WR_DATA>
				m++;
 80019ee:	7d7b      	ldrb	r3, [r7, #21]
 80019f0:	3301      	adds	r3, #1
 80019f2:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80019f4:	7d7b      	ldrb	r3, [r7, #21]
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80019fc:	fb01 f202 	mul.w	r2, r1, r2
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d11f      	bne.n	8001a48 <lcd_ShowChar+0x170>
				{
					m=0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	757b      	strb	r3, [r7, #21]
					break;
 8001a0c:	e022      	b.n	8001a54 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001a0e:	7dfa      	ldrb	r2, [r7, #23]
 8001a10:	7dbb      	ldrb	r3, [r7, #22]
 8001a12:	fa42 f303 	asr.w	r3, r2, r3
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <lcd_ShowChar+0x152>
 8001a1e:	883a      	ldrh	r2, [r7, #0]
 8001a20:	88b9      	ldrh	r1, [r7, #4]
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff3f 	bl	80018a8 <lcd_DrawPoint>
				x++;
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001a30:	88fa      	ldrh	r2, [r7, #6]
 8001a32:	8a3b      	ldrh	r3, [r7, #16]
 8001a34:	1ad2      	subs	r2, r2, r3
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d105      	bne.n	8001a48 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001a3c:	8a3b      	ldrh	r3, [r7, #16]
 8001a3e:	80fb      	strh	r3, [r7, #6]
					y++;
 8001a40:	88bb      	ldrh	r3, [r7, #4]
 8001a42:	3301      	adds	r3, #1
 8001a44:	80bb      	strh	r3, [r7, #4]
					break;
 8001a46:	e005      	b.n	8001a54 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001a48:	7dbb      	ldrb	r3, [r7, #22]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	75bb      	strb	r3, [r7, #22]
 8001a4e:	7dbb      	ldrb	r3, [r7, #22]
 8001a50:	2b07      	cmp	r3, #7
 8001a52:	d9b7      	bls.n	80019c4 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001a54:	8a7b      	ldrh	r3, [r7, #18]
 8001a56:	3301      	adds	r3, #1
 8001a58:	827b      	strh	r3, [r7, #18]
 8001a5a:	8a7a      	ldrh	r2, [r7, #18]
 8001a5c:	89bb      	ldrh	r3, [r7, #12]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d380      	bcc.n	8001964 <lcd_ShowChar+0x8c>
 8001a62:	e000      	b.n	8001a66 <lcd_ShowChar+0x18e>
		else return;
 8001a64:	bf00      	nop
				}
			}
		}
	}
}
 8001a66:	371c      	adds	r7, #28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd90      	pop	{r4, r7, pc}
 8001a6c:	0800a814 	.word	0x0800a814
 8001a70:	0800ae04 	.word	0x0800ae04
 8001a74:	0800bfd4 	.word	0x0800bfd4

08001a78 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	460a      	mov	r2, r1
 8001a82:	71fb      	strb	r3, [r7, #7]
 8001a84:	4613      	mov	r3, r2
 8001a86:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001a8c:	e004      	b.n	8001a98 <mypow+0x20>
 8001a8e:	79fa      	ldrb	r2, [r7, #7]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	79bb      	ldrb	r3, [r7, #6]
 8001a9a:	1e5a      	subs	r2, r3, #1
 8001a9c:	71ba      	strb	r2, [r7, #6]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f5      	bne.n	8001a8e <mypow+0x16>
	return result;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af04      	add	r7, sp, #16
 8001ab6:	4604      	mov	r4, r0
 8001ab8:	4608      	mov	r0, r1
 8001aba:	4611      	mov	r1, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	4623      	mov	r3, r4
 8001ac0:	80fb      	strh	r3, [r7, #6]
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80bb      	strh	r3, [r7, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	807b      	strh	r3, [r7, #2]
 8001aca:	4613      	mov	r3, r2
 8001acc:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001ad2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ad6:	085b      	lsrs	r3, r3, #1
 8001ad8:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	e059      	b.n	8001b94 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001ae0:	887c      	ldrh	r4, [r7, #2]
 8001ae2:	787a      	ldrb	r2, [r7, #1]
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4619      	mov	r1, r3
 8001af0:	200a      	movs	r0, #10
 8001af2:	f7ff ffc1 	bl	8001a78 <mypow>
 8001af6:	4603      	mov	r3, r0
 8001af8:	fbb4 f1f3 	udiv	r1, r4, r3
 8001afc:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <lcd_ShowIntNum+0xf8>)
 8001afe:	fba3 2301 	umull	r2, r3, r3, r1
 8001b02:	08da      	lsrs	r2, r3, #3
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	1aca      	subs	r2, r1, r3
 8001b0e:	4613      	mov	r3, r2
 8001b10:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001b12:	7bbb      	ldrb	r3, [r7, #14]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d121      	bne.n	8001b5c <lcd_ShowIntNum+0xac>
 8001b18:	7bfa      	ldrb	r2, [r7, #15]
 8001b1a:	787b      	ldrb	r3, [r7, #1]
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	da1c      	bge.n	8001b5c <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001b22:	7b3b      	ldrb	r3, [r7, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d117      	bne.n	8001b58 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	7b7b      	ldrb	r3, [r7, #13]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	fb12 f303 	smulbb	r3, r2, r3
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	4413      	add	r3, r2
 8001b3a:	b298      	uxth	r0, r3
 8001b3c:	8c3a      	ldrh	r2, [r7, #32]
 8001b3e:	88b9      	ldrh	r1, [r7, #4]
 8001b40:	2300      	movs	r3, #0
 8001b42:	9302      	str	r3, [sp, #8]
 8001b44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	2220      	movs	r2, #32
 8001b52:	f7ff fec1 	bl	80018d8 <lcd_ShowChar>
				continue;
 8001b56:	e01a      	b.n	8001b8e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	7b7b      	ldrb	r3, [r7, #13]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	fb12 f303 	smulbb	r3, r2, r3
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	b298      	uxth	r0, r3
 8001b70:	7b3b      	ldrb	r3, [r7, #12]
 8001b72:	3330      	adds	r3, #48	; 0x30
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	8c3c      	ldrh	r4, [r7, #32]
 8001b78:	88b9      	ldrh	r1, [r7, #4]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	9302      	str	r3, [sp, #8]
 8001b7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	4623      	mov	r3, r4
 8001b8a:	f7ff fea5 	bl	80018d8 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	3301      	adds	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
 8001b94:	7bfa      	ldrb	r2, [r7, #15]
 8001b96:	787b      	ldrb	r3, [r7, #1]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d3a1      	bcc.n	8001ae0 <lcd_ShowIntNum+0x30>
	}
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd90      	pop	{r4, r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	cccccccd 	.word	0xcccccccd

08001bac <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b08b      	sub	sp, #44	; 0x2c
 8001bb0:	af04      	add	r7, sp, #16
 8001bb2:	4604      	mov	r4, r0
 8001bb4:	4608      	mov	r0, r1
 8001bb6:	ed87 0a02 	vstr	s0, [r7, #8]
 8001bba:	4611      	mov	r1, r2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4623      	mov	r3, r4
 8001bc0:	81fb      	strh	r3, [r7, #14]
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	81bb      	strh	r3, [r7, #12]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	71fb      	strb	r3, [r7, #7]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001bce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bd2:	085b      	lsrs	r3, r3, #1
 8001bd4:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001bd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bda:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001cb4 <lcd_ShowFloatNum+0x108>
 8001bde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be6:	ee17 3a90 	vmov	r3, s15
 8001bea:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	75fb      	strb	r3, [r7, #23]
 8001bf0:	e057      	b.n	8001ca2 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001bf2:	8abc      	ldrh	r4, [r7, #20]
 8001bf4:	79fa      	ldrb	r2, [r7, #7]
 8001bf6:	7dfb      	ldrb	r3, [r7, #23]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	4619      	mov	r1, r3
 8001c02:	200a      	movs	r0, #10
 8001c04:	f7ff ff38 	bl	8001a78 <mypow>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	fbb4 f1f3 	udiv	r1, r4, r3
 8001c0e:	4b2a      	ldr	r3, [pc, #168]	; (8001cb8 <lcd_ShowFloatNum+0x10c>)
 8001c10:	fba3 2301 	umull	r2, r3, r3, r1
 8001c14:	08da      	lsrs	r2, r3, #3
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	1aca      	subs	r2, r1, r3
 8001c20:	4613      	mov	r3, r2
 8001c22:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001c24:	7dfa      	ldrb	r2, [r7, #23]
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	3b02      	subs	r3, #2
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d11d      	bne.n	8001c6a <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	3b02      	subs	r3, #2
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	7dbb      	ldrb	r3, [r7, #22]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	fb12 f303 	smulbb	r3, r2, r3
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	89fb      	ldrh	r3, [r7, #14]
 8001c40:	4413      	add	r3, r2
 8001c42:	b298      	uxth	r0, r3
 8001c44:	88ba      	ldrh	r2, [r7, #4]
 8001c46:	89b9      	ldrh	r1, [r7, #12]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	9302      	str	r3, [sp, #8]
 8001c4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	4613      	mov	r3, r2
 8001c58:	222e      	movs	r2, #46	; 0x2e
 8001c5a:	f7ff fe3d 	bl	80018d8 <lcd_ShowChar>
			t++;
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
 8001c60:	3301      	adds	r3, #1
 8001c62:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	3301      	adds	r3, #1
 8001c68:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001c6a:	7dfb      	ldrb	r3, [r7, #23]
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	7dbb      	ldrb	r3, [r7, #22]
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	fb12 f303 	smulbb	r3, r2, r3
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	89fb      	ldrh	r3, [r7, #14]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	b298      	uxth	r0, r3
 8001c7e:	7cfb      	ldrb	r3, [r7, #19]
 8001c80:	3330      	adds	r3, #48	; 0x30
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	88bc      	ldrh	r4, [r7, #4]
 8001c86:	89b9      	ldrh	r1, [r7, #12]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9302      	str	r3, [sp, #8]
 8001c8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	4623      	mov	r3, r4
 8001c98:	f7ff fe1e 	bl	80018d8 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001c9c:	7dfb      	ldrb	r3, [r7, #23]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	75fb      	strb	r3, [r7, #23]
 8001ca2:	7dfa      	ldrb	r2, [r7, #23]
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d3a3      	bcc.n	8001bf2 <lcd_ShowFloatNum+0x46>
	}
}
 8001caa:	bf00      	nop
 8001cac:	bf00      	nop
 8001cae:	371c      	adds	r7, #28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd90      	pop	{r4, r7, pc}
 8001cb4:	42c80000 	.word	0x42c80000
 8001cb8:	cccccccd 	.word	0xcccccccd

08001cbc <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d007      	beq.n	8001ce6 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <lcd_SetDir+0x44>)
 8001cd8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cdc:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <lcd_SetDir+0x44>)
 8001ce0:	22f0      	movs	r2, #240	; 0xf0
 8001ce2:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001ce4:	e006      	b.n	8001cf4 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <lcd_SetDir+0x44>)
 8001ce8:	22f0      	movs	r2, #240	; 0xf0
 8001cea:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <lcd_SetDir+0x44>)
 8001cee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cf2:	805a      	strh	r2, [r3, #2]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	20000210 	.word	0x20000210

08001d04 <lcd_init>:


void lcd_init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d0e:	48aa      	ldr	r0, [pc, #680]	; (8001fb8 <lcd_init+0x2b4>)
 8001d10:	f003 fd98 	bl	8005844 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001d14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d18:	f002 faae 	bl	8004278 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d22:	48a5      	ldr	r0, [pc, #660]	; (8001fb8 <lcd_init+0x2b4>)
 8001d24:	f003 fd8e 	bl	8005844 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001d28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d2c:	f002 faa4 	bl	8004278 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001d30:	2000      	movs	r0, #0
 8001d32:	f7ff ffc3 	bl	8001cbc <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001d36:	20d3      	movs	r0, #211	; 0xd3
 8001d38:	f7ff fd38 	bl	80017ac <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001d3c:	f7ff fd56 	bl	80017ec <LCD_RD_DATA>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	4b9d      	ldr	r3, [pc, #628]	; (8001fbc <lcd_init+0x2b8>)
 8001d46:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001d48:	f7ff fd50 	bl	80017ec <LCD_RD_DATA>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b9a      	ldr	r3, [pc, #616]	; (8001fbc <lcd_init+0x2b8>)
 8001d52:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001d54:	f7ff fd4a 	bl	80017ec <LCD_RD_DATA>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b97      	ldr	r3, [pc, #604]	; (8001fbc <lcd_init+0x2b8>)
 8001d5e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001d60:	4b96      	ldr	r3, [pc, #600]	; (8001fbc <lcd_init+0x2b8>)
 8001d62:	889b      	ldrh	r3, [r3, #4]
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	4b94      	ldr	r3, [pc, #592]	; (8001fbc <lcd_init+0x2b8>)
 8001d6a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001d6c:	f7ff fd3e 	bl	80017ec <LCD_RD_DATA>
 8001d70:	4603      	mov	r3, r0
 8001d72:	461a      	mov	r2, r3
 8001d74:	4b91      	ldr	r3, [pc, #580]	; (8001fbc <lcd_init+0x2b8>)
 8001d76:	889b      	ldrh	r3, [r3, #4]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	4b8f      	ldr	r3, [pc, #572]	; (8001fbc <lcd_init+0x2b8>)
 8001d7e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001d80:	20cf      	movs	r0, #207	; 0xcf
 8001d82:	f7ff fd13 	bl	80017ac <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d86:	2000      	movs	r0, #0
 8001d88:	f7ff fd20 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001d8c:	20c1      	movs	r0, #193	; 0xc1
 8001d8e:	f7ff fd1d 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001d92:	2030      	movs	r0, #48	; 0x30
 8001d94:	f7ff fd1a 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001d98:	20ed      	movs	r0, #237	; 0xed
 8001d9a:	f7ff fd07 	bl	80017ac <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001d9e:	2064      	movs	r0, #100	; 0x64
 8001da0:	f7ff fd14 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001da4:	2003      	movs	r0, #3
 8001da6:	f7ff fd11 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001daa:	2012      	movs	r0, #18
 8001dac:	f7ff fd0e 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001db0:	2081      	movs	r0, #129	; 0x81
 8001db2:	f7ff fd0b 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001db6:	20e8      	movs	r0, #232	; 0xe8
 8001db8:	f7ff fcf8 	bl	80017ac <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001dbc:	2085      	movs	r0, #133	; 0x85
 8001dbe:	f7ff fd05 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001dc2:	2010      	movs	r0, #16
 8001dc4:	f7ff fd02 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001dc8:	207a      	movs	r0, #122	; 0x7a
 8001dca:	f7ff fcff 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001dce:	20cb      	movs	r0, #203	; 0xcb
 8001dd0:	f7ff fcec 	bl	80017ac <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001dd4:	2039      	movs	r0, #57	; 0x39
 8001dd6:	f7ff fcf9 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001dda:	202c      	movs	r0, #44	; 0x2c
 8001ddc:	f7ff fcf6 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff fcf3 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001de6:	2034      	movs	r0, #52	; 0x34
 8001de8:	f7ff fcf0 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001dec:	2002      	movs	r0, #2
 8001dee:	f7ff fced 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001df2:	20f7      	movs	r0, #247	; 0xf7
 8001df4:	f7ff fcda 	bl	80017ac <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001df8:	2020      	movs	r0, #32
 8001dfa:	f7ff fce7 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001dfe:	20ea      	movs	r0, #234	; 0xea
 8001e00:	f7ff fcd4 	bl	80017ac <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7ff fce1 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7ff fcde 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001e10:	20c0      	movs	r0, #192	; 0xc0
 8001e12:	f7ff fccb 	bl	80017ac <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001e16:	201b      	movs	r0, #27
 8001e18:	f7ff fcd8 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001e1c:	20c1      	movs	r0, #193	; 0xc1
 8001e1e:	f7ff fcc5 	bl	80017ac <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001e22:	2001      	movs	r0, #1
 8001e24:	f7ff fcd2 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001e28:	20c5      	movs	r0, #197	; 0xc5
 8001e2a:	f7ff fcbf 	bl	80017ac <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001e2e:	2030      	movs	r0, #48	; 0x30
 8001e30:	f7ff fccc 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001e34:	2030      	movs	r0, #48	; 0x30
 8001e36:	f7ff fcc9 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001e3a:	20c7      	movs	r0, #199	; 0xc7
 8001e3c:	f7ff fcb6 	bl	80017ac <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001e40:	20b7      	movs	r0, #183	; 0xb7
 8001e42:	f7ff fcc3 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001e46:	2036      	movs	r0, #54	; 0x36
 8001e48:	f7ff fcb0 	bl	80017ac <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001e4c:	2008      	movs	r0, #8
 8001e4e:	f7ff fcbd 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001e52:	203a      	movs	r0, #58	; 0x3a
 8001e54:	f7ff fcaa 	bl	80017ac <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001e58:	2055      	movs	r0, #85	; 0x55
 8001e5a:	f7ff fcb7 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001e5e:	20b1      	movs	r0, #177	; 0xb1
 8001e60:	f7ff fca4 	bl	80017ac <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f7ff fcb1 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001e6a:	201a      	movs	r0, #26
 8001e6c:	f7ff fcae 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001e70:	20b6      	movs	r0, #182	; 0xb6
 8001e72:	f7ff fc9b 	bl	80017ac <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001e76:	200a      	movs	r0, #10
 8001e78:	f7ff fca8 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001e7c:	20a2      	movs	r0, #162	; 0xa2
 8001e7e:	f7ff fca5 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001e82:	20f2      	movs	r0, #242	; 0xf2
 8001e84:	f7ff fc92 	bl	80017ac <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f7ff fc9f 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001e8e:	2026      	movs	r0, #38	; 0x26
 8001e90:	f7ff fc8c 	bl	80017ac <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001e94:	2001      	movs	r0, #1
 8001e96:	f7ff fc99 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001e9a:	20e0      	movs	r0, #224	; 0xe0
 8001e9c:	f7ff fc86 	bl	80017ac <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001ea0:	200f      	movs	r0, #15
 8001ea2:	f7ff fc93 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001ea6:	202a      	movs	r0, #42	; 0x2a
 8001ea8:	f7ff fc90 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001eac:	2028      	movs	r0, #40	; 0x28
 8001eae:	f7ff fc8d 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001eb2:	2008      	movs	r0, #8
 8001eb4:	f7ff fc8a 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001eb8:	200e      	movs	r0, #14
 8001eba:	f7ff fc87 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001ebe:	2008      	movs	r0, #8
 8001ec0:	f7ff fc84 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001ec4:	2054      	movs	r0, #84	; 0x54
 8001ec6:	f7ff fc81 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001eca:	20a9      	movs	r0, #169	; 0xa9
 8001ecc:	f7ff fc7e 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001ed0:	2043      	movs	r0, #67	; 0x43
 8001ed2:	f7ff fc7b 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001ed6:	200a      	movs	r0, #10
 8001ed8:	f7ff fc78 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001edc:	200f      	movs	r0, #15
 8001ede:	f7ff fc75 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7ff fc72 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f7ff fc6f 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f7ff fc6c 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff fc69 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001efa:	20e1      	movs	r0, #225	; 0xe1
 8001efc:	f7ff fc56 	bl	80017ac <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7ff fc63 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001f06:	2015      	movs	r0, #21
 8001f08:	f7ff fc60 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001f0c:	2017      	movs	r0, #23
 8001f0e:	f7ff fc5d 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001f12:	2007      	movs	r0, #7
 8001f14:	f7ff fc5a 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001f18:	2011      	movs	r0, #17
 8001f1a:	f7ff fc57 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001f1e:	2006      	movs	r0, #6
 8001f20:	f7ff fc54 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001f24:	202b      	movs	r0, #43	; 0x2b
 8001f26:	f7ff fc51 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001f2a:	2056      	movs	r0, #86	; 0x56
 8001f2c:	f7ff fc4e 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001f30:	203c      	movs	r0, #60	; 0x3c
 8001f32:	f7ff fc4b 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001f36:	2005      	movs	r0, #5
 8001f38:	f7ff fc48 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001f3c:	2010      	movs	r0, #16
 8001f3e:	f7ff fc45 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001f42:	200f      	movs	r0, #15
 8001f44:	f7ff fc42 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001f48:	203f      	movs	r0, #63	; 0x3f
 8001f4a:	f7ff fc3f 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001f4e:	203f      	movs	r0, #63	; 0x3f
 8001f50:	f7ff fc3c 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001f54:	200f      	movs	r0, #15
 8001f56:	f7ff fc39 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001f5a:	202b      	movs	r0, #43	; 0x2b
 8001f5c:	f7ff fc26 	bl	80017ac <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f60:	2000      	movs	r0, #0
 8001f62:	f7ff fc33 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f7ff fc30 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f7ff fc2d 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001f72:	203f      	movs	r0, #63	; 0x3f
 8001f74:	f7ff fc2a 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001f78:	202a      	movs	r0, #42	; 0x2a
 8001f7a:	f7ff fc17 	bl	80017ac <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff fc24 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7ff fc21 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f7ff fc1e 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001f90:	20ef      	movs	r0, #239	; 0xef
 8001f92:	f7ff fc1b 	bl	80017cc <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001f96:	2011      	movs	r0, #17
 8001f98:	f7ff fc08 	bl	80017ac <LCD_WR_REG>
	HAL_Delay(120);
 8001f9c:	2078      	movs	r0, #120	; 0x78
 8001f9e:	f002 f96b 	bl	8004278 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001fa2:	2029      	movs	r0, #41	; 0x29
 8001fa4:	f7ff fc02 	bl	80017ac <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fae:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <lcd_init+0x2bc>)
 8001fb0:	f003 fc48 	bl	8005844 <HAL_GPIO_WritePin>
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40020800 	.word	0x40020800
 8001fbc:	20000210 	.word	0x20000210
 8001fc0:	40020000 	.word	0x40020000

08001fc4 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b08b      	sub	sp, #44	; 0x2c
 8001fc8:	af04      	add	r7, sp, #16
 8001fca:	60ba      	str	r2, [r7, #8]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4603      	mov	r3, r0
 8001fd0:	81fb      	strh	r3, [r7, #14]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	81bb      	strh	r3, [r7, #12]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001fda:	89fb      	ldrh	r3, [r7, #14]
 8001fdc:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001fe2:	e048      	b.n	8002076 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001fe4:	7dfb      	ldrb	r3, [r7, #23]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d145      	bne.n	8002076 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001fea:	89fa      	ldrh	r2, [r7, #14]
 8001fec:	4b26      	ldr	r3, [pc, #152]	; (8002088 <lcd_ShowStr+0xc4>)
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001ff6:	085b      	lsrs	r3, r3, #1
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	1acb      	subs	r3, r1, r3
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	dc3f      	bgt.n	8002080 <lcd_ShowStr+0xbc>
 8002000:	89ba      	ldrh	r2, [r7, #12]
 8002002:	4b21      	ldr	r3, [pc, #132]	; (8002088 <lcd_ShowStr+0xc4>)
 8002004:	885b      	ldrh	r3, [r3, #2]
 8002006:	4619      	mov	r1, r3
 8002008:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800200c:	1acb      	subs	r3, r1, r3
 800200e:	429a      	cmp	r2, r3
 8002010:	dc36      	bgt.n	8002080 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b80      	cmp	r3, #128	; 0x80
 8002018:	d902      	bls.n	8002020 <lcd_ShowStr+0x5c>
 800201a:	2301      	movs	r3, #1
 800201c:	75fb      	strb	r3, [r7, #23]
 800201e:	e02a      	b.n	8002076 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b0d      	cmp	r3, #13
 8002026:	d10b      	bne.n	8002040 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002028:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800202c:	b29a      	uxth	r2, r3
 800202e:	89bb      	ldrh	r3, [r7, #12]
 8002030:	4413      	add	r3, r2
 8002032:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002034:	8abb      	ldrh	r3, [r7, #20]
 8002036:	81fb      	strh	r3, [r7, #14]
					str++;
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	3301      	adds	r3, #1
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	e017      	b.n	8002070 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	781a      	ldrb	r2, [r3, #0]
 8002044:	88fc      	ldrh	r4, [r7, #6]
 8002046:	89b9      	ldrh	r1, [r7, #12]
 8002048:	89f8      	ldrh	r0, [r7, #14]
 800204a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800204e:	9302      	str	r3, [sp, #8]
 8002050:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002054:	9301      	str	r3, [sp, #4]
 8002056:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	4623      	mov	r3, r4
 800205c:	f7ff fc3c 	bl	80018d8 <lcd_ShowChar>
					x+=sizey/2;
 8002060:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002064:	085b      	lsrs	r3, r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	b29a      	uxth	r2, r3
 800206a:	89fb      	ldrh	r3, [r7, #14]
 800206c:	4413      	add	r3, r2
 800206e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	3301      	adds	r3, #1
 8002074:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1b2      	bne.n	8001fe4 <lcd_ShowStr+0x20>
 800207e:	e000      	b.n	8002082 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002080:	bf00      	nop
			}
		}
	}
}
 8002082:	371c      	adds	r7, #28
 8002084:	46bd      	mov	sp, r7
 8002086:	bd90      	pop	{r4, r7, pc}
 8002088:	20000210 	.word	0x20000210

0800208c <sys_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void sys_init(){
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
	lcd_init();
 8002090:	f7ff fe38 	bl	8001d04 <lcd_init>
	sensor_init();
 8002094:	f001 f9d4 	bl	8003440 <sensor_init>
	buzzer_init();
 8002098:	f7ff f874 	bl	8001184 <buzzer_init>
	button_init();
 800209c:	f7fe ffc2 	bl	8001024 <button_init>
	uart_init_rs232();
 80020a0:	f001 ff50 	bl	8003f44 <uart_init_rs232>
	init_box();
 80020a4:	f000 ffc4 	bl	8003030 <init_box>
	set_timer(0, READ_BUTTON_TIME);
 80020a8:	210a      	movs	r1, #10
 80020aa:	2000      	movs	r0, #0
 80020ac:	f001 fabc 	bl	8003628 <set_timer>
	set_timer(1, BLINKING_TIME);
 80020b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020b4:	2001      	movs	r0, #1
 80020b6:	f001 fab7 	bl	8003628 <set_timer>
	set_timer(2, INCREASE_TIME);
 80020ba:	21c8      	movs	r1, #200	; 0xc8
 80020bc:	2002      	movs	r0, #2
 80020be:	f001 fab3 	bl	8003628 <set_timer>
	set_timer(3, LCD_SENSOR_TIME);
 80020c2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80020c6:	2003      	movs	r0, #3
 80020c8:	f001 faae 	bl	8003628 <set_timer>
	set_timer(4, ONE_SECOND);
 80020cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020d0:	2004      	movs	r0, #4
 80020d2:	f001 faa9 	bl	8003628 <set_timer>
	//display_text();
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020e0:	f002 f858 	bl	8004194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020e4:	f000 f81c 	bl	8002120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e8:	f7ff f9e4 	bl	80014b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80020ec:	f7ff f86c 	bl	80011c8 <MX_DMA_Init>
  MX_SPI1_Init();
 80020f0:	f001 fb0e 	bl	8003710 <MX_SPI1_Init>
  MX_FSMC_Init();
 80020f4:	f7ff f90e 	bl	8001314 <MX_FSMC_Init>
  MX_I2C1_Init();
 80020f8:	f7ff fae2 	bl	80016c0 <MX_I2C1_Init>
  MX_TIM13_Init();
 80020fc:	f001 fe5e 	bl	8003dbc <MX_TIM13_Init>
  MX_TIM2_Init();
 8002100:	f001 fe10 	bl	8003d24 <MX_TIM2_Init>
  MX_ADC1_Init();
 8002104:	f7fe fe70 	bl	8000de8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002108:	f001 ff62 	bl	8003fd0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800210c:	4803      	ldr	r0, [pc, #12]	; (800211c <main+0x40>)
 800210e:	f005 fd0f 	bl	8007b30 <HAL_TIM_Base_Start_IT>
  sys_init();
 8002112:	f7ff ffbb 	bl	800208c <sys_init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  system_loop();
 8002116:	f001 fdeb 	bl	8003cf0 <system_loop>
 800211a:	e7fc      	b.n	8002116 <main+0x3a>
 800211c:	200002cc 	.word	0x200002cc

08002120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b094      	sub	sp, #80	; 0x50
 8002124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002126:	f107 0320 	add.w	r3, r7, #32
 800212a:	2230      	movs	r2, #48	; 0x30
 800212c:	2100      	movs	r1, #0
 800212e:	4618      	mov	r0, r3
 8002130:	f007 fe5a 	bl	8009de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	4b28      	ldr	r3, [pc, #160]	; (80021ec <SystemClock_Config+0xcc>)
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	4a27      	ldr	r2, [pc, #156]	; (80021ec <SystemClock_Config+0xcc>)
 800214e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002152:	6413      	str	r3, [r2, #64]	; 0x40
 8002154:	4b25      	ldr	r3, [pc, #148]	; (80021ec <SystemClock_Config+0xcc>)
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002160:	2300      	movs	r3, #0
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <SystemClock_Config+0xd0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a21      	ldr	r2, [pc, #132]	; (80021f0 <SystemClock_Config+0xd0>)
 800216a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4b1f      	ldr	r3, [pc, #124]	; (80021f0 <SystemClock_Config+0xd0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800217c:	2302      	movs	r3, #2
 800217e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002180:	2301      	movs	r3, #1
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002184:	2310      	movs	r3, #16
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002188:	2302      	movs	r3, #2
 800218a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800218c:	2300      	movs	r3, #0
 800218e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002190:	2308      	movs	r3, #8
 8002192:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002194:	23a8      	movs	r3, #168	; 0xa8
 8002196:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002198:	2302      	movs	r3, #2
 800219a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800219c:	2304      	movs	r3, #4
 800219e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021a0:	f107 0320 	add.w	r3, r7, #32
 80021a4:	4618      	mov	r0, r3
 80021a6:	f004 fb27 	bl	80067f8 <HAL_RCC_OscConfig>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021b0:	f000 f820 	bl	80021f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021b4:	230f      	movs	r3, #15
 80021b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021b8:	2302      	movs	r3, #2
 80021ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80021c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021cc:	f107 030c 	add.w	r3, r7, #12
 80021d0:	2105      	movs	r1, #5
 80021d2:	4618      	mov	r0, r3
 80021d4:	f004 fd88 	bl	8006ce8 <HAL_RCC_ClockConfig>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80021de:	f000 f809 	bl	80021f4 <Error_Handler>
  }
}
 80021e2:	bf00      	nop
 80021e4:	3750      	adds	r7, #80	; 0x50
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40007000 	.word	0x40007000

080021f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021f8:	b672      	cpsid	i
}
 80021fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021fc:	e7fe      	b.n	80021fc <Error_Handler+0x8>
	...

08002200 <alarm>:
/*
 * @brief:	alarm function when value of clock is equal to value of alarm
 * @para:	none
 * @retval:	none
 * */
void alarm(void) {
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af04      	add	r7, sp, #16
	if (ala_year == buf_year && ala_mon == buf_mon && ala_date == buf_date
 8002206:	4b24      	ldr	r3, [pc, #144]	; (8002298 <alarm+0x98>)
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	4b24      	ldr	r3, [pc, #144]	; (800229c <alarm+0x9c>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d12f      	bne.n	8002272 <alarm+0x72>
 8002212:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <alarm+0xa0>)
 8002214:	781a      	ldrb	r2, [r3, #0]
 8002216:	4b23      	ldr	r3, [pc, #140]	; (80022a4 <alarm+0xa4>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d129      	bne.n	8002272 <alarm+0x72>
 800221e:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <alarm+0xa8>)
 8002220:	781a      	ldrb	r2, [r3, #0]
 8002222:	4b22      	ldr	r3, [pc, #136]	; (80022ac <alarm+0xac>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d123      	bne.n	8002272 <alarm+0x72>
			&& ala_day == buf_day && ala_hour == buf_hour
 800222a:	4b21      	ldr	r3, [pc, #132]	; (80022b0 <alarm+0xb0>)
 800222c:	781a      	ldrb	r2, [r3, #0]
 800222e:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <alarm+0xb4>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d11d      	bne.n	8002272 <alarm+0x72>
 8002236:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <alarm+0xb8>)
 8002238:	781a      	ldrb	r2, [r3, #0]
 800223a:	4b20      	ldr	r3, [pc, #128]	; (80022bc <alarm+0xbc>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d117      	bne.n	8002272 <alarm+0x72>
			&& ala_min == buf_min) {
 8002242:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <alarm+0xc0>)
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <alarm+0xc4>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d111      	bne.n	8002272 <alarm+0x72>

		lcd_ShowStr(10, 200, "WAKE UP", WHITE, RED, 24, 0);
 800224e:	2300      	movs	r3, #0
 8002250:	9302      	str	r3, [sp, #8]
 8002252:	2318      	movs	r3, #24
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002260:	4a19      	ldr	r2, [pc, #100]	; (80022c8 <alarm+0xc8>)
 8002262:	21c8      	movs	r1, #200	; 0xc8
 8002264:	200a      	movs	r0, #10
 8002266:	f7ff fead 	bl	8001fc4 <lcd_ShowStr>
		buzzer_SetVolume(50);
 800226a:	2032      	movs	r0, #50	; 0x32
 800226c:	f7fe ff94 	bl	8001198 <buzzer_SetVolume>
 8002270:	e00f      	b.n	8002292 <alarm+0x92>
	}
	else{
		buzzer_SetVolume(0);
 8002272:	2000      	movs	r0, #0
 8002274:	f7fe ff90 	bl	8001198 <buzzer_SetVolume>
		lcd_ShowStr(10, 200, "WAKE UP", BLACK, BLACK, 24, 0);
 8002278:	2300      	movs	r3, #0
 800227a:	9302      	str	r3, [sp, #8]
 800227c:	2318      	movs	r3, #24
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	2300      	movs	r3, #0
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	2300      	movs	r3, #0
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <alarm+0xc8>)
 8002288:	21c8      	movs	r1, #200	; 0xc8
 800228a:	200a      	movs	r0, #10
 800228c:	f7ff fe9a 	bl	8001fc4 <lcd_ShowStr>
	}
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	2000000c 	.word	0x2000000c
 800229c:	20000006 	.word	0x20000006
 80022a0:	2000000b 	.word	0x2000000b
 80022a4:	20000005 	.word	0x20000005
 80022a8:	2000000a 	.word	0x2000000a
 80022ac:	20000004 	.word	0x20000004
 80022b0:	20000009 	.word	0x20000009
 80022b4:	20000003 	.word	0x20000003
 80022b8:	20000008 	.word	0x20000008
 80022bc:	20000002 	.word	0x20000002
 80022c0:	20000007 	.word	0x20000007
 80022c4:	20000001 	.word	0x20000001
 80022c8:	0800a708 	.word	0x0800a708

080022cc <fsm_clock>:
/*
 * @brief:	top-layer state machine of clock
 * @para:	none
 * @retval:	none
 * */
void fsm_clock(void) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
	switch (st_clock) {
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <fsm_clock+0x50>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d018      	beq.n	800230a <fsm_clock+0x3e>
 80022d8:	2b02      	cmp	r3, #2
 80022da:	dc1d      	bgt.n	8002318 <fsm_clock+0x4c>
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <fsm_clock+0x1a>
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d00b      	beq.n	80022fc <fsm_clock+0x30>
	case ALARM:
		fsm_alarm();
		display_mode();
		button0_fsm();
	}
}
 80022e4:	e018      	b.n	8002318 <fsm_clock+0x4c>
		update_clock();
 80022e6:	f000 fdad 	bl	8002e44 <update_clock>
		display_all_clock();
 80022ea:	f000 fdeb 	bl	8002ec4 <display_all_clock>
		display_mode();
 80022ee:	f000 fe25 	bl	8002f3c <display_mode>
		alarm();
 80022f2:	f7ff ff85 	bl	8002200 <alarm>
		button0_fsm();
 80022f6:	f000 fb61 	bl	80029bc <button0_fsm>
		break;
 80022fa:	e00d      	b.n	8002318 <fsm_clock+0x4c>
		fsm_changing();
 80022fc:	f000 f992 	bl	8002624 <fsm_changing>
		display_mode();
 8002300:	f000 fe1c 	bl	8002f3c <display_mode>
		button0_fsm();
 8002304:	f000 fb5a 	bl	80029bc <button0_fsm>
		break;
 8002308:	e006      	b.n	8002318 <fsm_clock+0x4c>
		fsm_alarm();
 800230a:	f000 f809 	bl	8002320 <fsm_alarm>
		display_mode();
 800230e:	f000 fe15 	bl	8002f3c <display_mode>
		button0_fsm();
 8002312:	f000 fb53 	bl	80029bc <button0_fsm>
}
 8002316:	e7ff      	b.n	8002318 <fsm_clock+0x4c>
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000216 	.word	0x20000216

08002320 <fsm_alarm>:
/*
 * @brief:	blinking number, changing buffer of alarm
 * @para:	none
 * @retval:	none
 * */
void fsm_alarm(void) {
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	switch (st_changing) {
 8002324:	4bb7      	ldr	r3, [pc, #732]	; (8002604 <fsm_alarm+0x2e4>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b06      	cmp	r3, #6
 800232a:	f200 8169 	bhi.w	8002600 <fsm_alarm+0x2e0>
 800232e:	a201      	add	r2, pc, #4	; (adr r2, 8002334 <fsm_alarm+0x14>)
 8002330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002334:	08002351 	.word	0x08002351
 8002338:	08002361 	.word	0x08002361
 800233c:	080023d1 	.word	0x080023d1
 8002340:	08002441 	.word	0x08002441
 8002344:	080024b1 	.word	0x080024b1
 8002348:	08002521 	.word	0x08002521
 800234c:	08002591 	.word	0x08002591
	case SECOND:
		// no set alarm on second
		dis_sec(1, 0);
 8002350:	2100      	movs	r1, #0
 8002352:	2001      	movs	r0, #1
 8002354:	f000 fea6 	bl	80030a4 <dis_sec>
		st_changing = MINUTE;
 8002358:	4baa      	ldr	r3, [pc, #680]	; (8002604 <fsm_alarm+0x2e4>)
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
		break;
 800235e:	e14f      	b.n	8002600 <fsm_alarm+0x2e0>
	case MINUTE:
		//blinking number
		switch (st_blinking) {
 8002360:	4ba9      	ldr	r3, [pc, #676]	; (8002608 <fsm_alarm+0x2e8>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <fsm_alarm+0x4e>
 8002368:	2b01      	cmp	r3, #1
 800236a:	d015      	beq.n	8002398 <fsm_alarm+0x78>
 800236c:	e02a      	b.n	80023c4 <fsm_alarm+0xa4>
		case ON:
			dis_min(ala_min, 1);
 800236e:	4ba7      	ldr	r3, [pc, #668]	; (800260c <fsm_alarm+0x2ec>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2101      	movs	r1, #1
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fed3 	bl	8003120 <dis_min>
			if (!is_timer_on(1)) {
 800237a:	2001      	movs	r0, #1
 800237c:	f001 f9b2 	bl	80036e4 <is_timer_on>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d11d      	bne.n	80023c2 <fsm_alarm+0xa2>
				st_blinking = OFF;
 8002386:	4ba0      	ldr	r3, [pc, #640]	; (8002608 <fsm_alarm+0x2e8>)
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800238c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002390:	2001      	movs	r0, #1
 8002392:	f001 f949 	bl	8003628 <set_timer>
			}
			break;
 8002396:	e014      	b.n	80023c2 <fsm_alarm+0xa2>
		case OFF:
			dis_min(ala_min, 0);
 8002398:	4b9c      	ldr	r3, [pc, #624]	; (800260c <fsm_alarm+0x2ec>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 febe 	bl	8003120 <dis_min>
			if (!is_timer_on(1)) {
 80023a4:	2001      	movs	r0, #1
 80023a6:	f001 f99d 	bl	80036e4 <is_timer_on>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d109      	bne.n	80023c4 <fsm_alarm+0xa4>
				st_blinking = ON;
 80023b0:	4b95      	ldr	r3, [pc, #596]	; (8002608 <fsm_alarm+0x2e8>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80023b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80023ba:	2001      	movs	r0, #1
 80023bc:	f001 f934 	bl	8003628 <set_timer>
 80023c0:	e000      	b.n	80023c4 <fsm_alarm+0xa4>
			break;
 80023c2:	bf00      	nop
			}
		}
		//set value
		button1_fsm(&ala_min);
 80023c4:	4891      	ldr	r0, [pc, #580]	; (800260c <fsm_alarm+0x2ec>)
 80023c6:	f000 fcdb 	bl	8002d80 <button1_fsm>
		button2_fsm();
 80023ca:	f000 fb4d 	bl	8002a68 <button2_fsm>
		break;
 80023ce:	e117      	b.n	8002600 <fsm_alarm+0x2e0>
	case HOUR:
		switch (st_blinking) {
 80023d0:	4b8d      	ldr	r3, [pc, #564]	; (8002608 <fsm_alarm+0x2e8>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <fsm_alarm+0xbe>
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d015      	beq.n	8002408 <fsm_alarm+0xe8>
 80023dc:	e02a      	b.n	8002434 <fsm_alarm+0x114>
		case ON:
			dis_hour(ala_hour, 1);
 80023de:	4b8c      	ldr	r3, [pc, #560]	; (8002610 <fsm_alarm+0x2f0>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2101      	movs	r1, #1
 80023e4:	4618      	mov	r0, r3
 80023e6:	f000 fed9 	bl	800319c <dis_hour>
			if (!is_timer_on(1)) {
 80023ea:	2001      	movs	r0, #1
 80023ec:	f001 f97a 	bl	80036e4 <is_timer_on>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d11d      	bne.n	8002432 <fsm_alarm+0x112>
				st_blinking = OFF;
 80023f6:	4b84      	ldr	r3, [pc, #528]	; (8002608 <fsm_alarm+0x2e8>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80023fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002400:	2001      	movs	r0, #1
 8002402:	f001 f911 	bl	8003628 <set_timer>
			}
			break;
 8002406:	e014      	b.n	8002432 <fsm_alarm+0x112>
		case OFF:
			dis_hour(ala_hour, 0);
 8002408:	4b81      	ldr	r3, [pc, #516]	; (8002610 <fsm_alarm+0x2f0>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f000 fec4 	bl	800319c <dis_hour>
			if (!is_timer_on(1)) {
 8002414:	2001      	movs	r0, #1
 8002416:	f001 f965 	bl	80036e4 <is_timer_on>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d109      	bne.n	8002434 <fsm_alarm+0x114>
				st_blinking = ON;
 8002420:	4b79      	ldr	r3, [pc, #484]	; (8002608 <fsm_alarm+0x2e8>)
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002426:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800242a:	2001      	movs	r0, #1
 800242c:	f001 f8fc 	bl	8003628 <set_timer>
 8002430:	e000      	b.n	8002434 <fsm_alarm+0x114>
			break;
 8002432:	bf00      	nop
			}
		}
		button1_fsm(&ala_hour);
 8002434:	4876      	ldr	r0, [pc, #472]	; (8002610 <fsm_alarm+0x2f0>)
 8002436:	f000 fca3 	bl	8002d80 <button1_fsm>
		button2_fsm();
 800243a:	f000 fb15 	bl	8002a68 <button2_fsm>
		break;
 800243e:	e0df      	b.n	8002600 <fsm_alarm+0x2e0>
	case DAY:
		switch (st_blinking) {
 8002440:	4b71      	ldr	r3, [pc, #452]	; (8002608 <fsm_alarm+0x2e8>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <fsm_alarm+0x12e>
 8002448:	2b01      	cmp	r3, #1
 800244a:	d015      	beq.n	8002478 <fsm_alarm+0x158>
 800244c:	e02a      	b.n	80024a4 <fsm_alarm+0x184>
		case ON:
			dis_day(ala_day, 1);
 800244e:	4b71      	ldr	r3, [pc, #452]	; (8002614 <fsm_alarm+0x2f4>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2101      	movs	r1, #1
 8002454:	4618      	mov	r0, r3
 8002456:	f000 fedf 	bl	8003218 <dis_day>
			if (!is_timer_on(1)) {
 800245a:	2001      	movs	r0, #1
 800245c:	f001 f942 	bl	80036e4 <is_timer_on>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d11d      	bne.n	80024a2 <fsm_alarm+0x182>
				st_blinking = OFF;
 8002466:	4b68      	ldr	r3, [pc, #416]	; (8002608 <fsm_alarm+0x2e8>)
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800246c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002470:	2001      	movs	r0, #1
 8002472:	f001 f8d9 	bl	8003628 <set_timer>
			}
			break;
 8002476:	e014      	b.n	80024a2 <fsm_alarm+0x182>
		case OFF:
			dis_day(ala_day, 0);
 8002478:	4b66      	ldr	r3, [pc, #408]	; (8002614 <fsm_alarm+0x2f4>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f000 feca 	bl	8003218 <dis_day>
			if (!is_timer_on(1)) {
 8002484:	2001      	movs	r0, #1
 8002486:	f001 f92d 	bl	80036e4 <is_timer_on>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d109      	bne.n	80024a4 <fsm_alarm+0x184>
				st_blinking = ON;
 8002490:	4b5d      	ldr	r3, [pc, #372]	; (8002608 <fsm_alarm+0x2e8>)
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002496:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800249a:	2001      	movs	r0, #1
 800249c:	f001 f8c4 	bl	8003628 <set_timer>
 80024a0:	e000      	b.n	80024a4 <fsm_alarm+0x184>
			break;
 80024a2:	bf00      	nop
			}
		}
		button1_fsm(&ala_day);
 80024a4:	485b      	ldr	r0, [pc, #364]	; (8002614 <fsm_alarm+0x2f4>)
 80024a6:	f000 fc6b 	bl	8002d80 <button1_fsm>
		button2_fsm();
 80024aa:	f000 fadd 	bl	8002a68 <button2_fsm>
		break;
 80024ae:	e0a7      	b.n	8002600 <fsm_alarm+0x2e0>
	case DATE:
		switch (st_blinking) {
 80024b0:	4b55      	ldr	r3, [pc, #340]	; (8002608 <fsm_alarm+0x2e8>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <fsm_alarm+0x19e>
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d015      	beq.n	80024e8 <fsm_alarm+0x1c8>
 80024bc:	e02a      	b.n	8002514 <fsm_alarm+0x1f4>
		case ON:
			dis_date(ala_date, 1);
 80024be:	4b56      	ldr	r3, [pc, #344]	; (8002618 <fsm_alarm+0x2f8>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2101      	movs	r1, #1
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 ff01 	bl	80032cc <dis_date>
			if (!is_timer_on(1)) {
 80024ca:	2001      	movs	r0, #1
 80024cc:	f001 f90a 	bl	80036e4 <is_timer_on>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d11d      	bne.n	8002512 <fsm_alarm+0x1f2>
				st_blinking = OFF;
 80024d6:	4b4c      	ldr	r3, [pc, #304]	; (8002608 <fsm_alarm+0x2e8>)
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80024dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024e0:	2001      	movs	r0, #1
 80024e2:	f001 f8a1 	bl	8003628 <set_timer>
			}
			break;
 80024e6:	e014      	b.n	8002512 <fsm_alarm+0x1f2>
		case OFF:
			dis_date(ala_date, 0);
 80024e8:	4b4b      	ldr	r3, [pc, #300]	; (8002618 <fsm_alarm+0x2f8>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 feec 	bl	80032cc <dis_date>
			if (!is_timer_on(1)) {
 80024f4:	2001      	movs	r0, #1
 80024f6:	f001 f8f5 	bl	80036e4 <is_timer_on>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d109      	bne.n	8002514 <fsm_alarm+0x1f4>
				st_blinking = ON;
 8002500:	4b41      	ldr	r3, [pc, #260]	; (8002608 <fsm_alarm+0x2e8>)
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002506:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800250a:	2001      	movs	r0, #1
 800250c:	f001 f88c 	bl	8003628 <set_timer>
 8002510:	e000      	b.n	8002514 <fsm_alarm+0x1f4>
			break;
 8002512:	bf00      	nop
			}
		}
		button1_fsm(&ala_date);
 8002514:	4840      	ldr	r0, [pc, #256]	; (8002618 <fsm_alarm+0x2f8>)
 8002516:	f000 fc33 	bl	8002d80 <button1_fsm>
		button2_fsm();
 800251a:	f000 faa5 	bl	8002a68 <button2_fsm>
		break;
 800251e:	e06f      	b.n	8002600 <fsm_alarm+0x2e0>
	case MONTH:
		switch (st_blinking) {
 8002520:	4b39      	ldr	r3, [pc, #228]	; (8002608 <fsm_alarm+0x2e8>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <fsm_alarm+0x20e>
 8002528:	2b01      	cmp	r3, #1
 800252a:	d015      	beq.n	8002558 <fsm_alarm+0x238>
 800252c:	e02a      	b.n	8002584 <fsm_alarm+0x264>
		case ON:
			dis_month(ala_mon, 1);
 800252e:	4b3b      	ldr	r3, [pc, #236]	; (800261c <fsm_alarm+0x2fc>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2101      	movs	r1, #1
 8002534:	4618      	mov	r0, r3
 8002536:	f000 ff07 	bl	8003348 <dis_month>
			if (!is_timer_on(1)) {
 800253a:	2001      	movs	r0, #1
 800253c:	f001 f8d2 	bl	80036e4 <is_timer_on>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d11d      	bne.n	8002582 <fsm_alarm+0x262>
				st_blinking = OFF;
 8002546:	4b30      	ldr	r3, [pc, #192]	; (8002608 <fsm_alarm+0x2e8>)
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800254c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002550:	2001      	movs	r0, #1
 8002552:	f001 f869 	bl	8003628 <set_timer>
			}
			break;
 8002556:	e014      	b.n	8002582 <fsm_alarm+0x262>
		case OFF:
			dis_month(ala_mon, 0);
 8002558:	4b30      	ldr	r3, [pc, #192]	; (800261c <fsm_alarm+0x2fc>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2100      	movs	r1, #0
 800255e:	4618      	mov	r0, r3
 8002560:	f000 fef2 	bl	8003348 <dis_month>
			if (!is_timer_on(1)) {
 8002564:	2001      	movs	r0, #1
 8002566:	f001 f8bd 	bl	80036e4 <is_timer_on>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d109      	bne.n	8002584 <fsm_alarm+0x264>
				st_blinking = ON;
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <fsm_alarm+0x2e8>)
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002576:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800257a:	2001      	movs	r0, #1
 800257c:	f001 f854 	bl	8003628 <set_timer>
 8002580:	e000      	b.n	8002584 <fsm_alarm+0x264>
			break;
 8002582:	bf00      	nop
			}
		}
		button1_fsm(&ala_mon);
 8002584:	4825      	ldr	r0, [pc, #148]	; (800261c <fsm_alarm+0x2fc>)
 8002586:	f000 fbfb 	bl	8002d80 <button1_fsm>
		button2_fsm();
 800258a:	f000 fa6d 	bl	8002a68 <button2_fsm>
		break;
 800258e:	e037      	b.n	8002600 <fsm_alarm+0x2e0>
	case YEAR:
		switch (st_blinking) {
 8002590:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <fsm_alarm+0x2e8>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <fsm_alarm+0x27e>
 8002598:	2b01      	cmp	r3, #1
 800259a:	d015      	beq.n	80025c8 <fsm_alarm+0x2a8>
 800259c:	e02a      	b.n	80025f4 <fsm_alarm+0x2d4>
		case ON:
			dis_year(ala_year, 1);
 800259e:	4b20      	ldr	r3, [pc, #128]	; (8002620 <fsm_alarm+0x300>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2101      	movs	r1, #1
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 ff0d 	bl	80033c4 <dis_year>
			if (!is_timer_on(1)) {
 80025aa:	2001      	movs	r0, #1
 80025ac:	f001 f89a 	bl	80036e4 <is_timer_on>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d11d      	bne.n	80025f2 <fsm_alarm+0x2d2>
				st_blinking = OFF;
 80025b6:	4b14      	ldr	r3, [pc, #80]	; (8002608 <fsm_alarm+0x2e8>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80025bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025c0:	2001      	movs	r0, #1
 80025c2:	f001 f831 	bl	8003628 <set_timer>
			}
			break;
 80025c6:	e014      	b.n	80025f2 <fsm_alarm+0x2d2>
		case OFF:
			dis_year(ala_year, 0);
 80025c8:	4b15      	ldr	r3, [pc, #84]	; (8002620 <fsm_alarm+0x300>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fef8 	bl	80033c4 <dis_year>
			if (!is_timer_on(1)) {
 80025d4:	2001      	movs	r0, #1
 80025d6:	f001 f885 	bl	80036e4 <is_timer_on>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d109      	bne.n	80025f4 <fsm_alarm+0x2d4>
				st_blinking = ON;
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <fsm_alarm+0x2e8>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80025e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025ea:	2001      	movs	r0, #1
 80025ec:	f001 f81c 	bl	8003628 <set_timer>
 80025f0:	e000      	b.n	80025f4 <fsm_alarm+0x2d4>
			break;
 80025f2:	bf00      	nop
			}
		}
		button1_fsm(&ala_year);
 80025f4:	480a      	ldr	r0, [pc, #40]	; (8002620 <fsm_alarm+0x300>)
 80025f6:	f000 fbc3 	bl	8002d80 <button1_fsm>
		button2_fsm();
 80025fa:	f000 fa35 	bl	8002a68 <button2_fsm>
	}
}
 80025fe:	e7ff      	b.n	8002600 <fsm_alarm+0x2e0>
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}
 8002604:	2000021b 	.word	0x2000021b
 8002608:	2000021c 	.word	0x2000021c
 800260c:	20000007 	.word	0x20000007
 8002610:	20000008 	.word	0x20000008
 8002614:	20000009 	.word	0x20000009
 8002618:	2000000a 	.word	0x2000000a
 800261c:	2000000b 	.word	0x2000000b
 8002620:	2000000c 	.word	0x2000000c

08002624 <fsm_changing>:
/*
 * @brief:	blinking number, changing buffer of clock
 * @para:	none
 * @retval:	none
 * */
void fsm_changing(void) {
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
	switch (st_changing) {
 8002628:	4bb6      	ldr	r3, [pc, #728]	; (8002904 <fsm_changing+0x2e0>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b06      	cmp	r3, #6
 800262e:	f200 81aa 	bhi.w	8002986 <fsm_changing+0x362>
 8002632:	a201      	add	r2, pc, #4	; (adr r2, 8002638 <fsm_changing+0x14>)
 8002634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002638:	08002655 	.word	0x08002655
 800263c:	080026c5 	.word	0x080026c5
 8002640:	08002735 	.word	0x08002735
 8002644:	080027a5 	.word	0x080027a5
 8002648:	08002815 	.word	0x08002815
 800264c:	08002885 	.word	0x08002885
 8002650:	080028f5 	.word	0x080028f5
	case SECOND:
		//blinking number
		switch (st_blinking) {
 8002654:	4bac      	ldr	r3, [pc, #688]	; (8002908 <fsm_changing+0x2e4>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <fsm_changing+0x3e>
 800265c:	2b01      	cmp	r3, #1
 800265e:	d015      	beq.n	800268c <fsm_changing+0x68>
 8002660:	e02a      	b.n	80026b8 <fsm_changing+0x94>
		case ON:
			dis_sec(buf_sec, 1);
 8002662:	4baa      	ldr	r3, [pc, #680]	; (800290c <fsm_changing+0x2e8>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2101      	movs	r1, #1
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fd1b 	bl	80030a4 <dis_sec>
			if (!is_timer_on(1)) {
 800266e:	2001      	movs	r0, #1
 8002670:	f001 f838 	bl	80036e4 <is_timer_on>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d11d      	bne.n	80026b6 <fsm_changing+0x92>
				st_blinking = OFF;
 800267a:	4ba3      	ldr	r3, [pc, #652]	; (8002908 <fsm_changing+0x2e4>)
 800267c:	2201      	movs	r2, #1
 800267e:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002680:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002684:	2001      	movs	r0, #1
 8002686:	f000 ffcf 	bl	8003628 <set_timer>
			}
			break;
 800268a:	e014      	b.n	80026b6 <fsm_changing+0x92>
		case OFF:
			dis_sec(buf_sec, 0);
 800268c:	4b9f      	ldr	r3, [pc, #636]	; (800290c <fsm_changing+0x2e8>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fd06 	bl	80030a4 <dis_sec>
			if (!is_timer_on(1)) {
 8002698:	2001      	movs	r0, #1
 800269a:	f001 f823 	bl	80036e4 <is_timer_on>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d109      	bne.n	80026b8 <fsm_changing+0x94>
				st_blinking = ON;
 80026a4:	4b98      	ldr	r3, [pc, #608]	; (8002908 <fsm_changing+0x2e4>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80026aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026ae:	2001      	movs	r0, #1
 80026b0:	f000 ffba 	bl	8003628 <set_timer>
 80026b4:	e000      	b.n	80026b8 <fsm_changing+0x94>
			break;
 80026b6:	bf00      	nop
			}
		}
		button1_fsm(&buf_sec);
 80026b8:	4894      	ldr	r0, [pc, #592]	; (800290c <fsm_changing+0x2e8>)
 80026ba:	f000 fb61 	bl	8002d80 <button1_fsm>
		button2_fsm();
 80026be:	f000 f9d3 	bl	8002a68 <button2_fsm>
		break;
 80026c2:	e160      	b.n	8002986 <fsm_changing+0x362>
	case MINUTE:
		switch (st_blinking) {
 80026c4:	4b90      	ldr	r3, [pc, #576]	; (8002908 <fsm_changing+0x2e4>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <fsm_changing+0xae>
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d015      	beq.n	80026fc <fsm_changing+0xd8>
 80026d0:	e02a      	b.n	8002728 <fsm_changing+0x104>
		case ON:
			dis_min(buf_min, 1);
 80026d2:	4b8f      	ldr	r3, [pc, #572]	; (8002910 <fsm_changing+0x2ec>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2101      	movs	r1, #1
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fd21 	bl	8003120 <dis_min>
			if (!is_timer_on(1)) {
 80026de:	2001      	movs	r0, #1
 80026e0:	f001 f800 	bl	80036e4 <is_timer_on>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d11d      	bne.n	8002726 <fsm_changing+0x102>
				st_blinking = OFF;
 80026ea:	4b87      	ldr	r3, [pc, #540]	; (8002908 <fsm_changing+0x2e4>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80026f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026f4:	2001      	movs	r0, #1
 80026f6:	f000 ff97 	bl	8003628 <set_timer>
			}
			break;
 80026fa:	e014      	b.n	8002726 <fsm_changing+0x102>
		case OFF:
			dis_min(buf_min, 0);
 80026fc:	4b84      	ldr	r3, [pc, #528]	; (8002910 <fsm_changing+0x2ec>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2100      	movs	r1, #0
 8002702:	4618      	mov	r0, r3
 8002704:	f000 fd0c 	bl	8003120 <dis_min>
			if (!is_timer_on(1)) {
 8002708:	2001      	movs	r0, #1
 800270a:	f000 ffeb 	bl	80036e4 <is_timer_on>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d109      	bne.n	8002728 <fsm_changing+0x104>
				st_blinking = ON;
 8002714:	4b7c      	ldr	r3, [pc, #496]	; (8002908 <fsm_changing+0x2e4>)
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800271a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800271e:	2001      	movs	r0, #1
 8002720:	f000 ff82 	bl	8003628 <set_timer>
 8002724:	e000      	b.n	8002728 <fsm_changing+0x104>
			break;
 8002726:	bf00      	nop
			}
		}
		button1_fsm(&buf_min);
 8002728:	4879      	ldr	r0, [pc, #484]	; (8002910 <fsm_changing+0x2ec>)
 800272a:	f000 fb29 	bl	8002d80 <button1_fsm>
		button2_fsm();
 800272e:	f000 f99b 	bl	8002a68 <button2_fsm>
		break;
 8002732:	e128      	b.n	8002986 <fsm_changing+0x362>
	case HOUR:
		switch (st_blinking) {
 8002734:	4b74      	ldr	r3, [pc, #464]	; (8002908 <fsm_changing+0x2e4>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <fsm_changing+0x11e>
 800273c:	2b01      	cmp	r3, #1
 800273e:	d015      	beq.n	800276c <fsm_changing+0x148>
 8002740:	e02a      	b.n	8002798 <fsm_changing+0x174>
		case ON:
			dis_hour(buf_hour, 1);
 8002742:	4b74      	ldr	r3, [pc, #464]	; (8002914 <fsm_changing+0x2f0>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2101      	movs	r1, #1
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fd27 	bl	800319c <dis_hour>
			if (!is_timer_on(1)) {
 800274e:	2001      	movs	r0, #1
 8002750:	f000 ffc8 	bl	80036e4 <is_timer_on>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d11d      	bne.n	8002796 <fsm_changing+0x172>
				st_blinking = OFF;
 800275a:	4b6b      	ldr	r3, [pc, #428]	; (8002908 <fsm_changing+0x2e4>)
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002760:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002764:	2001      	movs	r0, #1
 8002766:	f000 ff5f 	bl	8003628 <set_timer>
			}
			break;
 800276a:	e014      	b.n	8002796 <fsm_changing+0x172>
		case OFF:
			dis_hour(buf_hour, 0);
 800276c:	4b69      	ldr	r3, [pc, #420]	; (8002914 <fsm_changing+0x2f0>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2100      	movs	r1, #0
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fd12 	bl	800319c <dis_hour>
			if (!is_timer_on(1)) {
 8002778:	2001      	movs	r0, #1
 800277a:	f000 ffb3 	bl	80036e4 <is_timer_on>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d109      	bne.n	8002798 <fsm_changing+0x174>
				st_blinking = ON;
 8002784:	4b60      	ldr	r3, [pc, #384]	; (8002908 <fsm_changing+0x2e4>)
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800278a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800278e:	2001      	movs	r0, #1
 8002790:	f000 ff4a 	bl	8003628 <set_timer>
 8002794:	e000      	b.n	8002798 <fsm_changing+0x174>
			break;
 8002796:	bf00      	nop
			}
		}
		button1_fsm(&buf_hour);
 8002798:	485e      	ldr	r0, [pc, #376]	; (8002914 <fsm_changing+0x2f0>)
 800279a:	f000 faf1 	bl	8002d80 <button1_fsm>
		button2_fsm();
 800279e:	f000 f963 	bl	8002a68 <button2_fsm>
		break;
 80027a2:	e0f0      	b.n	8002986 <fsm_changing+0x362>
	case DAY:
		switch (st_blinking) {
 80027a4:	4b58      	ldr	r3, [pc, #352]	; (8002908 <fsm_changing+0x2e4>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <fsm_changing+0x18e>
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d015      	beq.n	80027dc <fsm_changing+0x1b8>
 80027b0:	e02a      	b.n	8002808 <fsm_changing+0x1e4>
		case ON:
			dis_day(buf_day, 1);
 80027b2:	4b59      	ldr	r3, [pc, #356]	; (8002918 <fsm_changing+0x2f4>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2101      	movs	r1, #1
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fd2d 	bl	8003218 <dis_day>
			if (!is_timer_on(1)) {
 80027be:	2001      	movs	r0, #1
 80027c0:	f000 ff90 	bl	80036e4 <is_timer_on>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d11d      	bne.n	8002806 <fsm_changing+0x1e2>
				st_blinking = OFF;
 80027ca:	4b4f      	ldr	r3, [pc, #316]	; (8002908 <fsm_changing+0x2e4>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80027d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027d4:	2001      	movs	r0, #1
 80027d6:	f000 ff27 	bl	8003628 <set_timer>
			}
			break;
 80027da:	e014      	b.n	8002806 <fsm_changing+0x1e2>
		case OFF:
			dis_day(buf_day, 0);
 80027dc:	4b4e      	ldr	r3, [pc, #312]	; (8002918 <fsm_changing+0x2f4>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2100      	movs	r1, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fd18 	bl	8003218 <dis_day>
			if (!is_timer_on(1)) {
 80027e8:	2001      	movs	r0, #1
 80027ea:	f000 ff7b 	bl	80036e4 <is_timer_on>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d109      	bne.n	8002808 <fsm_changing+0x1e4>
				st_blinking = ON;
 80027f4:	4b44      	ldr	r3, [pc, #272]	; (8002908 <fsm_changing+0x2e4>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80027fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027fe:	2001      	movs	r0, #1
 8002800:	f000 ff12 	bl	8003628 <set_timer>
 8002804:	e000      	b.n	8002808 <fsm_changing+0x1e4>
			break;
 8002806:	bf00      	nop
			}
		}
		button1_fsm(&buf_day);
 8002808:	4843      	ldr	r0, [pc, #268]	; (8002918 <fsm_changing+0x2f4>)
 800280a:	f000 fab9 	bl	8002d80 <button1_fsm>
		button2_fsm();
 800280e:	f000 f92b 	bl	8002a68 <button2_fsm>
		break;
 8002812:	e0b8      	b.n	8002986 <fsm_changing+0x362>
	case DATE:
		switch (st_blinking) {
 8002814:	4b3c      	ldr	r3, [pc, #240]	; (8002908 <fsm_changing+0x2e4>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <fsm_changing+0x1fe>
 800281c:	2b01      	cmp	r3, #1
 800281e:	d015      	beq.n	800284c <fsm_changing+0x228>
 8002820:	e02a      	b.n	8002878 <fsm_changing+0x254>
		case ON:
			dis_date(buf_date, 1);
 8002822:	4b3e      	ldr	r3, [pc, #248]	; (800291c <fsm_changing+0x2f8>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2101      	movs	r1, #1
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fd4f 	bl	80032cc <dis_date>
			if (!is_timer_on(1)) {
 800282e:	2001      	movs	r0, #1
 8002830:	f000 ff58 	bl	80036e4 <is_timer_on>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d11d      	bne.n	8002876 <fsm_changing+0x252>
				st_blinking = OFF;
 800283a:	4b33      	ldr	r3, [pc, #204]	; (8002908 <fsm_changing+0x2e4>)
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002840:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002844:	2001      	movs	r0, #1
 8002846:	f000 feef 	bl	8003628 <set_timer>
			}
			break;
 800284a:	e014      	b.n	8002876 <fsm_changing+0x252>
		case OFF:
			dis_date(buf_date, 0);
 800284c:	4b33      	ldr	r3, [pc, #204]	; (800291c <fsm_changing+0x2f8>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fd3a 	bl	80032cc <dis_date>
			if (!is_timer_on(1)) {
 8002858:	2001      	movs	r0, #1
 800285a:	f000 ff43 	bl	80036e4 <is_timer_on>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d109      	bne.n	8002878 <fsm_changing+0x254>
				st_blinking = ON;
 8002864:	4b28      	ldr	r3, [pc, #160]	; (8002908 <fsm_changing+0x2e4>)
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800286a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800286e:	2001      	movs	r0, #1
 8002870:	f000 feda 	bl	8003628 <set_timer>
 8002874:	e000      	b.n	8002878 <fsm_changing+0x254>
			break;
 8002876:	bf00      	nop
			}
		}
		button1_fsm(&buf_date);
 8002878:	4828      	ldr	r0, [pc, #160]	; (800291c <fsm_changing+0x2f8>)
 800287a:	f000 fa81 	bl	8002d80 <button1_fsm>
		button2_fsm();
 800287e:	f000 f8f3 	bl	8002a68 <button2_fsm>
		break;
 8002882:	e080      	b.n	8002986 <fsm_changing+0x362>
	case MONTH:
		switch (st_blinking) {
 8002884:	4b20      	ldr	r3, [pc, #128]	; (8002908 <fsm_changing+0x2e4>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <fsm_changing+0x26e>
 800288c:	2b01      	cmp	r3, #1
 800288e:	d015      	beq.n	80028bc <fsm_changing+0x298>
 8002890:	e02a      	b.n	80028e8 <fsm_changing+0x2c4>
		case ON:
			dis_month(buf_mon, 1);
 8002892:	4b23      	ldr	r3, [pc, #140]	; (8002920 <fsm_changing+0x2fc>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2101      	movs	r1, #1
 8002898:	4618      	mov	r0, r3
 800289a:	f000 fd55 	bl	8003348 <dis_month>
			if (!is_timer_on(1)) {
 800289e:	2001      	movs	r0, #1
 80028a0:	f000 ff20 	bl	80036e4 <is_timer_on>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d11d      	bne.n	80028e6 <fsm_changing+0x2c2>
				st_blinking = OFF;
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <fsm_changing+0x2e4>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80028b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028b4:	2001      	movs	r0, #1
 80028b6:	f000 feb7 	bl	8003628 <set_timer>
			}
			break;
 80028ba:	e014      	b.n	80028e6 <fsm_changing+0x2c2>
		case OFF:
			dis_month(buf_mon, 0);
 80028bc:	4b18      	ldr	r3, [pc, #96]	; (8002920 <fsm_changing+0x2fc>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2100      	movs	r1, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 fd40 	bl	8003348 <dis_month>
			if (!is_timer_on(1)) {
 80028c8:	2001      	movs	r0, #1
 80028ca:	f000 ff0b 	bl	80036e4 <is_timer_on>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d109      	bne.n	80028e8 <fsm_changing+0x2c4>
				st_blinking = ON;
 80028d4:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <fsm_changing+0x2e4>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 80028da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028de:	2001      	movs	r0, #1
 80028e0:	f000 fea2 	bl	8003628 <set_timer>
 80028e4:	e000      	b.n	80028e8 <fsm_changing+0x2c4>
			break;
 80028e6:	bf00      	nop
			}
		}
		button1_fsm(&buf_mon);
 80028e8:	480d      	ldr	r0, [pc, #52]	; (8002920 <fsm_changing+0x2fc>)
 80028ea:	f000 fa49 	bl	8002d80 <button1_fsm>
		button2_fsm();
 80028ee:	f000 f8bb 	bl	8002a68 <button2_fsm>
		break;
 80028f2:	e048      	b.n	8002986 <fsm_changing+0x362>
	case YEAR:
		switch (st_blinking) {
 80028f4:	4b04      	ldr	r3, [pc, #16]	; (8002908 <fsm_changing+0x2e4>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d013      	beq.n	8002924 <fsm_changing+0x300>
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d026      	beq.n	800294e <fsm_changing+0x32a>
 8002900:	e03b      	b.n	800297a <fsm_changing+0x356>
 8002902:	bf00      	nop
 8002904:	2000021b 	.word	0x2000021b
 8002908:	2000021c 	.word	0x2000021c
 800290c:	20000000 	.word	0x20000000
 8002910:	20000001 	.word	0x20000001
 8002914:	20000002 	.word	0x20000002
 8002918:	20000003 	.word	0x20000003
 800291c:	20000004 	.word	0x20000004
 8002920:	20000005 	.word	0x20000005
		case ON:
			dis_year(buf_year, 1);
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <fsm_changing+0x368>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2101      	movs	r1, #1
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fd4a 	bl	80033c4 <dis_year>
			if (!is_timer_on(1)) {
 8002930:	2001      	movs	r0, #1
 8002932:	f000 fed7 	bl	80036e4 <is_timer_on>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d11d      	bne.n	8002978 <fsm_changing+0x354>
				st_blinking = OFF;
 800293c:	4b14      	ldr	r3, [pc, #80]	; (8002990 <fsm_changing+0x36c>)
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 8002942:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002946:	2001      	movs	r0, #1
 8002948:	f000 fe6e 	bl	8003628 <set_timer>
			}
			break;
 800294c:	e014      	b.n	8002978 <fsm_changing+0x354>
		case OFF:
			dis_year(buf_year, 0);
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <fsm_changing+0x368>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fd35 	bl	80033c4 <dis_year>
			if (!is_timer_on(1)) {
 800295a:	2001      	movs	r0, #1
 800295c:	f000 fec2 	bl	80036e4 <is_timer_on>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <fsm_changing+0x356>
				st_blinking = ON;
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <fsm_changing+0x36c>)
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
				set_timer(1, BLINKING_TIME);
 800296c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002970:	2001      	movs	r0, #1
 8002972:	f000 fe59 	bl	8003628 <set_timer>
 8002976:	e000      	b.n	800297a <fsm_changing+0x356>
			break;
 8002978:	bf00      	nop
			}
		}
		button1_fsm(&buf_year);
 800297a:	4804      	ldr	r0, [pc, #16]	; (800298c <fsm_changing+0x368>)
 800297c:	f000 fa00 	bl	8002d80 <button1_fsm>
		button2_fsm();
 8002980:	f000 f872 	bl	8002a68 <button2_fsm>
	}
}
 8002984:	e7ff      	b.n	8002986 <fsm_changing+0x362>
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000006 	.word	0x20000006
 8002990:	2000021c 	.word	0x2000021c

08002994 <reset_str>:
/*
 * @brief:	reset the string when transitioning mode
 * @para:	none
 * @retval:	none
 * */
void reset_str(void){
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af04      	add	r7, sp, #16
	lcd_ShowStr(20, 30, "MODE: CHANGE TIME", BLACK, BLACK, 24, 0);
 800299a:	2300      	movs	r3, #0
 800299c:	9302      	str	r3, [sp, #8]
 800299e:	2318      	movs	r3, #24
 80029a0:	9301      	str	r3, [sp, #4]
 80029a2:	2300      	movs	r3, #0
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	2300      	movs	r3, #0
 80029a8:	4a03      	ldr	r2, [pc, #12]	; (80029b8 <reset_str+0x24>)
 80029aa:	211e      	movs	r1, #30
 80029ac:	2014      	movs	r0, #20
 80029ae:	f7ff fb09 	bl	8001fc4 <lcd_ShowStr>
}
 80029b2:	bf00      	nop
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	0800a710 	.word	0x0800a710

080029bc <button0_fsm>:
 * @brief:	mode button fsm - 2 states
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button0_fsm(void) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
	switch (button_st[0]) {
 80029c0:	4b26      	ldr	r3, [pc, #152]	; (8002a5c <button0_fsm+0xa0>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <button0_fsm+0x12>
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d034      	beq.n	8002a36 <button0_fsm+0x7a>
 80029cc:	e03f      	b.n	8002a4e <button0_fsm+0x92>
	case release:
		if (is_button_pressed(0) == 1) {
 80029ce:	2000      	movs	r0, #0
 80029d0:	f7fe fba0 	bl	8001114 <is_button_pressed>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d125      	bne.n	8002a26 <button0_fsm+0x6a>
			// to do
			switch (st_clock) {
 80029da:	4b21      	ldr	r3, [pc, #132]	; (8002a60 <button0_fsm+0xa4>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d018      	beq.n	8002a14 <button0_fsm+0x58>
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	dc19      	bgt.n	8002a1a <button0_fsm+0x5e>
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <button0_fsm+0x34>
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d009      	beq.n	8002a02 <button0_fsm+0x46>
 80029ee:	e014      	b.n	8002a1a <button0_fsm+0x5e>
			case DISPLAY:
				display_all_clock();
 80029f0:	f000 fa68 	bl	8002ec4 <display_all_clock>
				st_clock = CHANGE_TIME;
 80029f4:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <button0_fsm+0xa4>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
				st_changing = SECOND;
 80029fa:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <button0_fsm+0xa8>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
				break;
 8002a00:	e00b      	b.n	8002a1a <button0_fsm+0x5e>
			case CHANGE_TIME:
				display_all_alarm();
 8002a02:	f000 fae1 	bl	8002fc8 <display_all_alarm>
				st_changing = SECOND;
 8002a06:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <button0_fsm+0xa8>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
				st_clock = ALARM;
 8002a0c:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <button0_fsm+0xa4>)
 8002a0e:	2202      	movs	r2, #2
 8002a10:	701a      	strb	r2, [r3, #0]
				break;
 8002a12:	e002      	b.n	8002a1a <button0_fsm+0x5e>
			case ALARM:
				st_clock = DISPLAY;
 8002a14:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <button0_fsm+0xa4>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
			}
			reset_str();
 8002a1a:	f7ff ffbb 	bl	8002994 <reset_str>
			button_st[0] = pressed;
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <button0_fsm+0xa0>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]
		} else if (is_button_pressed(0) == ERROR)
			return 0;
		break;
 8002a24:	e015      	b.n	8002a52 <button0_fsm+0x96>
		} else if (is_button_pressed(0) == ERROR)
 8002a26:	2000      	movs	r0, #0
 8002a28:	f7fe fb74 	bl	8001114 <is_button_pressed>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d10f      	bne.n	8002a52 <button0_fsm+0x96>
			return 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e00f      	b.n	8002a56 <button0_fsm+0x9a>
	case pressed:
		if (!is_button_pressed(0)) {
 8002a36:	2000      	movs	r0, #0
 8002a38:	f7fe fb6c 	bl	8001114 <is_button_pressed>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d103      	bne.n	8002a4a <button0_fsm+0x8e>
			button_st[0] = release;
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <button0_fsm+0xa0>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
		} else {
			return 0;
		}
		break;
 8002a48:	e004      	b.n	8002a54 <button0_fsm+0x98>
			return 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e003      	b.n	8002a56 <button0_fsm+0x9a>
	default:
		return 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	e001      	b.n	8002a56 <button0_fsm+0x9a>
		break;
 8002a52:	bf00      	nop
	}
	return 1;
 8002a54:	2301      	movs	r3, #1
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000218 	.word	0x20000218
 8002a60:	20000216 	.word	0x20000216
 8002a64:	2000021b 	.word	0x2000021b

08002a68 <button2_fsm>:
 * @brief:	set value button fsm - 2 states
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button2_fsm(void) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
	switch (button_st[2]) {
 8002a6c:	4b5f      	ldr	r3, [pc, #380]	; (8002bec <button2_fsm+0x184>)
 8002a6e:	789b      	ldrb	r3, [r3, #2]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <button2_fsm+0x14>
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	f000 80a7 	beq.w	8002bc8 <button2_fsm+0x160>
 8002a7a:	e0b1      	b.n	8002be0 <button2_fsm+0x178>
	case release:
		if (is_button_pressed(12) == 1) {
 8002a7c:	200c      	movs	r0, #12
 8002a7e:	f7fe fb49 	bl	8001114 <is_button_pressed>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	f040 8097 	bne.w	8002bb8 <button2_fsm+0x150>
			// to do
			if (st_clock == CHANGE_TIME) {
 8002a8a:	4b59      	ldr	r3, [pc, #356]	; (8002bf0 <button2_fsm+0x188>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d15d      	bne.n	8002b4e <button2_fsm+0xe6>
				switch (st_changing) {
 8002a92:	4b58      	ldr	r3, [pc, #352]	; (8002bf4 <button2_fsm+0x18c>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b06      	cmp	r3, #6
 8002a98:	d856      	bhi.n	8002b48 <button2_fsm+0xe0>
 8002a9a:	a201      	add	r2, pc, #4	; (adr r2, 8002aa0 <button2_fsm+0x38>)
 8002a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa0:	08002abd 	.word	0x08002abd
 8002aa4:	08002ad1 	.word	0x08002ad1
 8002aa8:	08002ae5 	.word	0x08002ae5
 8002aac:	08002af9 	.word	0x08002af9
 8002ab0:	08002b35 	.word	0x08002b35
 8002ab4:	08002b21 	.word	0x08002b21
 8002ab8:	08002b0d 	.word	0x08002b0d
				case SECOND:

					ds3231_Write(ADDRESS_SEC, buf_sec);
 8002abc:	4b4e      	ldr	r3, [pc, #312]	; (8002bf8 <button2_fsm+0x190>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f7fe fba0 	bl	8001208 <ds3231_Write>
					st_changing = MINUTE;
 8002ac8:	4b4a      	ldr	r3, [pc, #296]	; (8002bf4 <button2_fsm+0x18c>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	701a      	strb	r2, [r3, #0]
					break;
 8002ace:	e03b      	b.n	8002b48 <button2_fsm+0xe0>
				case MINUTE:
					ds3231_Write(ADDRESS_MIN, buf_min);
 8002ad0:	4b4a      	ldr	r3, [pc, #296]	; (8002bfc <button2_fsm+0x194>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	f7fe fb96 	bl	8001208 <ds3231_Write>
					st_changing = HOUR;
 8002adc:	4b45      	ldr	r3, [pc, #276]	; (8002bf4 <button2_fsm+0x18c>)
 8002ade:	2202      	movs	r2, #2
 8002ae0:	701a      	strb	r2, [r3, #0]
					break;
 8002ae2:	e031      	b.n	8002b48 <button2_fsm+0xe0>
				case HOUR:
					ds3231_Write(ADDRESS_HOUR, buf_hour);
 8002ae4:	4b46      	ldr	r3, [pc, #280]	; (8002c00 <button2_fsm+0x198>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	2002      	movs	r0, #2
 8002aec:	f7fe fb8c 	bl	8001208 <ds3231_Write>
					st_changing = DAY;
 8002af0:	4b40      	ldr	r3, [pc, #256]	; (8002bf4 <button2_fsm+0x18c>)
 8002af2:	2203      	movs	r2, #3
 8002af4:	701a      	strb	r2, [r3, #0]
					break;
 8002af6:	e027      	b.n	8002b48 <button2_fsm+0xe0>
				case DAY:
					ds3231_Write(ADDRESS_DAY, buf_day);
 8002af8:	4b42      	ldr	r3, [pc, #264]	; (8002c04 <button2_fsm+0x19c>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	4619      	mov	r1, r3
 8002afe:	2003      	movs	r0, #3
 8002b00:	f7fe fb82 	bl	8001208 <ds3231_Write>
					st_changing = YEAR;
 8002b04:	4b3b      	ldr	r3, [pc, #236]	; (8002bf4 <button2_fsm+0x18c>)
 8002b06:	2206      	movs	r2, #6
 8002b08:	701a      	strb	r2, [r3, #0]
					break;
 8002b0a:	e01d      	b.n	8002b48 <button2_fsm+0xe0>
				case YEAR:
					ds3231_Write(ADDRESS_YEAR, buf_year);
 8002b0c:	4b3e      	ldr	r3, [pc, #248]	; (8002c08 <button2_fsm+0x1a0>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	4619      	mov	r1, r3
 8002b12:	2006      	movs	r0, #6
 8002b14:	f7fe fb78 	bl	8001208 <ds3231_Write>
					st_changing = MONTH;
 8002b18:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <button2_fsm+0x18c>)
 8002b1a:	2205      	movs	r2, #5
 8002b1c:	701a      	strb	r2, [r3, #0]
					break;
 8002b1e:	e013      	b.n	8002b48 <button2_fsm+0xe0>
				case MONTH:
					ds3231_Write(ADDRESS_MONTH, buf_mon);
 8002b20:	4b3a      	ldr	r3, [pc, #232]	; (8002c0c <button2_fsm+0x1a4>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	4619      	mov	r1, r3
 8002b26:	2005      	movs	r0, #5
 8002b28:	f7fe fb6e 	bl	8001208 <ds3231_Write>
					st_changing = DATE;
 8002b2c:	4b31      	ldr	r3, [pc, #196]	; (8002bf4 <button2_fsm+0x18c>)
 8002b2e:	2204      	movs	r2, #4
 8002b30:	701a      	strb	r2, [r3, #0]
					break;
 8002b32:	e009      	b.n	8002b48 <button2_fsm+0xe0>
				case DATE:
					ds3231_Write(ADDRESS_DATE, buf_date);
 8002b34:	4b36      	ldr	r3, [pc, #216]	; (8002c10 <button2_fsm+0x1a8>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	2004      	movs	r0, #4
 8002b3c:	f7fe fb64 	bl	8001208 <ds3231_Write>
					st_changing = SECOND;
 8002b40:	4b2c      	ldr	r3, [pc, #176]	; (8002bf4 <button2_fsm+0x18c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
					break;
 8002b46:	bf00      	nop
				}
				display_all_clock();
 8002b48:	f000 f9bc 	bl	8002ec4 <display_all_clock>
 8002b4c:	e030      	b.n	8002bb0 <button2_fsm+0x148>
			} else {
				switch (st_changing) {
 8002b4e:	4b29      	ldr	r3, [pc, #164]	; (8002bf4 <button2_fsm+0x18c>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d82c      	bhi.n	8002bb0 <button2_fsm+0x148>
 8002b56:	a201      	add	r2, pc, #4	; (adr r2, 8002b5c <button2_fsm+0xf4>)
 8002b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5c:	08002b79 	.word	0x08002b79
 8002b60:	08002b81 	.word	0x08002b81
 8002b64:	08002b89 	.word	0x08002b89
 8002b68:	08002b91 	.word	0x08002b91
 8002b6c:	08002ba9 	.word	0x08002ba9
 8002b70:	08002ba1 	.word	0x08002ba1
 8002b74:	08002b99 	.word	0x08002b99
				case SECOND:
					st_changing = MINUTE;
 8002b78:	4b1e      	ldr	r3, [pc, #120]	; (8002bf4 <button2_fsm+0x18c>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
					break;
 8002b7e:	e017      	b.n	8002bb0 <button2_fsm+0x148>
				case MINUTE:
					st_changing = HOUR;
 8002b80:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <button2_fsm+0x18c>)
 8002b82:	2202      	movs	r2, #2
 8002b84:	701a      	strb	r2, [r3, #0]
					break;
 8002b86:	e013      	b.n	8002bb0 <button2_fsm+0x148>
				case HOUR:
					st_changing = DAY;
 8002b88:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <button2_fsm+0x18c>)
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	701a      	strb	r2, [r3, #0]
					break;
 8002b8e:	e00f      	b.n	8002bb0 <button2_fsm+0x148>
				case DAY:
					st_changing = YEAR;
 8002b90:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <button2_fsm+0x18c>)
 8002b92:	2206      	movs	r2, #6
 8002b94:	701a      	strb	r2, [r3, #0]
					break;
 8002b96:	e00b      	b.n	8002bb0 <button2_fsm+0x148>
				case YEAR:
					st_changing = MONTH;
 8002b98:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <button2_fsm+0x18c>)
 8002b9a:	2205      	movs	r2, #5
 8002b9c:	701a      	strb	r2, [r3, #0]
					break;
 8002b9e:	e007      	b.n	8002bb0 <button2_fsm+0x148>
				case MONTH:
					st_changing = DATE;
 8002ba0:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <button2_fsm+0x18c>)
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	701a      	strb	r2, [r3, #0]
					break;
 8002ba6:	e003      	b.n	8002bb0 <button2_fsm+0x148>
				case DATE:
					st_changing = SECOND;
 8002ba8:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <button2_fsm+0x18c>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
					break;
 8002bae:	bf00      	nop
				}
			}
			button_st[2] = pressed;
 8002bb0:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <button2_fsm+0x184>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	709a      	strb	r2, [r3, #2]
		} else if (is_button_pressed(12) == ERROR)
			return 0;
		break;
 8002bb6:	e015      	b.n	8002be4 <button2_fsm+0x17c>
		} else if (is_button_pressed(12) == ERROR)
 8002bb8:	200c      	movs	r0, #12
 8002bba:	f7fe faab 	bl	8001114 <is_button_pressed>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d10f      	bne.n	8002be4 <button2_fsm+0x17c>
			return 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	e00f      	b.n	8002be8 <button2_fsm+0x180>
	case pressed:
		if (!is_button_pressed(12)) {
 8002bc8:	200c      	movs	r0, #12
 8002bca:	f7fe faa3 	bl	8001114 <is_button_pressed>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d103      	bne.n	8002bdc <button2_fsm+0x174>
			button_st[2] = release;
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <button2_fsm+0x184>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	709a      	strb	r2, [r3, #2]
		} else {
			return 0;
		}
		break;
 8002bda:	e004      	b.n	8002be6 <button2_fsm+0x17e>
			return 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e003      	b.n	8002be8 <button2_fsm+0x180>
	default:
		return 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	e001      	b.n	8002be8 <button2_fsm+0x180>
		break;
 8002be4:	bf00      	nop
	}
	return 1;
 8002be6:	2301      	movs	r3, #1
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000218 	.word	0x20000218
 8002bf0:	20000216 	.word	0x20000216
 8002bf4:	2000021b 	.word	0x2000021b
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	20000001 	.word	0x20000001
 8002c00:	20000002 	.word	0x20000002
 8002c04:	20000003 	.word	0x20000003
 8002c08:	20000006 	.word	0x20000006
 8002c0c:	20000005 	.word	0x20000005
 8002c10:	20000004 	.word	0x20000004

08002c14 <increase_value>:
/*
 * @brief:	increase the value of number based on conditions
 * @para:	number - the value need to be risen
 * @retval:	none
 * */
void increase_value(uint8_t *number) {
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
	switch (st_changing) {
 8002c1c:	4b55      	ldr	r3, [pc, #340]	; (8002d74 <increase_value+0x160>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b06      	cmp	r3, #6
 8002c22:	f200 80a1 	bhi.w	8002d68 <increase_value+0x154>
 8002c26:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <increase_value+0x18>)
 8002c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2c:	08002c49 	.word	0x08002c49
 8002c30:	08002c49 	.word	0x08002c49
 8002c34:	08002c65 	.word	0x08002c65
 8002c38:	08002c81 	.word	0x08002c81
 8002c3c:	08002cd5 	.word	0x08002cd5
 8002c40:	08002cb9 	.word	0x08002cb9
 8002c44:	08002c9d 	.word	0x08002c9d
	case SECOND:
	case MINUTE:
		(*number)++;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	701a      	strb	r2, [r3, #0]
		if (*number > 59)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b3b      	cmp	r3, #59	; 0x3b
 8002c5a:	d97c      	bls.n	8002d56 <increase_value+0x142>
			*number = 0;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]
		break;
 8002c62:	e078      	b.n	8002d56 <increase_value+0x142>
	case HOUR:
		(*number)++;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	701a      	strb	r2, [r3, #0]
		if (*number > 23)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b17      	cmp	r3, #23
 8002c76:	d970      	bls.n	8002d5a <increase_value+0x146>
			*number = 0;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
		break;
 8002c7e:	e06c      	b.n	8002d5a <increase_value+0x146>
	case DAY:
		(*number)++;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	3301      	adds	r3, #1
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	701a      	strb	r2, [r3, #0]
		if (*number > 7)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b07      	cmp	r3, #7
 8002c92:	d964      	bls.n	8002d5e <increase_value+0x14a>
			*number = 1;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	701a      	strb	r2, [r3, #0]
		break;
 8002c9a:	e060      	b.n	8002d5e <increase_value+0x14a>
	case YEAR:
		(*number)++;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	701a      	strb	r2, [r3, #0]
		if (*number > 99)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b63      	cmp	r3, #99	; 0x63
 8002cae:	d958      	bls.n	8002d62 <increase_value+0x14e>
			*number = 0;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
		break;
 8002cb6:	e054      	b.n	8002d62 <increase_value+0x14e>
	case MONTH:
		(*number)++;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	701a      	strb	r2, [r3, #0]
		if (*number > 12)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b0c      	cmp	r3, #12
 8002cca:	d94c      	bls.n	8002d66 <increase_value+0x152>
			*number = 1;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]
		break;
 8002cd2:	e048      	b.n	8002d66 <increase_value+0x152>
	case DATE:
		(*number)++;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	701a      	strb	r2, [r3, #0]
		uint8_t max_date = 30;
 8002ce0:	231e      	movs	r3, #30
 8002ce2:	73fb      	strb	r3, [r7, #15]
		switch (buf_mon) {
 8002ce4:	4b24      	ldr	r3, [pc, #144]	; (8002d78 <increase_value+0x164>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b0c      	cmp	r3, #12
 8002cea:	bf8c      	ite	hi
 8002cec:	2201      	movhi	r2, #1
 8002cee:	2200      	movls	r2, #0
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	2a00      	cmp	r2, #0
 8002cf4:	d125      	bne.n	8002d42 <increase_value+0x12e>
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	409a      	lsls	r2, r3
 8002cfa:	f241 53aa 	movw	r3, #5546	; 0x15aa
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf14      	ite	ne
 8002d04:	2301      	movne	r3, #1
 8002d06:	2300      	moveq	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <increase_value+0x10e>
 8002d0e:	f002 0304 	and.w	r3, r2, #4
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	bf14      	ite	ne
 8002d16:	2301      	movne	r3, #1
 8002d18:	2300      	moveq	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d103      	bne.n	8002d28 <increase_value+0x114>
				max_date = 28;
			else
				max_date = 29;
			break;
		default:
			break;
 8002d20:	e00f      	b.n	8002d42 <increase_value+0x12e>
			max_date = 31;
 8002d22:	231f      	movs	r3, #31
 8002d24:	73fb      	strb	r3, [r7, #15]
			break;
 8002d26:	e00d      	b.n	8002d44 <increase_value+0x130>
			if (buf_year % 4)
 8002d28:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <increase_value+0x168>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d002      	beq.n	8002d3c <increase_value+0x128>
				max_date = 28;
 8002d36:	231c      	movs	r3, #28
 8002d38:	73fb      	strb	r3, [r7, #15]
			break;
 8002d3a:	e003      	b.n	8002d44 <increase_value+0x130>
				max_date = 29;
 8002d3c:	231d      	movs	r3, #29
 8002d3e:	73fb      	strb	r3, [r7, #15]
			break;
 8002d40:	e000      	b.n	8002d44 <increase_value+0x130>
			break;
 8002d42:	bf00      	nop
		}
		if (*number > max_date)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	7bfa      	ldrb	r2, [r7, #15]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d20c      	bcs.n	8002d68 <increase_value+0x154>
			*number = 1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]

	}
}
 8002d54:	e008      	b.n	8002d68 <increase_value+0x154>
		break;
 8002d56:	bf00      	nop
 8002d58:	e006      	b.n	8002d68 <increase_value+0x154>
		break;
 8002d5a:	bf00      	nop
 8002d5c:	e004      	b.n	8002d68 <increase_value+0x154>
		break;
 8002d5e:	bf00      	nop
 8002d60:	e002      	b.n	8002d68 <increase_value+0x154>
		break;
 8002d62:	bf00      	nop
 8002d64:	e000      	b.n	8002d68 <increase_value+0x154>
		break;
 8002d66:	bf00      	nop
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	2000021b 	.word	0x2000021b
 8002d78:	20000005 	.word	0x20000005
 8002d7c:	20000006 	.word	0x20000006

08002d80 <button1_fsm>:
 * @brief:	increasing-value button fsm - 3 states
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button1_fsm(uint8_t *number) {
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
	switch (button_st[1]) {
 8002d88:	4b2c      	ldr	r3, [pc, #176]	; (8002e3c <button1_fsm+0xbc>)
 8002d8a:	785b      	ldrb	r3, [r3, #1]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d031      	beq.n	8002df4 <button1_fsm+0x74>
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	dc49      	bgt.n	8002e28 <button1_fsm+0xa8>
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <button1_fsm+0x1e>
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d015      	beq.n	8002dc8 <button1_fsm+0x48>
 8002d9c:	e044      	b.n	8002e28 <button1_fsm+0xa8>
	case release:
		if (is_button_pressed(3) == 1) {
 8002d9e:	2003      	movs	r0, #3
 8002da0:	f7fe f9b8 	bl	8001114 <is_button_pressed>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d106      	bne.n	8002db8 <button1_fsm+0x38>
			// to do
			increase_value(number);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff ff32 	bl	8002c14 <increase_value>
			button_st[1] = pressed;
 8002db0:	4b22      	ldr	r3, [pc, #136]	; (8002e3c <button1_fsm+0xbc>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	705a      	strb	r2, [r3, #1]
		} else if (is_button_pressed(3) == ERROR)
			return 0;
		break;
 8002db6:	e039      	b.n	8002e2c <button1_fsm+0xac>
		} else if (is_button_pressed(3) == ERROR)
 8002db8:	2003      	movs	r0, #3
 8002dba:	f7fe f9ab 	bl	8001114 <is_button_pressed>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d133      	bne.n	8002e2c <button1_fsm+0xac>
			return 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e035      	b.n	8002e34 <button1_fsm+0xb4>
	case pressed:
		if (!is_button_pressed(3)) {
 8002dc8:	2003      	movs	r0, #3
 8002dca:	f7fe f9a3 	bl	8001114 <is_button_pressed>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d103      	bne.n	8002ddc <button1_fsm+0x5c>
			button_st[1] = release;
 8002dd4:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <button1_fsm+0xbc>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	705a      	strb	r2, [r3, #1]
		} else if (is_button_long_pressed(3) == 1) {
			button_st[1] = long_pressed;
		} else {
			return 0;
		}
		break;
 8002dda:	e02a      	b.n	8002e32 <button1_fsm+0xb2>
		} else if (is_button_long_pressed(3) == 1) {
 8002ddc:	2003      	movs	r0, #3
 8002dde:	f7fe f9b5 	bl	800114c <is_button_long_pressed>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d103      	bne.n	8002df0 <button1_fsm+0x70>
			button_st[1] = long_pressed;
 8002de8:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <button1_fsm+0xbc>)
 8002dea:	2202      	movs	r2, #2
 8002dec:	705a      	strb	r2, [r3, #1]
		break;
 8002dee:	e020      	b.n	8002e32 <button1_fsm+0xb2>
			return 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e01f      	b.n	8002e34 <button1_fsm+0xb4>
	case long_pressed:
		// to do
		st_blinking = ON;
 8002df4:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <button1_fsm+0xc0>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	701a      	strb	r2, [r3, #0]
		if (!is_timer_on(2)) {
 8002dfa:	2002      	movs	r0, #2
 8002dfc:	f000 fc72 	bl	80036e4 <is_timer_on>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <button1_fsm+0x94>
			increase_value(number);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff ff04 	bl	8002c14 <increase_value>
			set_timer(2, INCREASE_TIME);
 8002e0c:	21c8      	movs	r1, #200	; 0xc8
 8002e0e:	2002      	movs	r0, #2
 8002e10:	f000 fc0a 	bl	8003628 <set_timer>
		}
		if (!is_button_pressed(3)) {
 8002e14:	2003      	movs	r0, #3
 8002e16:	f7fe f97d 	bl	8001114 <is_button_pressed>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d107      	bne.n	8002e30 <button1_fsm+0xb0>
			button_st[1] = release;
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <button1_fsm+0xbc>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	705a      	strb	r2, [r3, #1]
		}
		break;
 8002e26:	e003      	b.n	8002e30 <button1_fsm+0xb0>
	default:
		return 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e003      	b.n	8002e34 <button1_fsm+0xb4>
		break;
 8002e2c:	bf00      	nop
 8002e2e:	e000      	b.n	8002e32 <button1_fsm+0xb2>
		break;
 8002e30:	bf00      	nop
		break;
	}
	return 1;
 8002e32:	2301      	movs	r3, #1
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	20000218 	.word	0x20000218
 8002e40:	2000021c 	.word	0x2000021c

08002e44 <update_clock>:
/*
 * @brief:	update the data of clock in display mode
 * @para:	none
 * @retval:	none
 * */
void update_clock(void) {
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
	buf_sec = ds3231_sec;
 8002e48:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <update_clock+0x48>)
 8002e4a:	781a      	ldrb	r2, [r3, #0]
 8002e4c:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <update_clock+0x4c>)
 8002e4e:	701a      	strb	r2, [r3, #0]
	buf_min = ds3231_min;
 8002e50:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <update_clock+0x50>)
 8002e52:	781a      	ldrb	r2, [r3, #0]
 8002e54:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <update_clock+0x54>)
 8002e56:	701a      	strb	r2, [r3, #0]
	buf_hour = ds3231_hours;
 8002e58:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <update_clock+0x58>)
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <update_clock+0x5c>)
 8002e5e:	701a      	strb	r2, [r3, #0]
	buf_day = ds3231_day;
 8002e60:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <update_clock+0x60>)
 8002e62:	781a      	ldrb	r2, [r3, #0]
 8002e64:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <update_clock+0x64>)
 8002e66:	701a      	strb	r2, [r3, #0]
	buf_date = ds3231_date;
 8002e68:	4b10      	ldr	r3, [pc, #64]	; (8002eac <update_clock+0x68>)
 8002e6a:	781a      	ldrb	r2, [r3, #0]
 8002e6c:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <update_clock+0x6c>)
 8002e6e:	701a      	strb	r2, [r3, #0]
	buf_mon = ds3231_month;
 8002e70:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <update_clock+0x70>)
 8002e72:	781a      	ldrb	r2, [r3, #0]
 8002e74:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <update_clock+0x74>)
 8002e76:	701a      	strb	r2, [r3, #0]
	buf_year = ds3231_year;
 8002e78:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <update_clock+0x78>)
 8002e7a:	781a      	ldrb	r2, [r3, #0]
 8002e7c:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <update_clock+0x7c>)
 8002e7e:	701a      	strb	r2, [r3, #0]
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000161 	.word	0x20000161
 8002e90:	20000000 	.word	0x20000000
 8002e94:	20000160 	.word	0x20000160
 8002e98:	20000001 	.word	0x20000001
 8002e9c:	2000015f 	.word	0x2000015f
 8002ea0:	20000002 	.word	0x20000002
 8002ea4:	20000163 	.word	0x20000163
 8002ea8:	20000003 	.word	0x20000003
 8002eac:	20000162 	.word	0x20000162
 8002eb0:	20000004 	.word	0x20000004
 8002eb4:	20000164 	.word	0x20000164
 8002eb8:	20000005 	.word	0x20000005
 8002ebc:	20000165 	.word	0x20000165
 8002ec0:	20000006 	.word	0x20000006

08002ec4 <display_all_clock>:
/*
 * @brief:	display all data of clock
 * @para:	none
 * @retval:	none
 * */
void display_all_clock(void) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
	dis_date(buf_date, 1);
 8002ec8:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <display_all_clock+0x5c>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2101      	movs	r1, #1
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 f9fc 	bl	80032cc <dis_date>
	dis_day(buf_day, 1);
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <display_all_clock+0x60>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2101      	movs	r1, #1
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 f99c 	bl	8003218 <dis_day>
	dis_hour(buf_hour, 1);
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <display_all_clock+0x64>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f958 	bl	800319c <dis_hour>
	dis_min(buf_min, 1);
 8002eec:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <display_all_clock+0x68>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 f914 	bl	8003120 <dis_min>
	dis_month(buf_mon, 1);
 8002ef8:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <display_all_clock+0x6c>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2101      	movs	r1, #1
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fa22 	bl	8003348 <dis_month>
	dis_year(buf_year, 1);
 8002f04:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <display_all_clock+0x70>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2101      	movs	r1, #1
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fa5a 	bl	80033c4 <dis_year>
	dis_sec(buf_sec, 1);
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <display_all_clock+0x74>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2101      	movs	r1, #1
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 f8c4 	bl	80030a4 <dis_sec>
}
 8002f1c:	bf00      	nop
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000004 	.word	0x20000004
 8002f24:	20000003 	.word	0x20000003
 8002f28:	20000002 	.word	0x20000002
 8002f2c:	20000001 	.word	0x20000001
 8002f30:	20000005 	.word	0x20000005
 8002f34:	20000006 	.word	0x20000006
 8002f38:	20000000 	.word	0x20000000

08002f3c <display_mode>:
/*
 * @brief:	display the current mode
 * @para:	none
 * @retval:	none
 * */
void display_mode(void) {
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af04      	add	r7, sp, #16
	switch (st_clock) {
 8002f42:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <display_mode+0x7c>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d024      	beq.n	8002f94 <display_mode+0x58>
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	dc31      	bgt.n	8002fb2 <display_mode+0x76>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <display_mode+0x1c>
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d00f      	beq.n	8002f76 <display_mode+0x3a>
		break;
	case ALARM:
		lcd_ShowStr(20, 30, "MODE: ALARM", WHITE, RED, 24, 0);
		break;
	}
}
 8002f56:	e02c      	b.n	8002fb2 <display_mode+0x76>
		lcd_ShowStr(20, 30, "MODE: DISPLAY", WHITE, RED, 24, 0);
 8002f58:	2300      	movs	r3, #0
 8002f5a:	9302      	str	r3, [sp, #8]
 8002f5c:	2318      	movs	r3, #24
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f6a:	4a14      	ldr	r2, [pc, #80]	; (8002fbc <display_mode+0x80>)
 8002f6c:	211e      	movs	r1, #30
 8002f6e:	2014      	movs	r0, #20
 8002f70:	f7ff f828 	bl	8001fc4 <lcd_ShowStr>
		break;
 8002f74:	e01d      	b.n	8002fb2 <display_mode+0x76>
		lcd_ShowStr(20, 30, "MODE: CHANGE TIME", WHITE, RED, 24, 0);
 8002f76:	2300      	movs	r3, #0
 8002f78:	9302      	str	r3, [sp, #8]
 8002f7a:	2318      	movs	r3, #24
 8002f7c:	9301      	str	r3, [sp, #4]
 8002f7e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f88:	4a0d      	ldr	r2, [pc, #52]	; (8002fc0 <display_mode+0x84>)
 8002f8a:	211e      	movs	r1, #30
 8002f8c:	2014      	movs	r0, #20
 8002f8e:	f7ff f819 	bl	8001fc4 <lcd_ShowStr>
		break;
 8002f92:	e00e      	b.n	8002fb2 <display_mode+0x76>
		lcd_ShowStr(20, 30, "MODE: ALARM", WHITE, RED, 24, 0);
 8002f94:	2300      	movs	r3, #0
 8002f96:	9302      	str	r3, [sp, #8]
 8002f98:	2318      	movs	r3, #24
 8002f9a:	9301      	str	r3, [sp, #4]
 8002f9c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fa6:	4a07      	ldr	r2, [pc, #28]	; (8002fc4 <display_mode+0x88>)
 8002fa8:	211e      	movs	r1, #30
 8002faa:	2014      	movs	r0, #20
 8002fac:	f7ff f80a 	bl	8001fc4 <lcd_ShowStr>
		break;
 8002fb0:	bf00      	nop
}
 8002fb2:	bf00      	nop
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20000216 	.word	0x20000216
 8002fbc:	0800a724 	.word	0x0800a724
 8002fc0:	0800a710 	.word	0x0800a710
 8002fc4:	0800a734 	.word	0x0800a734

08002fc8 <display_all_alarm>:
/*
 * @brief:	display all data of alarm
 * @para:	none
 * @retval:	none
 * */
void display_all_alarm(void) {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
	dis_date(ala_date, 1);
 8002fcc:	4b12      	ldr	r3, [pc, #72]	; (8003018 <display_all_alarm+0x50>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 f97a 	bl	80032cc <dis_date>
	dis_day(ala_day, 1);
 8002fd8:	4b10      	ldr	r3, [pc, #64]	; (800301c <display_all_alarm+0x54>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2101      	movs	r1, #1
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 f91a 	bl	8003218 <dis_day>
	dis_hour(ala_hour, 1);
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <display_all_alarm+0x58>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2101      	movs	r1, #1
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 f8d6 	bl	800319c <dis_hour>
	dis_min(ala_min, 1);
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <display_all_alarm+0x5c>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 f892 	bl	8003120 <dis_min>
	dis_month(ala_mon, 1);
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <display_all_alarm+0x60>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2101      	movs	r1, #1
 8003002:	4618      	mov	r0, r3
 8003004:	f000 f9a0 	bl	8003348 <dis_month>
	dis_year(ala_year, 1);
 8003008:	4b08      	ldr	r3, [pc, #32]	; (800302c <display_all_alarm+0x64>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2101      	movs	r1, #1
 800300e:	4618      	mov	r0, r3
 8003010:	f000 f9d8 	bl	80033c4 <dis_year>
}
 8003014:	bf00      	nop
 8003016:	bd80      	pop	{r7, pc}
 8003018:	2000000a 	.word	0x2000000a
 800301c:	20000009 	.word	0x20000009
 8003020:	20000008 	.word	0x20000008
 8003024:	20000007 	.word	0x20000007
 8003028:	2000000b 	.word	0x2000000b
 800302c:	2000000c 	.word	0x2000000c

08003030 <init_box>:
	uint8_t x_month;
	uint8_t y_month;
	uint8_t x_year;
	uint8_t y_year;
} box;
void init_box() {
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
	box.text_color = GREEN;
 8003034:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <init_box+0x70>)
 8003036:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800303a:	601a      	str	r2, [r3, #0]
	box.background_color = BLACK;
 800303c:	4b18      	ldr	r3, [pc, #96]	; (80030a0 <init_box+0x70>)
 800303e:	2200      	movs	r2, #0
 8003040:	605a      	str	r2, [r3, #4]
	box.x_second = 150;
 8003042:	4b17      	ldr	r3, [pc, #92]	; (80030a0 <init_box+0x70>)
 8003044:	2296      	movs	r2, #150	; 0x96
 8003046:	721a      	strb	r2, [r3, #8]
	box.y_second = 6;
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <init_box+0x70>)
 800304a:	2206      	movs	r2, #6
 800304c:	725a      	strb	r2, [r3, #9]
	box.x_minute = 110;
 800304e:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <init_box+0x70>)
 8003050:	226e      	movs	r2, #110	; 0x6e
 8003052:	729a      	strb	r2, [r3, #10]
	box.y_minute = 6;
 8003054:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <init_box+0x70>)
 8003056:	2206      	movs	r2, #6
 8003058:	72da      	strb	r2, [r3, #11]
	box.x_hour = 70;
 800305a:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <init_box+0x70>)
 800305c:	2246      	movs	r2, #70	; 0x46
 800305e:	731a      	strb	r2, [r3, #12]
	box.y_hour = 6;
 8003060:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <init_box+0x70>)
 8003062:	2206      	movs	r2, #6
 8003064:	735a      	strb	r2, [r3, #13]
	box.x_day = 20;
 8003066:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <init_box+0x70>)
 8003068:	2214      	movs	r2, #20
 800306a:	739a      	strb	r2, [r3, #14]
	box.y_day = 60;
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <init_box+0x70>)
 800306e:	223c      	movs	r2, #60	; 0x3c
 8003070:	73da      	strb	r2, [r3, #15]
	box.x_date = 70;
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <init_box+0x70>)
 8003074:	2246      	movs	r2, #70	; 0x46
 8003076:	741a      	strb	r2, [r3, #16]
	box.y_date = 60;
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <init_box+0x70>)
 800307a:	223c      	movs	r2, #60	; 0x3c
 800307c:	745a      	strb	r2, [r3, #17]
	box.x_month = 110;
 800307e:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <init_box+0x70>)
 8003080:	226e      	movs	r2, #110	; 0x6e
 8003082:	749a      	strb	r2, [r3, #18]
	box.y_month = 60;
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <init_box+0x70>)
 8003086:	223c      	movs	r2, #60	; 0x3c
 8003088:	74da      	strb	r2, [r3, #19]
	box.x_year = 150;
 800308a:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <init_box+0x70>)
 800308c:	2296      	movs	r2, #150	; 0x96
 800308e:	751a      	strb	r2, [r3, #20]
	box.y_year = 60;
 8003090:	4b03      	ldr	r3, [pc, #12]	; (80030a0 <init_box+0x70>)
 8003092:	223c      	movs	r2, #60	; 0x3c
 8003094:	755a      	strb	r2, [r3, #21]
}
 8003096:	bf00      	nop
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	20000220 	.word	0x20000220

080030a4 <dis_sec>:
 * @brief  display second in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in seconds area
 * @retval none
 */
void dis_sec(uint8_t number, bool i) {
 80030a4:	b5b0      	push	{r4, r5, r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af04      	add	r7, sp, #16
 80030aa:	4603      	mov	r3, r0
 80030ac:	460a      	mov	r2, r1
 80030ae:	71fb      	strb	r3, [r7, #7]
 80030b0:	4613      	mov	r3, r2
 80030b2:	71bb      	strb	r3, [r7, #6]
	if (i)
 80030b4:	79bb      	ldrb	r3, [r7, #6]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d016      	beq.n	80030e8 <dis_sec+0x44>
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2, box.text_color,
 80030ba:	4b18      	ldr	r3, [pc, #96]	; (800311c <dis_sec+0x78>)
 80030bc:	7a1b      	ldrb	r3, [r3, #8]
 80030be:	b298      	uxth	r0, r3
 80030c0:	4b16      	ldr	r3, [pc, #88]	; (800311c <dis_sec+0x78>)
 80030c2:	7a5b      	ldrb	r3, [r3, #9]
 80030c4:	b299      	uxth	r1, r3
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	b29c      	uxth	r4, r3
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <dis_sec+0x78>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	b29b      	uxth	r3, r3
				box.background_color, 24);
 80030d0:	4a12      	ldr	r2, [pc, #72]	; (800311c <dis_sec+0x78>)
 80030d2:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2, box.text_color,
 80030d4:	b292      	uxth	r2, r2
 80030d6:	2518      	movs	r5, #24
 80030d8:	9502      	str	r5, [sp, #8]
 80030da:	9201      	str	r2, [sp, #4]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	2302      	movs	r3, #2
 80030e0:	4622      	mov	r2, r4
 80030e2:	f7fe fce5 	bl	8001ab0 <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2,
				box.background_color, box.background_color, 24);
}
 80030e6:	e015      	b.n	8003114 <dis_sec+0x70>
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2,
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <dis_sec+0x78>)
 80030ea:	7a1b      	ldrb	r3, [r3, #8]
 80030ec:	b298      	uxth	r0, r3
 80030ee:	4b0b      	ldr	r3, [pc, #44]	; (800311c <dis_sec+0x78>)
 80030f0:	7a5b      	ldrb	r3, [r3, #9]
 80030f2:	b299      	uxth	r1, r3
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	b29c      	uxth	r4, r3
				box.background_color, box.background_color, 24);
 80030f8:	4b08      	ldr	r3, [pc, #32]	; (800311c <dis_sec+0x78>)
 80030fa:	685b      	ldr	r3, [r3, #4]
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2,
 80030fc:	b29b      	uxth	r3, r3
				box.background_color, box.background_color, 24);
 80030fe:	4a07      	ldr	r2, [pc, #28]	; (800311c <dis_sec+0x78>)
 8003100:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_second, box.y_second, number, 2,
 8003102:	b292      	uxth	r2, r2
 8003104:	2518      	movs	r5, #24
 8003106:	9502      	str	r5, [sp, #8]
 8003108:	9201      	str	r2, [sp, #4]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	2302      	movs	r3, #2
 800310e:	4622      	mov	r2, r4
 8003110:	f7fe fcce 	bl	8001ab0 <lcd_ShowIntNum>
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bdb0      	pop	{r4, r5, r7, pc}
 800311c:	20000220 	.word	0x20000220

08003120 <dis_min>:
 * @brief  display minutes in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in minutes area
 * @retval none
 */
void dis_min(uint8_t number, bool i) {
 8003120:	b5b0      	push	{r4, r5, r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af04      	add	r7, sp, #16
 8003126:	4603      	mov	r3, r0
 8003128:	460a      	mov	r2, r1
 800312a:	71fb      	strb	r3, [r7, #7]
 800312c:	4613      	mov	r3, r2
 800312e:	71bb      	strb	r3, [r7, #6]
	if (i)
 8003130:	79bb      	ldrb	r3, [r7, #6]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d016      	beq.n	8003164 <dis_min+0x44>
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2, box.text_color,
 8003136:	4b18      	ldr	r3, [pc, #96]	; (8003198 <dis_min+0x78>)
 8003138:	7a9b      	ldrb	r3, [r3, #10]
 800313a:	b298      	uxth	r0, r3
 800313c:	4b16      	ldr	r3, [pc, #88]	; (8003198 <dis_min+0x78>)
 800313e:	7adb      	ldrb	r3, [r3, #11]
 8003140:	b299      	uxth	r1, r3
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	b29c      	uxth	r4, r3
 8003146:	4b14      	ldr	r3, [pc, #80]	; (8003198 <dis_min+0x78>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	b29b      	uxth	r3, r3
				box.background_color, 24);
 800314c:	4a12      	ldr	r2, [pc, #72]	; (8003198 <dis_min+0x78>)
 800314e:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2, box.text_color,
 8003150:	b292      	uxth	r2, r2
 8003152:	2518      	movs	r5, #24
 8003154:	9502      	str	r5, [sp, #8]
 8003156:	9201      	str	r2, [sp, #4]
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	2302      	movs	r3, #2
 800315c:	4622      	mov	r2, r4
 800315e:	f7fe fca7 	bl	8001ab0 <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2,
				box.background_color, box.background_color, 24);

}
 8003162:	e015      	b.n	8003190 <dis_min+0x70>
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2,
 8003164:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <dis_min+0x78>)
 8003166:	7a9b      	ldrb	r3, [r3, #10]
 8003168:	b298      	uxth	r0, r3
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <dis_min+0x78>)
 800316c:	7adb      	ldrb	r3, [r3, #11]
 800316e:	b299      	uxth	r1, r3
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	b29c      	uxth	r4, r3
				box.background_color, box.background_color, 24);
 8003174:	4b08      	ldr	r3, [pc, #32]	; (8003198 <dis_min+0x78>)
 8003176:	685b      	ldr	r3, [r3, #4]
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2,
 8003178:	b29b      	uxth	r3, r3
				box.background_color, box.background_color, 24);
 800317a:	4a07      	ldr	r2, [pc, #28]	; (8003198 <dis_min+0x78>)
 800317c:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_minute, box.y_minute, number, 2,
 800317e:	b292      	uxth	r2, r2
 8003180:	2518      	movs	r5, #24
 8003182:	9502      	str	r5, [sp, #8]
 8003184:	9201      	str	r2, [sp, #4]
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	2302      	movs	r3, #2
 800318a:	4622      	mov	r2, r4
 800318c:	f7fe fc90 	bl	8001ab0 <lcd_ShowIntNum>
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bdb0      	pop	{r4, r5, r7, pc}
 8003198:	20000220 	.word	0x20000220

0800319c <dis_hour>:
 * @brief  display hours in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in hours area
 * @retval none
 */
void dis_hour(uint8_t number, bool i) {
 800319c:	b5b0      	push	{r4, r5, r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af04      	add	r7, sp, #16
 80031a2:	4603      	mov	r3, r0
 80031a4:	460a      	mov	r2, r1
 80031a6:	71fb      	strb	r3, [r7, #7]
 80031a8:	4613      	mov	r3, r2
 80031aa:	71bb      	strb	r3, [r7, #6]
	if (i)
 80031ac:	79bb      	ldrb	r3, [r7, #6]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d016      	beq.n	80031e0 <dis_hour+0x44>
		lcd_ShowIntNum(box.x_hour, box.y_hour, number, 2, box.text_color,
 80031b2:	4b18      	ldr	r3, [pc, #96]	; (8003214 <dis_hour+0x78>)
 80031b4:	7b1b      	ldrb	r3, [r3, #12]
 80031b6:	b298      	uxth	r0, r3
 80031b8:	4b16      	ldr	r3, [pc, #88]	; (8003214 <dis_hour+0x78>)
 80031ba:	7b5b      	ldrb	r3, [r3, #13]
 80031bc:	b299      	uxth	r1, r3
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	b29c      	uxth	r4, r3
 80031c2:	4b14      	ldr	r3, [pc, #80]	; (8003214 <dis_hour+0x78>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
				box.background_color, 24);
 80031c8:	4a12      	ldr	r2, [pc, #72]	; (8003214 <dis_hour+0x78>)
 80031ca:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_hour, box.y_hour, number, 2, box.text_color,
 80031cc:	b292      	uxth	r2, r2
 80031ce:	2518      	movs	r5, #24
 80031d0:	9502      	str	r5, [sp, #8]
 80031d2:	9201      	str	r2, [sp, #4]
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	2302      	movs	r3, #2
 80031d8:	4622      	mov	r2, r4
 80031da:	f7fe fc69 	bl	8001ab0 <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_hour, box.y_hour, number, 2, box.background_color,
				box.background_color, 24);
}
 80031de:	e015      	b.n	800320c <dis_hour+0x70>
		lcd_ShowIntNum(box.x_hour, box.y_hour, number, 2, box.background_color,
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <dis_hour+0x78>)
 80031e2:	7b1b      	ldrb	r3, [r3, #12]
 80031e4:	b298      	uxth	r0, r3
 80031e6:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <dis_hour+0x78>)
 80031e8:	7b5b      	ldrb	r3, [r3, #13]
 80031ea:	b299      	uxth	r1, r3
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	b29c      	uxth	r4, r3
 80031f0:	4b08      	ldr	r3, [pc, #32]	; (8003214 <dis_hour+0x78>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	b29b      	uxth	r3, r3
				box.background_color, 24);
 80031f6:	4a07      	ldr	r2, [pc, #28]	; (8003214 <dis_hour+0x78>)
 80031f8:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_hour, box.y_hour, number, 2, box.background_color,
 80031fa:	b292      	uxth	r2, r2
 80031fc:	2518      	movs	r5, #24
 80031fe:	9502      	str	r5, [sp, #8]
 8003200:	9201      	str	r2, [sp, #4]
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	2302      	movs	r3, #2
 8003206:	4622      	mov	r2, r4
 8003208:	f7fe fc52 	bl	8001ab0 <lcd_ShowIntNum>
}
 800320c:	bf00      	nop
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bdb0      	pop	{r4, r5, r7, pc}
 8003214:	20000220 	.word	0x20000220

08003218 <dis_day>:
 * @brief  display day in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in day area
 * @retval none
 */
void dis_day(uint8_t number, bool i) {
 8003218:	b5b0      	push	{r4, r5, r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af04      	add	r7, sp, #16
 800321e:	4603      	mov	r3, r0
 8003220:	460a      	mov	r2, r1
 8003222:	71fb      	strb	r3, [r7, #7]
 8003224:	4613      	mov	r3, r2
 8003226:	71bb      	strb	r3, [r7, #6]
	//lcd_ShowStr(box.x_day, box.y_day - 5, ": Day", box.text_color, box.background_color, 24, 0);
	if (i){
 8003228:	79bb      	ldrb	r3, [r7, #6]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d02f      	beq.n	800328e <dis_day+0x76>
		if(number != 1)
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d016      	beq.n	8003262 <dis_day+0x4a>
		lcd_ShowIntNum(box.x_day, box.y_day, number, 2, box.text_color,
 8003234:	4b23      	ldr	r3, [pc, #140]	; (80032c4 <dis_day+0xac>)
 8003236:	7b9b      	ldrb	r3, [r3, #14]
 8003238:	b298      	uxth	r0, r3
 800323a:	4b22      	ldr	r3, [pc, #136]	; (80032c4 <dis_day+0xac>)
 800323c:	7bdb      	ldrb	r3, [r3, #15]
 800323e:	b299      	uxth	r1, r3
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	b29c      	uxth	r4, r3
 8003244:	4b1f      	ldr	r3, [pc, #124]	; (80032c4 <dis_day+0xac>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	b29b      	uxth	r3, r3
						box.background_color, 24);
 800324a:	4a1e      	ldr	r2, [pc, #120]	; (80032c4 <dis_day+0xac>)
 800324c:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_day, box.y_day, number, 2, box.text_color,
 800324e:	b292      	uxth	r2, r2
 8003250:	2518      	movs	r5, #24
 8003252:	9502      	str	r5, [sp, #8]
 8003254:	9201      	str	r2, [sp, #4]
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	2302      	movs	r3, #2
 800325a:	4622      	mov	r2, r4
 800325c:	f7fe fc28 	bl	8001ab0 <lcd_ShowIntNum>
					box.background_color, 24, 0);
	}
	else
		lcd_ShowIntNum(box.x_day, box.y_day, number, 2, box.background_color,
				box.background_color, 24);
}
 8003260:	e02b      	b.n	80032ba <dis_day+0xa2>
			lcd_ShowStr(box.x_day, box.y_day, "CN", box.text_color,
 8003262:	4b18      	ldr	r3, [pc, #96]	; (80032c4 <dis_day+0xac>)
 8003264:	7b9b      	ldrb	r3, [r3, #14]
 8003266:	b298      	uxth	r0, r3
 8003268:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <dis_day+0xac>)
 800326a:	7bdb      	ldrb	r3, [r3, #15]
 800326c:	b299      	uxth	r1, r3
 800326e:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <dis_day+0xac>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	b29a      	uxth	r2, r3
					box.background_color, 24, 0);
 8003274:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <dis_day+0xac>)
 8003276:	685b      	ldr	r3, [r3, #4]
			lcd_ShowStr(box.x_day, box.y_day, "CN", box.text_color,
 8003278:	b29b      	uxth	r3, r3
 800327a:	2400      	movs	r4, #0
 800327c:	9402      	str	r4, [sp, #8]
 800327e:	2418      	movs	r4, #24
 8003280:	9401      	str	r4, [sp, #4]
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	4613      	mov	r3, r2
 8003286:	4a10      	ldr	r2, [pc, #64]	; (80032c8 <dis_day+0xb0>)
 8003288:	f7fe fe9c 	bl	8001fc4 <lcd_ShowStr>
}
 800328c:	e015      	b.n	80032ba <dis_day+0xa2>
		lcd_ShowIntNum(box.x_day, box.y_day, number, 2, box.background_color,
 800328e:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <dis_day+0xac>)
 8003290:	7b9b      	ldrb	r3, [r3, #14]
 8003292:	b298      	uxth	r0, r3
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <dis_day+0xac>)
 8003296:	7bdb      	ldrb	r3, [r3, #15]
 8003298:	b299      	uxth	r1, r3
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	b29c      	uxth	r4, r3
 800329e:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <dis_day+0xac>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	b29b      	uxth	r3, r3
				box.background_color, 24);
 80032a4:	4a07      	ldr	r2, [pc, #28]	; (80032c4 <dis_day+0xac>)
 80032a6:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_day, box.y_day, number, 2, box.background_color,
 80032a8:	b292      	uxth	r2, r2
 80032aa:	2518      	movs	r5, #24
 80032ac:	9502      	str	r5, [sp, #8]
 80032ae:	9201      	str	r2, [sp, #4]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	2302      	movs	r3, #2
 80032b4:	4622      	mov	r2, r4
 80032b6:	f7fe fbfb 	bl	8001ab0 <lcd_ShowIntNum>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bdb0      	pop	{r4, r5, r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20000220 	.word	0x20000220
 80032c8:	0800a740 	.word	0x0800a740

080032cc <dis_date>:
 * @brief  display dates in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in dates area
 * @retval none
 */
void dis_date(uint8_t number, bool i) {
 80032cc:	b5b0      	push	{r4, r5, r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af04      	add	r7, sp, #16
 80032d2:	4603      	mov	r3, r0
 80032d4:	460a      	mov	r2, r1
 80032d6:	71fb      	strb	r3, [r7, #7]
 80032d8:	4613      	mov	r3, r2
 80032da:	71bb      	strb	r3, [r7, #6]
	//lcd_ShowStr(box.x_date, box.y_date - 5, ": Date", box.text_color, box.background_color, 24, 0);
	if (i)
 80032dc:	79bb      	ldrb	r3, [r7, #6]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d016      	beq.n	8003310 <dis_date+0x44>
		lcd_ShowIntNum(box.x_date, box.y_date, number, 2, box.text_color,
 80032e2:	4b18      	ldr	r3, [pc, #96]	; (8003344 <dis_date+0x78>)
 80032e4:	7c1b      	ldrb	r3, [r3, #16]
 80032e6:	b298      	uxth	r0, r3
 80032e8:	4b16      	ldr	r3, [pc, #88]	; (8003344 <dis_date+0x78>)
 80032ea:	7c5b      	ldrb	r3, [r3, #17]
 80032ec:	b299      	uxth	r1, r3
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	b29c      	uxth	r4, r3
 80032f2:	4b14      	ldr	r3, [pc, #80]	; (8003344 <dis_date+0x78>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	b29b      	uxth	r3, r3
				box.background_color, 24);
 80032f8:	4a12      	ldr	r2, [pc, #72]	; (8003344 <dis_date+0x78>)
 80032fa:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_date, box.y_date, number, 2, box.text_color,
 80032fc:	b292      	uxth	r2, r2
 80032fe:	2518      	movs	r5, #24
 8003300:	9502      	str	r5, [sp, #8]
 8003302:	9201      	str	r2, [sp, #4]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	2302      	movs	r3, #2
 8003308:	4622      	mov	r2, r4
 800330a:	f7fe fbd1 	bl	8001ab0 <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_date, box.y_date, number, 2, box.background_color,
				box.background_color, 24);
}
 800330e:	e015      	b.n	800333c <dis_date+0x70>
		lcd_ShowIntNum(box.x_date, box.y_date, number, 2, box.background_color,
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <dis_date+0x78>)
 8003312:	7c1b      	ldrb	r3, [r3, #16]
 8003314:	b298      	uxth	r0, r3
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <dis_date+0x78>)
 8003318:	7c5b      	ldrb	r3, [r3, #17]
 800331a:	b299      	uxth	r1, r3
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	b29c      	uxth	r4, r3
 8003320:	4b08      	ldr	r3, [pc, #32]	; (8003344 <dis_date+0x78>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8003326:	4a07      	ldr	r2, [pc, #28]	; (8003344 <dis_date+0x78>)
 8003328:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_date, box.y_date, number, 2, box.background_color,
 800332a:	b292      	uxth	r2, r2
 800332c:	2518      	movs	r5, #24
 800332e:	9502      	str	r5, [sp, #8]
 8003330:	9201      	str	r2, [sp, #4]
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2302      	movs	r3, #2
 8003336:	4622      	mov	r2, r4
 8003338:	f7fe fbba 	bl	8001ab0 <lcd_ShowIntNum>
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bdb0      	pop	{r4, r5, r7, pc}
 8003344:	20000220 	.word	0x20000220

08003348 <dis_month>:
 * @brief  display months in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in months area
 * @retval none
 */
void dis_month(uint8_t number, bool i) {
 8003348:	b5b0      	push	{r4, r5, r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af04      	add	r7, sp, #16
 800334e:	4603      	mov	r3, r0
 8003350:	460a      	mov	r2, r1
 8003352:	71fb      	strb	r3, [r7, #7]
 8003354:	4613      	mov	r3, r2
 8003356:	71bb      	strb	r3, [r7, #6]
	//lcd_ShowStr(box.x_month, box.y_month - 5, ": Month", box.text_color, box.background_color, 24, 0);
	if (i)
 8003358:	79bb      	ldrb	r3, [r7, #6]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d016      	beq.n	800338c <dis_month+0x44>
		lcd_ShowIntNum(box.x_month, box.y_month, number, 2, box.text_color,
 800335e:	4b18      	ldr	r3, [pc, #96]	; (80033c0 <dis_month+0x78>)
 8003360:	7c9b      	ldrb	r3, [r3, #18]
 8003362:	b298      	uxth	r0, r3
 8003364:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <dis_month+0x78>)
 8003366:	7cdb      	ldrb	r3, [r3, #19]
 8003368:	b299      	uxth	r1, r3
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	b29c      	uxth	r4, r3
 800336e:	4b14      	ldr	r3, [pc, #80]	; (80033c0 <dis_month+0x78>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	b29b      	uxth	r3, r3
				box.background_color, 24);
 8003374:	4a12      	ldr	r2, [pc, #72]	; (80033c0 <dis_month+0x78>)
 8003376:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_month, box.y_month, number, 2, box.text_color,
 8003378:	b292      	uxth	r2, r2
 800337a:	2518      	movs	r5, #24
 800337c:	9502      	str	r5, [sp, #8]
 800337e:	9201      	str	r2, [sp, #4]
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	2302      	movs	r3, #2
 8003384:	4622      	mov	r2, r4
 8003386:	f7fe fb93 	bl	8001ab0 <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_month, box.y_month, number, 2, box.background_color,
				box.background_color, 24);
}
 800338a:	e015      	b.n	80033b8 <dis_month+0x70>
		lcd_ShowIntNum(box.x_month, box.y_month, number, 2, box.background_color,
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <dis_month+0x78>)
 800338e:	7c9b      	ldrb	r3, [r3, #18]
 8003390:	b298      	uxth	r0, r3
 8003392:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <dis_month+0x78>)
 8003394:	7cdb      	ldrb	r3, [r3, #19]
 8003396:	b299      	uxth	r1, r3
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	b29c      	uxth	r4, r3
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <dis_month+0x78>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	b29b      	uxth	r3, r3
				box.background_color, 24);
 80033a2:	4a07      	ldr	r2, [pc, #28]	; (80033c0 <dis_month+0x78>)
 80033a4:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_month, box.y_month, number, 2, box.background_color,
 80033a6:	b292      	uxth	r2, r2
 80033a8:	2518      	movs	r5, #24
 80033aa:	9502      	str	r5, [sp, #8]
 80033ac:	9201      	str	r2, [sp, #4]
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	2302      	movs	r3, #2
 80033b2:	4622      	mov	r2, r4
 80033b4:	f7fe fb7c 	bl	8001ab0 <lcd_ShowIntNum>
}
 80033b8:	bf00      	nop
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bdb0      	pop	{r4, r5, r7, pc}
 80033c0:	20000220 	.word	0x20000220

080033c4 <dis_year>:
 * @brief  display years in lcd or not
 * @param	i - yes or no
 * 			number - value is displayed in years area
 * @retval none
 */
void dis_year(uint8_t number, bool i) {
 80033c4:	b5b0      	push	{r4, r5, r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af04      	add	r7, sp, #16
 80033ca:	4603      	mov	r3, r0
 80033cc:	460a      	mov	r2, r1
 80033ce:	71fb      	strb	r3, [r7, #7]
 80033d0:	4613      	mov	r3, r2
 80033d2:	71bb      	strb	r3, [r7, #6]
	if (i)
 80033d4:	79bb      	ldrb	r3, [r7, #6]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d016      	beq.n	8003408 <dis_year+0x44>
		lcd_ShowIntNum(box.x_year, box.y_year, number, 2, box.text_color,
 80033da:	4b18      	ldr	r3, [pc, #96]	; (800343c <dis_year+0x78>)
 80033dc:	7d1b      	ldrb	r3, [r3, #20]
 80033de:	b298      	uxth	r0, r3
 80033e0:	4b16      	ldr	r3, [pc, #88]	; (800343c <dis_year+0x78>)
 80033e2:	7d5b      	ldrb	r3, [r3, #21]
 80033e4:	b299      	uxth	r1, r3
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	b29c      	uxth	r4, r3
 80033ea:	4b14      	ldr	r3, [pc, #80]	; (800343c <dis_year+0x78>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	b29b      	uxth	r3, r3
				box.background_color, 24);
 80033f0:	4a12      	ldr	r2, [pc, #72]	; (800343c <dis_year+0x78>)
 80033f2:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_year, box.y_year, number, 2, box.text_color,
 80033f4:	b292      	uxth	r2, r2
 80033f6:	2518      	movs	r5, #24
 80033f8:	9502      	str	r5, [sp, #8]
 80033fa:	9201      	str	r2, [sp, #4]
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	2302      	movs	r3, #2
 8003400:	4622      	mov	r2, r4
 8003402:	f7fe fb55 	bl	8001ab0 <lcd_ShowIntNum>
	else
		lcd_ShowIntNum(box.x_year, box.y_year, number, 2, box.background_color,
				box.background_color, 24);
}
 8003406:	e015      	b.n	8003434 <dis_year+0x70>
		lcd_ShowIntNum(box.x_year, box.y_year, number, 2, box.background_color,
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <dis_year+0x78>)
 800340a:	7d1b      	ldrb	r3, [r3, #20]
 800340c:	b298      	uxth	r0, r3
 800340e:	4b0b      	ldr	r3, [pc, #44]	; (800343c <dis_year+0x78>)
 8003410:	7d5b      	ldrb	r3, [r3, #21]
 8003412:	b299      	uxth	r1, r3
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	b29c      	uxth	r4, r3
 8003418:	4b08      	ldr	r3, [pc, #32]	; (800343c <dis_year+0x78>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	b29b      	uxth	r3, r3
				box.background_color, 24);
 800341e:	4a07      	ldr	r2, [pc, #28]	; (800343c <dis_year+0x78>)
 8003420:	6852      	ldr	r2, [r2, #4]
		lcd_ShowIntNum(box.x_year, box.y_year, number, 2, box.background_color,
 8003422:	b292      	uxth	r2, r2
 8003424:	2518      	movs	r5, #24
 8003426:	9502      	str	r5, [sp, #8]
 8003428:	9201      	str	r2, [sp, #4]
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	2302      	movs	r3, #2
 800342e:	4622      	mov	r2, r4
 8003430:	f7fe fb3e 	bl	8001ab0 <lcd_ShowIntNum>
}
 8003434:	bf00      	nop
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bdb0      	pop	{r4, r5, r7, pc}
 800343c:	20000220 	.word	0x20000220

08003440 <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8003444:	2205      	movs	r2, #5
 8003446:	4903      	ldr	r1, [pc, #12]	; (8003454 <sensor_init+0x14>)
 8003448:	4803      	ldr	r0, [pc, #12]	; (8003458 <sensor_init+0x18>)
 800344a:	f000 ff7d 	bl	8004348 <HAL_ADC_Start_DMA>
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000238 	.word	0x20000238
 8003458:	2000008c 	.word	0x2000008c

0800345c <sensor_Read>:

void sensor_Read(){
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8003460:	2205      	movs	r2, #5
 8003462:	4903      	ldr	r1, [pc, #12]	; (8003470 <sensor_Read+0x14>)
 8003464:	4803      	ldr	r0, [pc, #12]	; (8003474 <sensor_Read+0x18>)
 8003466:	f000 ff6f 	bl	8004348 <HAL_ADC_Start_DMA>
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000238 	.word	0x20000238
 8003474:	2000008c 	.word	0x2000008c

08003478 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
	return adc_receive[2];
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <sensor_GetLight+0x14>)
 800347e:	889b      	ldrh	r3, [r3, #4]
}
 8003480:	4618      	mov	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	20000238 	.word	0x20000238

08003490 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8003494:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <sensor_GetPotentiometer+0x14>)
 8003496:	88db      	ldrh	r3, [r3, #6]
}
 8003498:	4618      	mov	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20000238 	.word	0x20000238

080034a8 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 80034ac:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <sensor_GetVoltage+0x70>)
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	ee07 3a90 	vmov	s15, r3
 80034b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b8:	ee17 0a90 	vmov	r0, s15
 80034bc:	f7fd f83c 	bl	8000538 <__aeabi_f2d>
 80034c0:	a311      	add	r3, pc, #68	; (adr r3, 8003508 <sensor_GetVoltage+0x60>)
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	f7fd f88f 	bl	80005e8 <__aeabi_dmul>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4610      	mov	r0, r2
 80034d0:	4619      	mov	r1, r3
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	4b11      	ldr	r3, [pc, #68]	; (800351c <sensor_GetVoltage+0x74>)
 80034d8:	f7fd f886 	bl	80005e8 <__aeabi_dmul>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4610      	mov	r0, r2
 80034e2:	4619      	mov	r1, r3
 80034e4:	a30a      	add	r3, pc, #40	; (adr r3, 8003510 <sensor_GetVoltage+0x68>)
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	f7fd f9a7 	bl	800083c <__aeabi_ddiv>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4610      	mov	r0, r2
 80034f4:	4619      	mov	r1, r3
 80034f6:	f7fd faa9 	bl	8000a4c <__aeabi_d2f>
 80034fa:	4603      	mov	r3, r0
 80034fc:	ee07 3a90 	vmov	s15, r3
}
 8003500:	eeb0 0a67 	vmov.f32	s0, s15
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	66666666 	.word	0x66666666
 800350c:	400a6666 	.word	0x400a6666
 8003510:	cccccccd 	.word	0xcccccccd
 8003514:	40b908ac 	.word	0x40b908ac
 8003518:	20000238 	.word	0x20000238
 800351c:	40280000 	.word	0x40280000

08003520 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 8003524:	4b28      	ldr	r3, [pc, #160]	; (80035c8 <sensor_GetCurrent+0xa8>)
 8003526:	885b      	ldrh	r3, [r3, #2]
 8003528:	ee07 3a90 	vmov	s15, r3
 800352c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003530:	ee17 0a90 	vmov	r0, s15
 8003534:	f7fd f800 	bl	8000538 <__aeabi_f2d>
 8003538:	a31f      	add	r3, pc, #124	; (adr r3, 80035b8 <sensor_GetCurrent+0x98>)
 800353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353e:	f7fd f853 	bl	80005e8 <__aeabi_dmul>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4610      	mov	r0, r2
 8003548:	4619      	mov	r1, r3
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	4b1f      	ldr	r3, [pc, #124]	; (80035cc <sensor_GetCurrent+0xac>)
 8003550:	f7fd f84a 	bl	80005e8 <__aeabi_dmul>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4610      	mov	r0, r2
 800355a:	4619      	mov	r1, r3
 800355c:	a318      	add	r3, pc, #96	; (adr r3, 80035c0 <sensor_GetCurrent+0xa0>)
 800355e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003562:	f7fd f96b 	bl	800083c <__aeabi_ddiv>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4610      	mov	r0, r2
 800356c:	4619      	mov	r1, r3
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	4b17      	ldr	r3, [pc, #92]	; (80035d0 <sensor_GetCurrent+0xb0>)
 8003574:	f7fc fe80 	bl	8000278 <__aeabi_dsub>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4610      	mov	r0, r2
 800357e:	4619      	mov	r1, r3
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <sensor_GetCurrent+0xb4>)
 8003586:	f7fd f82f 	bl	80005e8 <__aeabi_dmul>
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4610      	mov	r0, r2
 8003590:	4619      	mov	r1, r3
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <sensor_GetCurrent+0xb0>)
 8003598:	f7fd f950 	bl	800083c <__aeabi_ddiv>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4610      	mov	r0, r2
 80035a2:	4619      	mov	r1, r3
 80035a4:	f7fd fa52 	bl	8000a4c <__aeabi_d2f>
 80035a8:	4603      	mov	r3, r0
 80035aa:	ee07 3a90 	vmov	s15, r3
}
 80035ae:	eeb0 0a67 	vmov.f32	s0, s15
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	f3af 8000 	nop.w
 80035b8:	66666666 	.word	0x66666666
 80035bc:	400a6666 	.word	0x400a6666
 80035c0:	147ae148 	.word	0x147ae148
 80035c4:	40a4b2ee 	.word	0x40a4b2ee
 80035c8:	20000238 	.word	0x20000238
 80035cc:	408f4000 	.word	0x408f4000
 80035d0:	40040000 	.word	0x40040000
 80035d4:	40140000 	.word	0x40140000

080035d8 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 80035dc:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <sensor_GetTemperature+0x30>)
 80035de:	891b      	ldrh	r3, [r3, #8]
 80035e0:	ee07 3a90 	vmov	s15, r3
 80035e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800360c <sensor_GetTemperature+0x34>
 80035ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035f0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003610 <sensor_GetTemperature+0x38>
 80035f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80035f8:	eef0 7a66 	vmov.f32	s15, s13
}
 80035fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	20000238 	.word	0x20000238
 800360c:	43a50000 	.word	0x43a50000
 8003610:	457ff000 	.word	0x457ff000

08003614 <HAL_TIM_PeriodElapsedCallback>:
 * timer[2]: to increase value by 1 over time
 * timer[3]: to lcd show sensor time
 * timer[4]: to notify Potentiometer
 * */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	run_timer();
 800361c:	f000 f830 	bl	8003680 <run_timer>
}
 8003620:	bf00      	nop
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <set_timer>:
 * @brief:	turn timer on and set value
 * @para:	i: id of timer
 * 			time: unit is ms
 * @retval:	none
 * */
void set_timer(unsigned i, unsigned int time) {
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
	timer[i].count = time * FREQUENCY_OF_TIM / 1000.0;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003638:	fb02 f303 	mul.w	r3, r2, r3
 800363c:	4618      	mov	r0, r3
 800363e:	f7fc ff59 	bl	80004f4 <__aeabi_ui2d>
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <set_timer+0x50>)
 8003648:	f7fd f8f8 	bl	800083c <__aeabi_ddiv>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4610      	mov	r0, r2
 8003652:	4619      	mov	r1, r3
 8003654:	f7fd f9da 	bl	8000a0c <__aeabi_d2uiz>
 8003658:	4602      	mov	r2, r0
 800365a:	4908      	ldr	r1, [pc, #32]	; (800367c <set_timer+0x54>)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	440b      	add	r3, r1
 8003662:	605a      	str	r2, [r3, #4]
	timer[i].state = 1;
 8003664:	4a05      	ldr	r2, [pc, #20]	; (800367c <set_timer+0x54>)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2101      	movs	r1, #1
 800366a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	408f4000 	.word	0x408f4000
 800367c:	20000244 	.word	0x20000244

08003680 <run_timer>:
/*
 * @brief:	run all timers that is on
 * @para:	none
 * @retval:	none
 * */
void run_timer(void) {
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
	for (unsigned i = 0; i < NUMBER_OF_TIMER; i++) {
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	e01f      	b.n	80036cc <run_timer+0x4c>
		if (timer[i].state) {
 800368c:	4a14      	ldr	r2, [pc, #80]	; (80036e0 <run_timer+0x60>)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d016      	beq.n	80036c6 <run_timer+0x46>
			timer[i].count--;
 8003698:	4a11      	ldr	r2, [pc, #68]	; (80036e0 <run_timer+0x60>)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4413      	add	r3, r2
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	1e5a      	subs	r2, r3, #1
 80036a4:	490e      	ldr	r1, [pc, #56]	; (80036e0 <run_timer+0x60>)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	440b      	add	r3, r1
 80036ac:	605a      	str	r2, [r3, #4]
			if (timer[i].count <= 0) {
 80036ae:	4a0c      	ldr	r2, [pc, #48]	; (80036e0 <run_timer+0x60>)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4413      	add	r3, r2
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d104      	bne.n	80036c6 <run_timer+0x46>
				timer[i].state = 0;
 80036bc:	4a08      	ldr	r2, [pc, #32]	; (80036e0 <run_timer+0x60>)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2100      	movs	r1, #0
 80036c2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (unsigned i = 0; i < NUMBER_OF_TIMER; i++) {
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3301      	adds	r3, #1
 80036ca:	607b      	str	r3, [r7, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d9dc      	bls.n	800368c <run_timer+0xc>
			}
		}
	}
}
 80036d2:	bf00      	nop
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	20000244 	.word	0x20000244

080036e4 <is_timer_on>:

bool is_timer_on(unsigned i) {
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	return (timer[i].state == 1);
 80036ec:	4a07      	ldr	r2, [pc, #28]	; (800370c <is_timer_on+0x28>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	bf0c      	ite	eq
 80036f8:	2301      	moveq	r3, #1
 80036fa:	2300      	movne	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	20000244 	.word	0x20000244

08003710 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003714:	4b17      	ldr	r3, [pc, #92]	; (8003774 <MX_SPI1_Init+0x64>)
 8003716:	4a18      	ldr	r2, [pc, #96]	; (8003778 <MX_SPI1_Init+0x68>)
 8003718:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800371a:	4b16      	ldr	r3, [pc, #88]	; (8003774 <MX_SPI1_Init+0x64>)
 800371c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003720:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003722:	4b14      	ldr	r3, [pc, #80]	; (8003774 <MX_SPI1_Init+0x64>)
 8003724:	2200      	movs	r2, #0
 8003726:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003728:	4b12      	ldr	r3, [pc, #72]	; (8003774 <MX_SPI1_Init+0x64>)
 800372a:	2200      	movs	r2, #0
 800372c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800372e:	4b11      	ldr	r3, [pc, #68]	; (8003774 <MX_SPI1_Init+0x64>)
 8003730:	2200      	movs	r2, #0
 8003732:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003734:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <MX_SPI1_Init+0x64>)
 8003736:	2200      	movs	r2, #0
 8003738:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800373a:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <MX_SPI1_Init+0x64>)
 800373c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003740:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003742:	4b0c      	ldr	r3, [pc, #48]	; (8003774 <MX_SPI1_Init+0x64>)
 8003744:	2200      	movs	r2, #0
 8003746:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003748:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <MX_SPI1_Init+0x64>)
 800374a:	2200      	movs	r2, #0
 800374c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800374e:	4b09      	ldr	r3, [pc, #36]	; (8003774 <MX_SPI1_Init+0x64>)
 8003750:	2200      	movs	r2, #0
 8003752:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003754:	4b07      	ldr	r3, [pc, #28]	; (8003774 <MX_SPI1_Init+0x64>)
 8003756:	2200      	movs	r2, #0
 8003758:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <MX_SPI1_Init+0x64>)
 800375c:	220a      	movs	r2, #10
 800375e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003760:	4804      	ldr	r0, [pc, #16]	; (8003774 <MX_SPI1_Init+0x64>)
 8003762:	f003 fce1 	bl	8007128 <HAL_SPI_Init>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800376c:	f7fe fd42 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003770:	bf00      	nop
 8003772:	bd80      	pop	{r7, pc}
 8003774:	2000026c 	.word	0x2000026c
 8003778:	40013000 	.word	0x40013000

0800377c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08a      	sub	sp, #40	; 0x28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003784:	f107 0314 	add.w	r3, r7, #20
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	60da      	str	r2, [r3, #12]
 8003792:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a19      	ldr	r2, [pc, #100]	; (8003800 <HAL_SPI_MspInit+0x84>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d12b      	bne.n	80037f6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	4b18      	ldr	r3, [pc, #96]	; (8003804 <HAL_SPI_MspInit+0x88>)
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	4a17      	ldr	r2, [pc, #92]	; (8003804 <HAL_SPI_MspInit+0x88>)
 80037a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037ac:	6453      	str	r3, [r2, #68]	; 0x44
 80037ae:	4b15      	ldr	r3, [pc, #84]	; (8003804 <HAL_SPI_MspInit+0x88>)
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	4b11      	ldr	r3, [pc, #68]	; (8003804 <HAL_SPI_MspInit+0x88>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	4a10      	ldr	r2, [pc, #64]	; (8003804 <HAL_SPI_MspInit+0x88>)
 80037c4:	f043 0302 	orr.w	r3, r3, #2
 80037c8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ca:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <HAL_SPI_MspInit+0x88>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80037d6:	2338      	movs	r3, #56	; 0x38
 80037d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037da:	2302      	movs	r3, #2
 80037dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e2:	2303      	movs	r3, #3
 80037e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037e6:	2305      	movs	r3, #5
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ea:	f107 0314 	add.w	r3, r7, #20
 80037ee:	4619      	mov	r1, r3
 80037f0:	4805      	ldr	r0, [pc, #20]	; (8003808 <HAL_SPI_MspInit+0x8c>)
 80037f2:	f001 fe8b 	bl	800550c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80037f6:	bf00      	nop
 80037f8:	3728      	adds	r7, #40	; 0x28
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40013000 	.word	0x40013000
 8003804:	40023800 	.word	0x40023800
 8003808:	40020400 	.word	0x40020400

0800380c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	607b      	str	r3, [r7, #4]
 8003816:	4b10      	ldr	r3, [pc, #64]	; (8003858 <HAL_MspInit+0x4c>)
 8003818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381a:	4a0f      	ldr	r2, [pc, #60]	; (8003858 <HAL_MspInit+0x4c>)
 800381c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003820:	6453      	str	r3, [r2, #68]	; 0x44
 8003822:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <HAL_MspInit+0x4c>)
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800382a:	607b      	str	r3, [r7, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	603b      	str	r3, [r7, #0]
 8003832:	4b09      	ldr	r3, [pc, #36]	; (8003858 <HAL_MspInit+0x4c>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	4a08      	ldr	r2, [pc, #32]	; (8003858 <HAL_MspInit+0x4c>)
 8003838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383c:	6413      	str	r3, [r2, #64]	; 0x40
 800383e:	4b06      	ldr	r3, [pc, #24]	; (8003858 <HAL_MspInit+0x4c>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40023800 	.word	0x40023800

0800385c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003860:	e7fe      	b.n	8003860 <NMI_Handler+0x4>

08003862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003862:	b480      	push	{r7}
 8003864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003866:	e7fe      	b.n	8003866 <HardFault_Handler+0x4>

08003868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800386c:	e7fe      	b.n	800386c <MemManage_Handler+0x4>

0800386e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800386e:	b480      	push	{r7}
 8003870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003872:	e7fe      	b.n	8003872 <BusFault_Handler+0x4>

08003874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003878:	e7fe      	b.n	8003878 <UsageFault_Handler+0x4>

0800387a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800387a:	b480      	push	{r7}
 800387c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003896:	b480      	push	{r7}
 8003898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038a8:	f000 fcc6 	bl	8004238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038ac:	bf00      	nop
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038b4:	4802      	ldr	r0, [pc, #8]	; (80038c0 <TIM2_IRQHandler+0x10>)
 80038b6:	f004 facd 	bl	8007e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	200002cc 	.word	0x200002cc

080038c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80038c8:	4802      	ldr	r0, [pc, #8]	; (80038d4 <USART1_IRQHandler+0x10>)
 80038ca:	f005 fa2d 	bl	8008d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200003c4 	.word	0x200003c4

080038d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80038dc:	4802      	ldr	r0, [pc, #8]	; (80038e8 <DMA2_Stream0_IRQHandler+0x10>)
 80038de:	f001 fbab 	bl	8005038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	200000d4 	.word	0x200000d4

080038ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038f4:	4a14      	ldr	r2, [pc, #80]	; (8003948 <_sbrk+0x5c>)
 80038f6:	4b15      	ldr	r3, [pc, #84]	; (800394c <_sbrk+0x60>)
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003900:	4b13      	ldr	r3, [pc, #76]	; (8003950 <_sbrk+0x64>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d102      	bne.n	800390e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003908:	4b11      	ldr	r3, [pc, #68]	; (8003950 <_sbrk+0x64>)
 800390a:	4a12      	ldr	r2, [pc, #72]	; (8003954 <_sbrk+0x68>)
 800390c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800390e:	4b10      	ldr	r3, [pc, #64]	; (8003950 <_sbrk+0x64>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4413      	add	r3, r2
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	429a      	cmp	r2, r3
 800391a:	d207      	bcs.n	800392c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800391c:	f006 fa6c 	bl	8009df8 <__errno>
 8003920:	4603      	mov	r3, r0
 8003922:	220c      	movs	r2, #12
 8003924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003926:	f04f 33ff 	mov.w	r3, #4294967295
 800392a:	e009      	b.n	8003940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800392c:	4b08      	ldr	r3, [pc, #32]	; (8003950 <_sbrk+0x64>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003932:	4b07      	ldr	r3, [pc, #28]	; (8003950 <_sbrk+0x64>)
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4413      	add	r3, r2
 800393a:	4a05      	ldr	r2, [pc, #20]	; (8003950 <_sbrk+0x64>)
 800393c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800393e:	68fb      	ldr	r3, [r7, #12]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	20020000 	.word	0x20020000
 800394c:	00000400 	.word	0x00000400
 8003950:	200002c4 	.word	0x200002c4
 8003954:	20000558 	.word	0x20000558

08003958 <sensor_diplay>:
/*
 * @brief:	update sensor value
 * @para:	none
 * @retval:	none
 * */
void sensor_diplay(){
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af04      	add	r7, sp, #16
	  if(!is_timer_on(0)){
 800395e:	2000      	movs	r0, #0
 8003960:	f7ff fec0 	bl	80036e4 <is_timer_on>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	f040 808a 	bne.w	8003a80 <sensor_diplay+0x128>
		  set_timer(0, READ_BUTTON_TIME);
 800396c:	210a      	movs	r1, #10
 800396e:	2000      	movs	r0, #0
 8003970:	f7ff fe5a 	bl	8003628 <set_timer>
		  ds3231_ReadTime();
 8003974:	f7fd fc6a 	bl	800124c <ds3231_ReadTime>
		  button_Scan();
 8003978:	f7fd fb60 	bl	800103c <button_Scan>
		  sensor_Read();
 800397c:	f7ff fd6e 	bl	800345c <sensor_Read>
		  //Check Potentiometer value and send notify
		  if(sensor_GetPotentiometer() >= 4095 * 0.7){
 8003980:	f7ff fd86 	bl	8003490 <sensor_GetPotentiometer>
 8003984:	4603      	mov	r3, r0
 8003986:	461a      	mov	r2, r3
 8003988:	f640 3332 	movw	r3, #2866	; 0xb32
 800398c:	429a      	cmp	r2, r3
 800398e:	d934      	bls.n	80039fa <sensor_diplay+0xa2>
			  if(isnotify == 1){
 8003990:	4b43      	ldr	r3, [pc, #268]	; (8003aa0 <sensor_diplay+0x148>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d11a      	bne.n	80039ce <sensor_diplay+0x76>
				  buzzer_SetVolume(volval);
 8003998:	4b42      	ldr	r3, [pc, #264]	; (8003aa4 <sensor_diplay+0x14c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd fbfa 	bl	8001198 <buzzer_SetVolume>
				  if(!is_timer_on(4)){
 80039a4:	2004      	movs	r0, #4
 80039a6:	f7ff fe9d 	bl	80036e4 <is_timer_on>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d127      	bne.n	8003a00 <sensor_diplay+0xa8>
					  set_timer(4, ONE_SECOND);
 80039b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80039b4:	2004      	movs	r0, #4
 80039b6:	f7ff fe37 	bl	8003628 <set_timer>
					  isnotify = 0;
 80039ba:	4b39      	ldr	r3, [pc, #228]	; (8003aa0 <sensor_diplay+0x148>)
 80039bc:	2200      	movs	r2, #0
 80039be:	701a      	strb	r2, [r3, #0]
	  				  uart_Rs232SendString("Potentiometer > 70%\n");
 80039c0:	4839      	ldr	r0, [pc, #228]	; (8003aa8 <sensor_diplay+0x150>)
 80039c2:	f000 facd 	bl	8003f60 <uart_Rs232SendString>
	  				  uart_Rs232SendString("Please reduce Potentiometer\n\n");
 80039c6:	4839      	ldr	r0, [pc, #228]	; (8003aac <sensor_diplay+0x154>)
 80039c8:	f000 faca 	bl	8003f60 <uart_Rs232SendString>
 80039cc:	e018      	b.n	8003a00 <sensor_diplay+0xa8>
				  }
			  }
			  else if(isnotify == 0){
 80039ce:	4b34      	ldr	r3, [pc, #208]	; (8003aa0 <sensor_diplay+0x148>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d114      	bne.n	8003a00 <sensor_diplay+0xa8>
				  buzzer_SetVolume(0);
 80039d6:	2000      	movs	r0, #0
 80039d8:	f7fd fbde 	bl	8001198 <buzzer_SetVolume>
				  if(!is_timer_on(4)){
 80039dc:	2004      	movs	r0, #4
 80039de:	f7ff fe81 	bl	80036e4 <is_timer_on>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10b      	bne.n	8003a00 <sensor_diplay+0xa8>
					  set_timer(4, ONE_SECOND);
 80039e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80039ec:	2004      	movs	r0, #4
 80039ee:	f7ff fe1b 	bl	8003628 <set_timer>
					  isnotify = 1;
 80039f2:	4b2b      	ldr	r3, [pc, #172]	; (8003aa0 <sensor_diplay+0x148>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	e002      	b.n	8003a00 <sensor_diplay+0xa8>
				  }
			  }
	  	  }
		  else{
			  buzzer_SetVolume(0);
 80039fa:	2000      	movs	r0, #0
 80039fc:	f7fd fbcc 	bl	8001198 <buzzer_SetVolume>
		  }

		  //change volume value
		  if(button_count[11] == 1){
 8003a00:	4b2b      	ldr	r3, [pc, #172]	; (8003ab0 <sensor_diplay+0x158>)
 8003a02:	8adb      	ldrh	r3, [r3, #22]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d11b      	bne.n	8003a40 <sensor_diplay+0xe8>
			  volval += 10;
 8003a08:	4b26      	ldr	r3, [pc, #152]	; (8003aa4 <sensor_diplay+0x14c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	330a      	adds	r3, #10
 8003a0e:	4a25      	ldr	r2, [pc, #148]	; (8003aa4 <sensor_diplay+0x14c>)
 8003a10:	6013      	str	r3, [r2, #0]
			  if(volval > 99){
 8003a12:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <sensor_diplay+0x14c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b63      	cmp	r3, #99	; 0x63
 8003a18:	dd02      	ble.n	8003a20 <sensor_diplay+0xc8>
				  volval = 0;
 8003a1a:	4b22      	ldr	r3, [pc, #136]	; (8003aa4 <sensor_diplay+0x14c>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
			  }
			  lcd_ShowIntNum(10, 300, volval, 2, BLUE, WHITE, 16);
 8003a20:	4b20      	ldr	r3, [pc, #128]	; (8003aa4 <sensor_diplay+0x14c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	2310      	movs	r3, #16
 8003a28:	9302      	str	r3, [sp, #8]
 8003a2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a2e:	9301      	str	r3, [sp, #4]
 8003a30:	231f      	movs	r3, #31
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	2302      	movs	r3, #2
 8003a36:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003a3a:	200a      	movs	r0, #10
 8003a3c:	f7fe f838 	bl	8001ab0 <lcd_ShowIntNum>
		  }
		  if(button_count[15] == 1){
 8003a40:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <sensor_diplay+0x158>)
 8003a42:	8bdb      	ldrh	r3, [r3, #30]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d11b      	bne.n	8003a80 <sensor_diplay+0x128>
			  volval -= 10;
 8003a48:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <sensor_diplay+0x14c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3b0a      	subs	r3, #10
 8003a4e:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <sensor_diplay+0x14c>)
 8003a50:	6013      	str	r3, [r2, #0]
			  if(volval < 0){
 8003a52:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <sensor_diplay+0x14c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	da02      	bge.n	8003a60 <sensor_diplay+0x108>
				  volval = 99;
 8003a5a:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <sensor_diplay+0x14c>)
 8003a5c:	2263      	movs	r2, #99	; 0x63
 8003a5e:	601a      	str	r2, [r3, #0]
			  }
			  lcd_ShowIntNum(10, 300, volval, 2, BLUE, WHITE, 16);
 8003a60:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <sensor_diplay+0x14c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	2310      	movs	r3, #16
 8003a68:	9302      	str	r3, [sp, #8]
 8003a6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a6e:	9301      	str	r3, [sp, #4]
 8003a70:	231f      	movs	r3, #31
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	2302      	movs	r3, #2
 8003a76:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003a7a:	200a      	movs	r0, #10
 8003a7c:	f7fe f818 	bl	8001ab0 <lcd_ShowIntNum>
		  }
	  }
	  //show sensor value to LCD
	  if(!is_timer_on(3)){
 8003a80:	2003      	movs	r0, #3
 8003a82:	f7ff fe2f 	bl	80036e4 <is_timer_on>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d106      	bne.n	8003a9a <sensor_diplay+0x142>
		  set_timer(3, LCD_SENSOR_TIME);
 8003a8c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003a90:	2003      	movs	r0, #3
 8003a92:	f7ff fdc9 	bl	8003628 <set_timer>
		  LCD_show_sensor();
 8003a96:	f000 f80d 	bl	8003ab4 <LCD_show_sensor>
	  }
}
 8003a9a:	bf00      	nop
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	200002c8 	.word	0x200002c8
 8003aa4:	20000010 	.word	0x20000010
 8003aa8:	0800a764 	.word	0x0800a764
 8003aac:	0800a77c 	.word	0x0800a77c
 8003ab0:	20000134 	.word	0x20000134

08003ab4 <LCD_show_sensor>:
/*
 * @brief:	show sensor value to screen
 * @para:	none
 * @retval:	none
 * */
void LCD_show_sensor(){
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	ed2d 8b02 	vpush	{d8}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af04      	add	r7, sp, #16
	lcd_ShowStr(10, 100, "Voltage(V):", RED, WHITE, 16, 0);
 8003abe:	2300      	movs	r3, #0
 8003ac0:	9302      	str	r3, [sp, #8]
 8003ac2:	2310      	movs	r3, #16
 8003ac4:	9301      	str	r3, [sp, #4]
 8003ac6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003ad0:	4a7d      	ldr	r2, [pc, #500]	; (8003cc8 <LCD_show_sensor+0x214>)
 8003ad2:	2164      	movs	r1, #100	; 0x64
 8003ad4:	200a      	movs	r0, #10
 8003ad6:	f7fe fa75 	bl	8001fc4 <lcd_ShowStr>
	lcd_ShowFloatNum(130, 100, sensor_GetVoltage(), 4, RED,	WHITE, 16);
 8003ada:	f7ff fce5 	bl	80034a8 <sensor_GetVoltage>
 8003ade:	eef0 7a40 	vmov.f32	s15, s0
 8003ae2:	2310      	movs	r3, #16
 8003ae4:	9301      	str	r3, [sp, #4]
 8003ae6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003af0:	2204      	movs	r2, #4
 8003af2:	eeb0 0a67 	vmov.f32	s0, s15
 8003af6:	2164      	movs	r1, #100	; 0x64
 8003af8:	2082      	movs	r0, #130	; 0x82
 8003afa:	f7fe f857 	bl	8001bac <lcd_ShowFloatNum>

	lcd_ShowStr(10, 120, "Current(mA):", RED, WHITE, 16, 0);
 8003afe:	2300      	movs	r3, #0
 8003b00:	9302      	str	r3, [sp, #8]
 8003b02:	2310      	movs	r3, #16
 8003b04:	9301      	str	r3, [sp, #4]
 8003b06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b10:	4a6e      	ldr	r2, [pc, #440]	; (8003ccc <LCD_show_sensor+0x218>)
 8003b12:	2178      	movs	r1, #120	; 0x78
 8003b14:	200a      	movs	r0, #10
 8003b16:	f7fe fa55 	bl	8001fc4 <lcd_ShowStr>
	lcd_ShowFloatNum(130, 120, sensor_GetCurrent(), 4, RED, WHITE, 16);
 8003b1a:	f7ff fd01 	bl	8003520 <sensor_GetCurrent>
 8003b1e:	eef0 7a40 	vmov.f32	s15, s0
 8003b22:	2310      	movs	r3, #16
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b30:	2204      	movs	r2, #4
 8003b32:	eeb0 0a67 	vmov.f32	s0, s15
 8003b36:	2178      	movs	r1, #120	; 0x78
 8003b38:	2082      	movs	r0, #130	; 0x82
 8003b3a:	f7fe f837 	bl	8001bac <lcd_ShowFloatNum>

	lcd_ShowStr(10, 140, "Power(mW):", RED, WHITE, 16, 0);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	9302      	str	r3, [sp, #8]
 8003b42:	2310      	movs	r3, #16
 8003b44:	9301      	str	r3, [sp, #4]
 8003b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b50:	4a5f      	ldr	r2, [pc, #380]	; (8003cd0 <LCD_show_sensor+0x21c>)
 8003b52:	218c      	movs	r1, #140	; 0x8c
 8003b54:	200a      	movs	r0, #10
 8003b56:	f7fe fa35 	bl	8001fc4 <lcd_ShowStr>
	lcd_ShowFloatNum(130, 140, sensor_GetCurrent() * sensor_GetVoltage(), 4, RED, WHITE, 16);
 8003b5a:	f7ff fce1 	bl	8003520 <sensor_GetCurrent>
 8003b5e:	eeb0 8a40 	vmov.f32	s16, s0
 8003b62:	f7ff fca1 	bl	80034a8 <sensor_GetVoltage>
 8003b66:	eef0 7a40 	vmov.f32	s15, s0
 8003b6a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003b6e:	2310      	movs	r3, #16
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b82:	218c      	movs	r1, #140	; 0x8c
 8003b84:	2082      	movs	r0, #130	; 0x82
 8003b86:	f7fe f811 	bl	8001bac <lcd_ShowFloatNum>

	lcd_ShowStr(10, 160, "Light:", RED, WHITE, 16, 0);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	9302      	str	r3, [sp, #8]
 8003b8e:	2310      	movs	r3, #16
 8003b90:	9301      	str	r3, [sp, #4]
 8003b92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003b9c:	4a4d      	ldr	r2, [pc, #308]	; (8003cd4 <LCD_show_sensor+0x220>)
 8003b9e:	21a0      	movs	r1, #160	; 0xa0
 8003ba0:	200a      	movs	r0, #10
 8003ba2:	f7fe fa0f 	bl	8001fc4 <lcd_ShowStr>
	if(sensor_GetLight() <= 4095*0.75){
 8003ba6:	f7ff fc67 	bl	8003478 <sensor_GetLight>
 8003baa:	4603      	mov	r3, r0
 8003bac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bb0:	d20e      	bcs.n	8003bd0 <LCD_show_sensor+0x11c>
			lcd_ShowStr(60, 160, "(Strong)", RED, WHITE, 16, 0);
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	9302      	str	r3, [sp, #8]
 8003bb6:	2310      	movs	r3, #16
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003bc4:	4a44      	ldr	r2, [pc, #272]	; (8003cd8 <LCD_show_sensor+0x224>)
 8003bc6:	21a0      	movs	r1, #160	; 0xa0
 8003bc8:	203c      	movs	r0, #60	; 0x3c
 8003bca:	f7fe f9fb 	bl	8001fc4 <lcd_ShowStr>
 8003bce:	e00d      	b.n	8003bec <LCD_show_sensor+0x138>
		}
		else{
			lcd_ShowStr(60, 160, "(Weak)  ", RED, WHITE, 16, 0);
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	9302      	str	r3, [sp, #8]
 8003bd4:	2310      	movs	r3, #16
 8003bd6:	9301      	str	r3, [sp, #4]
 8003bd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003be2:	4a3e      	ldr	r2, [pc, #248]	; (8003cdc <LCD_show_sensor+0x228>)
 8003be4:	21a0      	movs	r1, #160	; 0xa0
 8003be6:	203c      	movs	r0, #60	; 0x3c
 8003be8:	f7fe f9ec 	bl	8001fc4 <lcd_ShowStr>
		}
	lcd_ShowIntNum(130, 160, sensor_GetLight(), 4, RED, WHITE, 16);
 8003bec:	f7ff fc44 	bl	8003478 <sensor_GetLight>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	9302      	str	r3, [sp, #8]
 8003bf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	2304      	movs	r3, #4
 8003c06:	21a0      	movs	r1, #160	; 0xa0
 8003c08:	2082      	movs	r0, #130	; 0x82
 8003c0a:	f7fd ff51 	bl	8001ab0 <lcd_ShowIntNum>


	lcd_ShowStr(10, 180, "Poten(Ohm):", RED, WHITE, 16, 0);
 8003c0e:	2300      	movs	r3, #0
 8003c10:	9302      	str	r3, [sp, #8]
 8003c12:	2310      	movs	r3, #16
 8003c14:	9301      	str	r3, [sp, #4]
 8003c16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c20:	4a2f      	ldr	r2, [pc, #188]	; (8003ce0 <LCD_show_sensor+0x22c>)
 8003c22:	21b4      	movs	r1, #180	; 0xb4
 8003c24:	200a      	movs	r0, #10
 8003c26:	f7fe f9cd 	bl	8001fc4 <lcd_ShowStr>
	lcd_ShowIntNum(130, 180, sensor_GetPotentiometer()*100/4095, 2, RED, WHITE, 16);
 8003c2a:	f7ff fc31 	bl	8003490 <sensor_GetPotentiometer>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	461a      	mov	r2, r3
 8003c32:	2364      	movs	r3, #100	; 0x64
 8003c34:	fb02 f303 	mul.w	r3, r2, r3
 8003c38:	4a2a      	ldr	r2, [pc, #168]	; (8003ce4 <LCD_show_sensor+0x230>)
 8003c3a:	fb82 1203 	smull	r1, r2, r2, r3
 8003c3e:	441a      	add	r2, r3
 8003c40:	12d2      	asrs	r2, r2, #11
 8003c42:	17db      	asrs	r3, r3, #31
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	2310      	movs	r3, #16
 8003c4a:	9302      	str	r3, [sp, #8]
 8003c4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	2302      	movs	r3, #2
 8003c5a:	21b4      	movs	r1, #180	; 0xb4
 8003c5c:	2082      	movs	r0, #130	; 0x82
 8003c5e:	f7fd ff27 	bl	8001ab0 <lcd_ShowIntNum>
	lcd_ShowStr(180, 180, "%", RED, WHITE, 16, 0);
 8003c62:	2300      	movs	r3, #0
 8003c64:	9302      	str	r3, [sp, #8]
 8003c66:	2310      	movs	r3, #16
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c74:	4a1c      	ldr	r2, [pc, #112]	; (8003ce8 <LCD_show_sensor+0x234>)
 8003c76:	21b4      	movs	r1, #180	; 0xb4
 8003c78:	20b4      	movs	r0, #180	; 0xb4
 8003c7a:	f7fe f9a3 	bl	8001fc4 <lcd_ShowStr>

	lcd_ShowStr (10, 200, "Temp(C):", RED, WHITE, 16, 0);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	9302      	str	r3, [sp, #8]
 8003c82:	2310      	movs	r3, #16
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c90:	4a16      	ldr	r2, [pc, #88]	; (8003cec <LCD_show_sensor+0x238>)
 8003c92:	21c8      	movs	r1, #200	; 0xc8
 8003c94:	200a      	movs	r0, #10
 8003c96:	f7fe f995 	bl	8001fc4 <lcd_ShowStr>
	lcd_ShowFloatNum (130, 200, sensor_GetTemperature(), 4, RED, WHITE, 16);
 8003c9a:	f7ff fc9d 	bl	80035d8 <sensor_GetTemperature>
 8003c9e:	eef0 7a40 	vmov.f32	s15, s0
 8003ca2:	2310      	movs	r3, #16
 8003ca4:	9301      	str	r3, [sp, #4]
 8003ca6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003cb0:	2204      	movs	r2, #4
 8003cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cb6:	21c8      	movs	r1, #200	; 0xc8
 8003cb8:	2082      	movs	r0, #130	; 0x82
 8003cba:	f7fd ff77 	bl	8001bac <lcd_ShowFloatNum>
}
 8003cbe:	bf00      	nop
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	ecbd 8b02 	vpop	{d8}
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	0800a79c 	.word	0x0800a79c
 8003ccc:	0800a7a8 	.word	0x0800a7a8
 8003cd0:	0800a7b8 	.word	0x0800a7b8
 8003cd4:	0800a7c4 	.word	0x0800a7c4
 8003cd8:	0800a7cc 	.word	0x0800a7cc
 8003cdc:	0800a7d8 	.word	0x0800a7d8
 8003ce0:	0800a7e4 	.word	0x0800a7e4
 8003ce4:	80080081 	.word	0x80080081
 8003ce8:	0800a7f0 	.word	0x0800a7f0
 8003cec:	0800a7f4 	.word	0x0800a7f4

08003cf0 <system_loop>:

void system_loop(void) {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
	sensor_diplay();
 8003cf4:	f7ff fe30 	bl	8003958 <sensor_diplay>
	fsm_clock();
 8003cf8:	f7fe fae8 	bl	80022cc <fsm_clock>
}
 8003cfc:	bf00      	nop
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d04:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <SystemInit+0x20>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0a:	4a05      	ldr	r2, [pc, #20]	; (8003d20 <SystemInit+0x20>)
 8003d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	e000ed00 	.word	0xe000ed00

08003d24 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d2a:	f107 0308 	add.w	r3, r7, #8
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	605a      	str	r2, [r3, #4]
 8003d34:	609a      	str	r2, [r3, #8]
 8003d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d38:	463b      	mov	r3, r7
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d40:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <MX_TIM2_Init+0x94>)
 8003d42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8003d48:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <MX_TIM2_Init+0x94>)
 8003d4a:	2253      	movs	r2, #83	; 0x53
 8003d4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d4e:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <MX_TIM2_Init+0x94>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003d54:	4b18      	ldr	r3, [pc, #96]	; (8003db8 <MX_TIM2_Init+0x94>)
 8003d56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d5c:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <MX_TIM2_Init+0x94>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d62:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <MX_TIM2_Init+0x94>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d68:	4813      	ldr	r0, [pc, #76]	; (8003db8 <MX_TIM2_Init+0x94>)
 8003d6a:	f003 fe91 	bl	8007a90 <HAL_TIM_Base_Init>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003d74:	f7fe fa3e 	bl	80021f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003d7e:	f107 0308 	add.w	r3, r7, #8
 8003d82:	4619      	mov	r1, r3
 8003d84:	480c      	ldr	r0, [pc, #48]	; (8003db8 <MX_TIM2_Init+0x94>)
 8003d86:	f004 fa2f 	bl	80081e8 <HAL_TIM_ConfigClockSource>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003d90:	f7fe fa30 	bl	80021f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d94:	2300      	movs	r3, #0
 8003d96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003d9c:	463b      	mov	r3, r7
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4805      	ldr	r0, [pc, #20]	; (8003db8 <MX_TIM2_Init+0x94>)
 8003da2:	f004 fe21 	bl	80089e8 <HAL_TIMEx_MasterConfigSynchronization>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003dac:	f7fe fa22 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003db0:	bf00      	nop
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	200002cc 	.word	0x200002cc

08003dbc <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dc2:	1d3b      	adds	r3, r7, #4
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	605a      	str	r2, [r3, #4]
 8003dca:	609a      	str	r2, [r3, #8]
 8003dcc:	60da      	str	r2, [r3, #12]
 8003dce:	611a      	str	r2, [r3, #16]
 8003dd0:	615a      	str	r2, [r3, #20]
 8003dd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003dd4:	4b1e      	ldr	r3, [pc, #120]	; (8003e50 <MX_TIM13_Init+0x94>)
 8003dd6:	4a1f      	ldr	r2, [pc, #124]	; (8003e54 <MX_TIM13_Init+0x98>)
 8003dd8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8003dda:	4b1d      	ldr	r3, [pc, #116]	; (8003e50 <MX_TIM13_Init+0x94>)
 8003ddc:	f240 3247 	movw	r2, #839	; 0x347
 8003de0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003de2:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <MX_TIM13_Init+0x94>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8003de8:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <MX_TIM13_Init+0x94>)
 8003dea:	2263      	movs	r2, #99	; 0x63
 8003dec:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dee:	4b18      	ldr	r3, [pc, #96]	; (8003e50 <MX_TIM13_Init+0x94>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003df4:	4b16      	ldr	r3, [pc, #88]	; (8003e50 <MX_TIM13_Init+0x94>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003dfa:	4815      	ldr	r0, [pc, #84]	; (8003e50 <MX_TIM13_Init+0x94>)
 8003dfc:	f003 fe48 	bl	8007a90 <HAL_TIM_Base_Init>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8003e06:	f7fe f9f5 	bl	80021f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8003e0a:	4811      	ldr	r0, [pc, #68]	; (8003e50 <MX_TIM13_Init+0x94>)
 8003e0c:	f003 ff00 	bl	8007c10 <HAL_TIM_PWM_Init>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8003e16:	f7fe f9ed 	bl	80021f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e1a:	2360      	movs	r3, #96	; 0x60
 8003e1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e2a:	1d3b      	adds	r3, r7, #4
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4807      	ldr	r0, [pc, #28]	; (8003e50 <MX_TIM13_Init+0x94>)
 8003e32:	f004 f917 	bl	8008064 <HAL_TIM_PWM_ConfigChannel>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8003e3c:	f7fe f9da 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8003e40:	4803      	ldr	r0, [pc, #12]	; (8003e50 <MX_TIM13_Init+0x94>)
 8003e42:	f000 f845 	bl	8003ed0 <HAL_TIM_MspPostInit>

}
 8003e46:	bf00      	nop
 8003e48:	3720      	adds	r7, #32
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000314 	.word	0x20000314
 8003e54:	40001c00 	.word	0x40001c00

08003e58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e68:	d116      	bne.n	8003e98 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	4b16      	ldr	r3, [pc, #88]	; (8003ec8 <HAL_TIM_Base_MspInit+0x70>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	4a15      	ldr	r2, [pc, #84]	; (8003ec8 <HAL_TIM_Base_MspInit+0x70>)
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	6413      	str	r3, [r2, #64]	; 0x40
 8003e7a:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <HAL_TIM_Base_MspInit+0x70>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003e86:	2200      	movs	r2, #0
 8003e88:	2100      	movs	r1, #0
 8003e8a:	201c      	movs	r0, #28
 8003e8c:	f000 ff05 	bl	8004c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e90:	201c      	movs	r0, #28
 8003e92:	f000 ff1e 	bl	8004cd2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003e96:	e012      	b.n	8003ebe <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a0b      	ldr	r2, [pc, #44]	; (8003ecc <HAL_TIM_Base_MspInit+0x74>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d10d      	bne.n	8003ebe <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <HAL_TIM_Base_MspInit+0x70>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	4a07      	ldr	r2, [pc, #28]	; (8003ec8 <HAL_TIM_Base_MspInit+0x70>)
 8003eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb2:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <HAL_TIM_Base_MspInit+0x70>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
}
 8003ebe:	bf00      	nop
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	40001c00 	.word	0x40001c00

08003ed0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ed8:	f107 030c 	add.w	r3, r7, #12
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	609a      	str	r2, [r3, #8]
 8003ee4:	60da      	str	r2, [r3, #12]
 8003ee6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a12      	ldr	r2, [pc, #72]	; (8003f38 <HAL_TIM_MspPostInit+0x68>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d11e      	bne.n	8003f30 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	4b11      	ldr	r3, [pc, #68]	; (8003f3c <HAL_TIM_MspPostInit+0x6c>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	4a10      	ldr	r2, [pc, #64]	; (8003f3c <HAL_TIM_MspPostInit+0x6c>)
 8003efc:	f043 0320 	orr.w	r3, r3, #32
 8003f00:	6313      	str	r3, [r2, #48]	; 0x30
 8003f02:	4b0e      	ldr	r3, [pc, #56]	; (8003f3c <HAL_TIM_MspPostInit+0x6c>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003f0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f14:	2302      	movs	r3, #2
 8003f16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003f20:	2309      	movs	r3, #9
 8003f22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f24:	f107 030c 	add.w	r3, r7, #12
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4805      	ldr	r0, [pc, #20]	; (8003f40 <HAL_TIM_MspPostInit+0x70>)
 8003f2c:	f001 faee 	bl	800550c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003f30:	bf00      	nop
 8003f32:	3720      	adds	r7, #32
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40001c00 	.word	0x40001c00
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40021400 	.word	0x40021400

08003f44 <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003f48:	2201      	movs	r2, #1
 8003f4a:	4903      	ldr	r1, [pc, #12]	; (8003f58 <uart_init_rs232+0x14>)
 8003f4c:	4803      	ldr	r0, [pc, #12]	; (8003f5c <uart_init_rs232+0x18>)
 8003f4e:	f004 feba 	bl	8008cc6 <HAL_UART_Receive_IT>
}
 8003f52:	bf00      	nop
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	2000035c 	.word	0x2000035c
 8003f5c:	200003c4 	.word	0x200003c4

08003f60 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	4907      	ldr	r1, [pc, #28]	; (8003f88 <uart_Rs232SendString+0x28>)
 8003f6c:	4807      	ldr	r0, [pc, #28]	; (8003f8c <uart_Rs232SendString+0x2c>)
 8003f6e:	f005 ff1b 	bl	8009da8 <siprintf>
 8003f72:	4603      	mov	r3, r0
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	230a      	movs	r3, #10
 8003f78:	4904      	ldr	r1, [pc, #16]	; (8003f8c <uart_Rs232SendString+0x2c>)
 8003f7a:	4805      	ldr	r0, [pc, #20]	; (8003f90 <uart_Rs232SendString+0x30>)
 8003f7c:	f004 fe11 	bl	8008ba2 <HAL_UART_Transmit>
}
 8003f80:	bf00      	nop
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	0800a800 	.word	0x0800a800
 8003f8c:	20000360 	.word	0x20000360
 8003f90:	200003c4 	.word	0x200003c4

08003f94 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a08      	ldr	r2, [pc, #32]	; (8003fc4 <HAL_UART_RxCpltCallback+0x30>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d10a      	bne.n	8003fbc <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8003fa6:	230a      	movs	r3, #10
 8003fa8:	2201      	movs	r2, #1
 8003faa:	4907      	ldr	r1, [pc, #28]	; (8003fc8 <HAL_UART_RxCpltCallback+0x34>)
 8003fac:	4807      	ldr	r0, [pc, #28]	; (8003fcc <HAL_UART_RxCpltCallback+0x38>)
 8003fae:	f004 fdf8 	bl	8008ba2 <HAL_UART_Transmit>

		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	4904      	ldr	r1, [pc, #16]	; (8003fc8 <HAL_UART_RxCpltCallback+0x34>)
 8003fb6:	4805      	ldr	r0, [pc, #20]	; (8003fcc <HAL_UART_RxCpltCallback+0x38>)
 8003fb8:	f004 fe85 	bl	8008cc6 <HAL_UART_Receive_IT>
	}
}
 8003fbc:	bf00      	nop
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40011000 	.word	0x40011000
 8003fc8:	2000035c 	.word	0x2000035c
 8003fcc:	200003c4 	.word	0x200003c4

08003fd0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003fd4:	4b11      	ldr	r3, [pc, #68]	; (800401c <MX_USART1_UART_Init+0x4c>)
 8003fd6:	4a12      	ldr	r2, [pc, #72]	; (8004020 <MX_USART1_UART_Init+0x50>)
 8003fd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003fda:	4b10      	ldr	r3, [pc, #64]	; (800401c <MX_USART1_UART_Init+0x4c>)
 8003fdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003fe0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003fe2:	4b0e      	ldr	r3, [pc, #56]	; (800401c <MX_USART1_UART_Init+0x4c>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <MX_USART1_UART_Init+0x4c>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003fee:	4b0b      	ldr	r3, [pc, #44]	; (800401c <MX_USART1_UART_Init+0x4c>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ff4:	4b09      	ldr	r3, [pc, #36]	; (800401c <MX_USART1_UART_Init+0x4c>)
 8003ff6:	220c      	movs	r2, #12
 8003ff8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ffa:	4b08      	ldr	r3, [pc, #32]	; (800401c <MX_USART1_UART_Init+0x4c>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004000:	4b06      	ldr	r3, [pc, #24]	; (800401c <MX_USART1_UART_Init+0x4c>)
 8004002:	2200      	movs	r2, #0
 8004004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004006:	4805      	ldr	r0, [pc, #20]	; (800401c <MX_USART1_UART_Init+0x4c>)
 8004008:	f004 fd7e 	bl	8008b08 <HAL_UART_Init>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004012:	f7fe f8ef 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	200003c4 	.word	0x200003c4
 8004020:	40011000 	.word	0x40011000

08004024 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08a      	sub	sp, #40	; 0x28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800402c:	f107 0314 	add.w	r3, r7, #20
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a1d      	ldr	r2, [pc, #116]	; (80040b8 <HAL_UART_MspInit+0x94>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d134      	bne.n	80040b0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	4b1c      	ldr	r3, [pc, #112]	; (80040bc <HAL_UART_MspInit+0x98>)
 800404c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404e:	4a1b      	ldr	r2, [pc, #108]	; (80040bc <HAL_UART_MspInit+0x98>)
 8004050:	f043 0310 	orr.w	r3, r3, #16
 8004054:	6453      	str	r3, [r2, #68]	; 0x44
 8004056:	4b19      	ldr	r3, [pc, #100]	; (80040bc <HAL_UART_MspInit+0x98>)
 8004058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405a:	f003 0310 	and.w	r3, r3, #16
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	4b15      	ldr	r3, [pc, #84]	; (80040bc <HAL_UART_MspInit+0x98>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	4a14      	ldr	r2, [pc, #80]	; (80040bc <HAL_UART_MspInit+0x98>)
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	6313      	str	r3, [r2, #48]	; 0x30
 8004072:	4b12      	ldr	r3, [pc, #72]	; (80040bc <HAL_UART_MspInit+0x98>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800407e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004084:	2302      	movs	r3, #2
 8004086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004088:	2300      	movs	r3, #0
 800408a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800408c:	2303      	movs	r3, #3
 800408e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004090:	2307      	movs	r3, #7
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004094:	f107 0314 	add.w	r3, r7, #20
 8004098:	4619      	mov	r1, r3
 800409a:	4809      	ldr	r0, [pc, #36]	; (80040c0 <HAL_UART_MspInit+0x9c>)
 800409c:	f001 fa36 	bl	800550c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80040a0:	2200      	movs	r2, #0
 80040a2:	2100      	movs	r1, #0
 80040a4:	2025      	movs	r0, #37	; 0x25
 80040a6:	f000 fdf8 	bl	8004c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80040aa:	2025      	movs	r0, #37	; 0x25
 80040ac:	f000 fe11 	bl	8004cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80040b0:	bf00      	nop
 80040b2:	3728      	adds	r7, #40	; 0x28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40011000 	.word	0x40011000
 80040bc:	40023800 	.word	0x40023800
 80040c0:	40020000 	.word	0x40020000

080040c4 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	091b      	lsrs	r3, r3, #4
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	461a      	mov	r2, r3
 80040d6:	0092      	lsls	r2, r2, #2
 80040d8:	4413      	add	r3, r2
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	79fb      	ldrb	r3, [r7, #7]
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	4413      	add	r3, r2
 80040e8:	b2db      	uxtb	r3, r3
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
	...

080040f8 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	4603      	mov	r3, r0
 8004100:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	4a0d      	ldr	r2, [pc, #52]	; (800413c <DEC2BCD+0x44>)
 8004106:	fba2 2303 	umull	r2, r3, r2, r3
 800410a:	08db      	lsrs	r3, r3, #3
 800410c:	b2db      	uxtb	r3, r3
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	b258      	sxtb	r0, r3
 8004112:	79fa      	ldrb	r2, [r7, #7]
 8004114:	4b09      	ldr	r3, [pc, #36]	; (800413c <DEC2BCD+0x44>)
 8004116:	fba3 1302 	umull	r1, r3, r3, r2
 800411a:	08d9      	lsrs	r1, r3, #3
 800411c:	460b      	mov	r3, r1
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	b2db      	uxtb	r3, r3
 8004128:	b25b      	sxtb	r3, r3
 800412a:	4303      	orrs	r3, r0
 800412c:	b25b      	sxtb	r3, r3
 800412e:	b2db      	uxtb	r3, r3
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	cccccccd 	.word	0xcccccccd

08004140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004178 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004144:	480d      	ldr	r0, [pc, #52]	; (800417c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004146:	490e      	ldr	r1, [pc, #56]	; (8004180 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004148:	4a0e      	ldr	r2, [pc, #56]	; (8004184 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800414a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800414c:	e002      	b.n	8004154 <LoopCopyDataInit>

0800414e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800414e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004152:	3304      	adds	r3, #4

08004154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004158:	d3f9      	bcc.n	800414e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800415a:	4a0b      	ldr	r2, [pc, #44]	; (8004188 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800415c:	4c0b      	ldr	r4, [pc, #44]	; (800418c <LoopFillZerobss+0x26>)
  movs r3, #0
 800415e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004160:	e001      	b.n	8004166 <LoopFillZerobss>

08004162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004164:	3204      	adds	r2, #4

08004166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004168:	d3fb      	bcc.n	8004162 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800416a:	f7ff fdc9 	bl	8003d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800416e:	f005 fe49 	bl	8009e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004172:	f7fd ffb3 	bl	80020dc <main>
  bx  lr    
 8004176:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004178:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800417c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004180:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004184:	0800d7f8 	.word	0x0800d7f8
  ldr r2, =_sbss
 8004188:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800418c:	20000554 	.word	0x20000554

08004190 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004190:	e7fe      	b.n	8004190 <ADC_IRQHandler>
	...

08004194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004198:	4b0e      	ldr	r3, [pc, #56]	; (80041d4 <HAL_Init+0x40>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a0d      	ldr	r2, [pc, #52]	; (80041d4 <HAL_Init+0x40>)
 800419e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041a4:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <HAL_Init+0x40>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a0a      	ldr	r2, [pc, #40]	; (80041d4 <HAL_Init+0x40>)
 80041aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041b0:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <HAL_Init+0x40>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a07      	ldr	r2, [pc, #28]	; (80041d4 <HAL_Init+0x40>)
 80041b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041bc:	2003      	movs	r0, #3
 80041be:	f000 fd61 	bl	8004c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041c2:	200f      	movs	r0, #15
 80041c4:	f000 f808 	bl	80041d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041c8:	f7ff fb20 	bl	800380c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40023c00 	.word	0x40023c00

080041d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041e0:	4b12      	ldr	r3, [pc, #72]	; (800422c <HAL_InitTick+0x54>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	4b12      	ldr	r3, [pc, #72]	; (8004230 <HAL_InitTick+0x58>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	4619      	mov	r1, r3
 80041ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80041f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fd79 	bl	8004cee <HAL_SYSTICK_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e00e      	b.n	8004224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b0f      	cmp	r3, #15
 800420a:	d80a      	bhi.n	8004222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800420c:	2200      	movs	r2, #0
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	f04f 30ff 	mov.w	r0, #4294967295
 8004214:	f000 fd41 	bl	8004c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004218:	4a06      	ldr	r2, [pc, #24]	; (8004234 <HAL_InitTick+0x5c>)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	e000      	b.n	8004224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20000014 	.word	0x20000014
 8004230:	2000001c 	.word	0x2000001c
 8004234:	20000018 	.word	0x20000018

08004238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <HAL_IncTick+0x20>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	4b06      	ldr	r3, [pc, #24]	; (800425c <HAL_IncTick+0x24>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4413      	add	r3, r2
 8004248:	4a04      	ldr	r2, [pc, #16]	; (800425c <HAL_IncTick+0x24>)
 800424a:	6013      	str	r3, [r2, #0]
}
 800424c:	bf00      	nop
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	2000001c 	.word	0x2000001c
 800425c:	20000408 	.word	0x20000408

08004260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  return uwTick;
 8004264:	4b03      	ldr	r3, [pc, #12]	; (8004274 <HAL_GetTick+0x14>)
 8004266:	681b      	ldr	r3, [r3, #0]
}
 8004268:	4618      	mov	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	20000408 	.word	0x20000408

08004278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004280:	f7ff ffee 	bl	8004260 <HAL_GetTick>
 8004284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004290:	d005      	beq.n	800429e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004292:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <HAL_Delay+0x44>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4413      	add	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800429e:	bf00      	nop
 80042a0:	f7ff ffde 	bl	8004260 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d8f7      	bhi.n	80042a0 <HAL_Delay+0x28>
  {
  }
}
 80042b0:	bf00      	nop
 80042b2:	bf00      	nop
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	2000001c 	.word	0x2000001c

080042c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e033      	b.n	800433e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fc fe0c 	bl	8000efc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f003 0310 	and.w	r3, r3, #16
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d118      	bne.n	8004330 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004306:	f023 0302 	bic.w	r3, r3, #2
 800430a:	f043 0202 	orr.w	r2, r3, #2
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fa68 	bl	80047e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f023 0303 	bic.w	r3, r3, #3
 8004326:	f043 0201 	orr.w	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	641a      	str	r2, [r3, #64]	; 0x40
 800432e:	e001      	b.n	8004334 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800433c:	7bfb      	ldrb	r3, [r7, #15]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_ADC_Start_DMA+0x1e>
 8004362:	2302      	movs	r3, #2
 8004364:	e0e9      	b.n	800453a <HAL_ADC_Start_DMA+0x1f2>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b01      	cmp	r3, #1
 800437a:	d018      	beq.n	80043ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0201 	orr.w	r2, r2, #1
 800438a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800438c:	4b6d      	ldr	r3, [pc, #436]	; (8004544 <HAL_ADC_Start_DMA+0x1fc>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a6d      	ldr	r2, [pc, #436]	; (8004548 <HAL_ADC_Start_DMA+0x200>)
 8004392:	fba2 2303 	umull	r2, r3, r2, r3
 8004396:	0c9a      	lsrs	r2, r3, #18
 8004398:	4613      	mov	r3, r2
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	4413      	add	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80043a0:	e002      	b.n	80043a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	3b01      	subs	r3, #1
 80043a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f9      	bne.n	80043a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043bc:	d107      	bne.n	80043ce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b01      	cmp	r3, #1
 80043da:	f040 80a1 	bne.w	8004520 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80043e6:	f023 0301 	bic.w	r3, r3, #1
 80043ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004408:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441c:	d106      	bne.n	800442c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	f023 0206 	bic.w	r2, r3, #6
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	645a      	str	r2, [r3, #68]	; 0x44
 800442a:	e002      	b.n	8004432 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800443a:	4b44      	ldr	r3, [pc, #272]	; (800454c <HAL_ADC_Start_DMA+0x204>)
 800443c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004442:	4a43      	ldr	r2, [pc, #268]	; (8004550 <HAL_ADC_Start_DMA+0x208>)
 8004444:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	4a42      	ldr	r2, [pc, #264]	; (8004554 <HAL_ADC_Start_DMA+0x20c>)
 800444c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	4a41      	ldr	r2, [pc, #260]	; (8004558 <HAL_ADC_Start_DMA+0x210>)
 8004454:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800445e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800446e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800447e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	334c      	adds	r3, #76	; 0x4c
 800448a:	4619      	mov	r1, r3
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f000 fce8 	bl	8004e64 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	2b00      	cmp	r3, #0
 800449e:	d12a      	bne.n	80044f6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a2d      	ldr	r2, [pc, #180]	; (800455c <HAL_ADC_Start_DMA+0x214>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d015      	beq.n	80044d6 <HAL_ADC_Start_DMA+0x18e>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a2c      	ldr	r2, [pc, #176]	; (8004560 <HAL_ADC_Start_DMA+0x218>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d105      	bne.n	80044c0 <HAL_ADC_Start_DMA+0x178>
 80044b4:	4b25      	ldr	r3, [pc, #148]	; (800454c <HAL_ADC_Start_DMA+0x204>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 031f 	and.w	r3, r3, #31
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a27      	ldr	r2, [pc, #156]	; (8004564 <HAL_ADC_Start_DMA+0x21c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d136      	bne.n	8004538 <HAL_ADC_Start_DMA+0x1f0>
 80044ca:	4b20      	ldr	r3, [pc, #128]	; (800454c <HAL_ADC_Start_DMA+0x204>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d130      	bne.n	8004538 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d129      	bne.n	8004538 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80044f2:	609a      	str	r2, [r3, #8]
 80044f4:	e020      	b.n	8004538 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a18      	ldr	r2, [pc, #96]	; (800455c <HAL_ADC_Start_DMA+0x214>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d11b      	bne.n	8004538 <HAL_ADC_Start_DMA+0x1f0>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d114      	bne.n	8004538 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800451c:	609a      	str	r2, [r3, #8]
 800451e:	e00b      	b.n	8004538 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	f043 0210 	orr.w	r2, r3, #16
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004530:	f043 0201 	orr.w	r2, r3, #1
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20000014 	.word	0x20000014
 8004548:	431bde83 	.word	0x431bde83
 800454c:	40012300 	.word	0x40012300
 8004550:	080049e1 	.word	0x080049e1
 8004554:	08004a9b 	.word	0x08004a9b
 8004558:	08004ab7 	.word	0x08004ab7
 800455c:	40012000 	.word	0x40012000
 8004560:	40012100 	.word	0x40012100
 8004564:	40012200 	.word	0x40012200

08004568 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d101      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x1c>
 80045bc:	2302      	movs	r3, #2
 80045be:	e105      	b.n	80047cc <HAL_ADC_ConfigChannel+0x228>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b09      	cmp	r3, #9
 80045ce:	d925      	bls.n	800461c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68d9      	ldr	r1, [r3, #12]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	4613      	mov	r3, r2
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	4413      	add	r3, r2
 80045e4:	3b1e      	subs	r3, #30
 80045e6:	2207      	movs	r2, #7
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	43da      	mvns	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	400a      	ands	r2, r1
 80045f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68d9      	ldr	r1, [r3, #12]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	b29b      	uxth	r3, r3
 8004606:	4618      	mov	r0, r3
 8004608:	4603      	mov	r3, r0
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	4403      	add	r3, r0
 800460e:	3b1e      	subs	r3, #30
 8004610:	409a      	lsls	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	60da      	str	r2, [r3, #12]
 800461a:	e022      	b.n	8004662 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6919      	ldr	r1, [r3, #16]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	b29b      	uxth	r3, r3
 8004628:	461a      	mov	r2, r3
 800462a:	4613      	mov	r3, r2
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	4413      	add	r3, r2
 8004630:	2207      	movs	r2, #7
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	43da      	mvns	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	400a      	ands	r2, r1
 800463e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6919      	ldr	r1, [r3, #16]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	b29b      	uxth	r3, r3
 8004650:	4618      	mov	r0, r3
 8004652:	4603      	mov	r3, r0
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	4403      	add	r3, r0
 8004658:	409a      	lsls	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b06      	cmp	r3, #6
 8004668:	d824      	bhi.n	80046b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	3b05      	subs	r3, #5
 800467c:	221f      	movs	r2, #31
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	43da      	mvns	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	400a      	ands	r2, r1
 800468a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	b29b      	uxth	r3, r3
 8004698:	4618      	mov	r0, r3
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	3b05      	subs	r3, #5
 80046a6:	fa00 f203 	lsl.w	r2, r0, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	635a      	str	r2, [r3, #52]	; 0x34
 80046b2:	e04c      	b.n	800474e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b0c      	cmp	r3, #12
 80046ba:	d824      	bhi.n	8004706 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	3b23      	subs	r3, #35	; 0x23
 80046ce:	221f      	movs	r2, #31
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	43da      	mvns	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	400a      	ands	r2, r1
 80046dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	4618      	mov	r0, r3
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	3b23      	subs	r3, #35	; 0x23
 80046f8:	fa00 f203 	lsl.w	r2, r0, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
 8004704:	e023      	b.n	800474e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	3b41      	subs	r3, #65	; 0x41
 8004718:	221f      	movs	r2, #31
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43da      	mvns	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	400a      	ands	r2, r1
 8004726:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	b29b      	uxth	r3, r3
 8004734:	4618      	mov	r0, r3
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	4613      	mov	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	3b41      	subs	r3, #65	; 0x41
 8004742:	fa00 f203 	lsl.w	r2, r0, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800474e:	4b22      	ldr	r3, [pc, #136]	; (80047d8 <HAL_ADC_ConfigChannel+0x234>)
 8004750:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a21      	ldr	r2, [pc, #132]	; (80047dc <HAL_ADC_ConfigChannel+0x238>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d109      	bne.n	8004770 <HAL_ADC_ConfigChannel+0x1cc>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b12      	cmp	r3, #18
 8004762:	d105      	bne.n	8004770 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a19      	ldr	r2, [pc, #100]	; (80047dc <HAL_ADC_ConfigChannel+0x238>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d123      	bne.n	80047c2 <HAL_ADC_ConfigChannel+0x21e>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b10      	cmp	r3, #16
 8004780:	d003      	beq.n	800478a <HAL_ADC_ConfigChannel+0x1e6>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b11      	cmp	r3, #17
 8004788:	d11b      	bne.n	80047c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b10      	cmp	r3, #16
 800479c:	d111      	bne.n	80047c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800479e:	4b10      	ldr	r3, [pc, #64]	; (80047e0 <HAL_ADC_ConfigChannel+0x23c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a10      	ldr	r2, [pc, #64]	; (80047e4 <HAL_ADC_ConfigChannel+0x240>)
 80047a4:	fba2 2303 	umull	r2, r3, r2, r3
 80047a8:	0c9a      	lsrs	r2, r3, #18
 80047aa:	4613      	mov	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80047b4:	e002      	b.n	80047bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	3b01      	subs	r3, #1
 80047ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f9      	bne.n	80047b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	40012300 	.word	0x40012300
 80047dc:	40012000 	.word	0x40012000
 80047e0:	20000014 	.word	0x20000014
 80047e4:	431bde83 	.word	0x431bde83

080047e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047f0:	4b79      	ldr	r3, [pc, #484]	; (80049d8 <ADC_Init+0x1f0>)
 80047f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	431a      	orrs	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800481c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6859      	ldr	r1, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	021a      	lsls	r2, r3, #8
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004840:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6859      	ldr	r1, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004862:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6899      	ldr	r1, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	4a58      	ldr	r2, [pc, #352]	; (80049dc <ADC_Init+0x1f4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d022      	beq.n	80048c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800488e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6899      	ldr	r1, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80048b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6899      	ldr	r1, [r3, #8]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	609a      	str	r2, [r3, #8]
 80048c4:	e00f      	b.n	80048e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80048e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0202 	bic.w	r2, r2, #2
 80048f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6899      	ldr	r1, [r3, #8]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	7e1b      	ldrb	r3, [r3, #24]
 8004900:	005a      	lsls	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d01b      	beq.n	800494c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004922:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004932:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6859      	ldr	r1, [r3, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	3b01      	subs	r3, #1
 8004940:	035a      	lsls	r2, r3, #13
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]
 800494a:	e007      	b.n	800495c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800495a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800496a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	3b01      	subs	r3, #1
 8004978:	051a      	lsls	r2, r3, #20
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004990:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6899      	ldr	r1, [r3, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800499e:	025a      	lsls	r2, r3, #9
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6899      	ldr	r1, [r3, #8]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	029a      	lsls	r2, r3, #10
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	609a      	str	r2, [r3, #8]
}
 80049cc:	bf00      	nop
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	40012300 	.word	0x40012300
 80049dc:	0f000001 	.word	0x0f000001

080049e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d13c      	bne.n	8004a74 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d12b      	bne.n	8004a6c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d127      	bne.n	8004a6c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d006      	beq.n	8004a38 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d119      	bne.n	8004a6c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0220 	bic.w	r2, r2, #32
 8004a46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d105      	bne.n	8004a6c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	f043 0201 	orr.w	r2, r3, #1
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7ff fd7b 	bl	8004568 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a72:	e00e      	b.n	8004a92 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a78:	f003 0310 	and.w	r3, r3, #16
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f7ff fd85 	bl	8004590 <HAL_ADC_ErrorCallback>
}
 8004a86:	e004      	b.n	8004a92 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	4798      	blx	r3
}
 8004a92:	bf00      	nop
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b084      	sub	sp, #16
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f7ff fd67 	bl	800457c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004aae:	bf00      	nop
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b084      	sub	sp, #16
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2240      	movs	r2, #64	; 0x40
 8004ac8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	f043 0204 	orr.w	r2, r3, #4
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f7ff fd5a 	bl	8004590 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004adc:	bf00      	nop
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004af4:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <__NVIC_SetPriorityGrouping+0x44>)
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b00:	4013      	ands	r3, r2
 8004b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b16:	4a04      	ldr	r2, [pc, #16]	; (8004b28 <__NVIC_SetPriorityGrouping+0x44>)
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	60d3      	str	r3, [r2, #12]
}
 8004b1c:	bf00      	nop
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	e000ed00 	.word	0xe000ed00

08004b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b30:	4b04      	ldr	r3, [pc, #16]	; (8004b44 <__NVIC_GetPriorityGrouping+0x18>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	0a1b      	lsrs	r3, r3, #8
 8004b36:	f003 0307 	and.w	r3, r3, #7
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	e000ed00 	.word	0xe000ed00

08004b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	db0b      	blt.n	8004b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	f003 021f 	and.w	r2, r3, #31
 8004b60:	4907      	ldr	r1, [pc, #28]	; (8004b80 <__NVIC_EnableIRQ+0x38>)
 8004b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b66:	095b      	lsrs	r3, r3, #5
 8004b68:	2001      	movs	r0, #1
 8004b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	e000e100 	.word	0xe000e100

08004b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	6039      	str	r1, [r7, #0]
 8004b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	db0a      	blt.n	8004bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	490c      	ldr	r1, [pc, #48]	; (8004bd0 <__NVIC_SetPriority+0x4c>)
 8004b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba2:	0112      	lsls	r2, r2, #4
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	440b      	add	r3, r1
 8004ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bac:	e00a      	b.n	8004bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	4908      	ldr	r1, [pc, #32]	; (8004bd4 <__NVIC_SetPriority+0x50>)
 8004bb4:	79fb      	ldrb	r3, [r7, #7]
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	3b04      	subs	r3, #4
 8004bbc:	0112      	lsls	r2, r2, #4
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	761a      	strb	r2, [r3, #24]
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	e000e100 	.word	0xe000e100
 8004bd4:	e000ed00 	.word	0xe000ed00

08004bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b089      	sub	sp, #36	; 0x24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f1c3 0307 	rsb	r3, r3, #7
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	bf28      	it	cs
 8004bf6:	2304      	movcs	r3, #4
 8004bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	2b06      	cmp	r3, #6
 8004c00:	d902      	bls.n	8004c08 <NVIC_EncodePriority+0x30>
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	3b03      	subs	r3, #3
 8004c06:	e000      	b.n	8004c0a <NVIC_EncodePriority+0x32>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	43da      	mvns	r2, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	401a      	ands	r2, r3
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c20:	f04f 31ff 	mov.w	r1, #4294967295
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2a:	43d9      	mvns	r1, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c30:	4313      	orrs	r3, r2
         );
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3724      	adds	r7, #36	; 0x24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
	...

08004c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c50:	d301      	bcc.n	8004c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c52:	2301      	movs	r3, #1
 8004c54:	e00f      	b.n	8004c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c56:	4a0a      	ldr	r2, [pc, #40]	; (8004c80 <SysTick_Config+0x40>)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c5e:	210f      	movs	r1, #15
 8004c60:	f04f 30ff 	mov.w	r0, #4294967295
 8004c64:	f7ff ff8e 	bl	8004b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c68:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <SysTick_Config+0x40>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c6e:	4b04      	ldr	r3, [pc, #16]	; (8004c80 <SysTick_Config+0x40>)
 8004c70:	2207      	movs	r2, #7
 8004c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	e000e010 	.word	0xe000e010

08004c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7ff ff29 	bl	8004ae4 <__NVIC_SetPriorityGrouping>
}
 8004c92:	bf00      	nop
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b086      	sub	sp, #24
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	607a      	str	r2, [r7, #4]
 8004ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cac:	f7ff ff3e 	bl	8004b2c <__NVIC_GetPriorityGrouping>
 8004cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	6978      	ldr	r0, [r7, #20]
 8004cb8:	f7ff ff8e 	bl	8004bd8 <NVIC_EncodePriority>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cc2:	4611      	mov	r1, r2
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7ff ff5d 	bl	8004b84 <__NVIC_SetPriority>
}
 8004cca:	bf00      	nop
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	4603      	mov	r3, r0
 8004cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff ff31 	bl	8004b48 <__NVIC_EnableIRQ>
}
 8004ce6:	bf00      	nop
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7ff ffa2 	bl	8004c40 <SysTick_Config>
 8004cfc:	4603      	mov	r3, r0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d14:	f7ff faa4 	bl	8004260 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e099      	b.n	8004e58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0201 	bic.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d44:	e00f      	b.n	8004d66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d46:	f7ff fa8b 	bl	8004260 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b05      	cmp	r3, #5
 8004d52:	d908      	bls.n	8004d66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2203      	movs	r2, #3
 8004d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e078      	b.n	8004e58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e8      	bne.n	8004d46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	4b38      	ldr	r3, [pc, #224]	; (8004e60 <HAL_DMA_Init+0x158>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d107      	bne.n	8004dd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f023 0307 	bic.w	r3, r3, #7
 8004de6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d117      	bne.n	8004e2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00e      	beq.n	8004e2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 fb01 	bl	8005414 <DMA_CheckFifoParam>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d008      	beq.n	8004e2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2240      	movs	r2, #64	; 0x40
 8004e1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e26:	2301      	movs	r3, #1
 8004e28:	e016      	b.n	8004e58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fab8 	bl	80053a8 <DMA_CalcBaseAndBitshift>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e40:	223f      	movs	r2, #63	; 0x3f
 8004e42:	409a      	lsls	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	f010803f 	.word	0xf010803f

08004e64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d101      	bne.n	8004e8a <HAL_DMA_Start_IT+0x26>
 8004e86:	2302      	movs	r3, #2
 8004e88:	e040      	b.n	8004f0c <HAL_DMA_Start_IT+0xa8>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d12f      	bne.n	8004efe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	68b9      	ldr	r1, [r7, #8]
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 fa4a 	bl	800534c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ebc:	223f      	movs	r2, #63	; 0x3f
 8004ebe:	409a      	lsls	r2, r3
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0216 	orr.w	r2, r2, #22
 8004ed2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d007      	beq.n	8004eec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0208 	orr.w	r2, r2, #8
 8004eea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0201 	orr.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	e005      	b.n	8004f0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f06:	2302      	movs	r3, #2
 8004f08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f22:	f7ff f99d 	bl	8004260 <HAL_GetTick>
 8004f26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d008      	beq.n	8004f46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2280      	movs	r2, #128	; 0x80
 8004f38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e052      	b.n	8004fec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0216 	bic.w	r2, r2, #22
 8004f54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695a      	ldr	r2, [r3, #20]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d103      	bne.n	8004f76 <HAL_DMA_Abort+0x62>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d007      	beq.n	8004f86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0208 	bic.w	r2, r2, #8
 8004f84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0201 	bic.w	r2, r2, #1
 8004f94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f96:	e013      	b.n	8004fc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f98:	f7ff f962 	bl	8004260 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b05      	cmp	r3, #5
 8004fa4:	d90c      	bls.n	8004fc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2203      	movs	r2, #3
 8004fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e015      	b.n	8004fec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1e4      	bne.n	8004f98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd2:	223f      	movs	r2, #63	; 0x3f
 8004fd4:	409a      	lsls	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d004      	beq.n	8005012 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2280      	movs	r2, #128	; 0x80
 800500c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e00c      	b.n	800502c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2205      	movs	r2, #5
 8005016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0201 	bic.w	r2, r2, #1
 8005028:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005044:	4b8e      	ldr	r3, [pc, #568]	; (8005280 <HAL_DMA_IRQHandler+0x248>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a8e      	ldr	r2, [pc, #568]	; (8005284 <HAL_DMA_IRQHandler+0x24c>)
 800504a:	fba2 2303 	umull	r2, r3, r2, r3
 800504e:	0a9b      	lsrs	r3, r3, #10
 8005050:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005056:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005062:	2208      	movs	r2, #8
 8005064:	409a      	lsls	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4013      	ands	r3, r2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d01a      	beq.n	80050a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b00      	cmp	r3, #0
 800507a:	d013      	beq.n	80050a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0204 	bic.w	r2, r2, #4
 800508a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005090:	2208      	movs	r2, #8
 8005092:	409a      	lsls	r2, r3
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509c:	f043 0201 	orr.w	r2, r3, #1
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a8:	2201      	movs	r2, #1
 80050aa:	409a      	lsls	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4013      	ands	r3, r2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d012      	beq.n	80050da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00b      	beq.n	80050da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c6:	2201      	movs	r2, #1
 80050c8:	409a      	lsls	r2, r3
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d2:	f043 0202 	orr.w	r2, r3, #2
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050de:	2204      	movs	r2, #4
 80050e0:	409a      	lsls	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4013      	ands	r3, r2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d012      	beq.n	8005110 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00b      	beq.n	8005110 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fc:	2204      	movs	r2, #4
 80050fe:	409a      	lsls	r2, r3
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005108:	f043 0204 	orr.w	r2, r3, #4
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005114:	2210      	movs	r2, #16
 8005116:	409a      	lsls	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4013      	ands	r3, r2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d043      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d03c      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005132:	2210      	movs	r2, #16
 8005134:	409a      	lsls	r2, r3
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d018      	beq.n	800517a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d108      	bne.n	8005168 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	d024      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	4798      	blx	r3
 8005166:	e01f      	b.n	80051a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01b      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	4798      	blx	r3
 8005178:	e016      	b.n	80051a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005184:	2b00      	cmp	r3, #0
 8005186:	d107      	bne.n	8005198 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0208 	bic.w	r2, r2, #8
 8005196:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ac:	2220      	movs	r2, #32
 80051ae:	409a      	lsls	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 808f 	beq.w	80052d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0310 	and.w	r3, r3, #16
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 8087 	beq.w	80052d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ce:	2220      	movs	r2, #32
 80051d0:	409a      	lsls	r2, r3
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b05      	cmp	r3, #5
 80051e0:	d136      	bne.n	8005250 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 0216 	bic.w	r2, r2, #22
 80051f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695a      	ldr	r2, [r3, #20]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005200:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d103      	bne.n	8005212 <HAL_DMA_IRQHandler+0x1da>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520e:	2b00      	cmp	r3, #0
 8005210:	d007      	beq.n	8005222 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0208 	bic.w	r2, r2, #8
 8005220:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005226:	223f      	movs	r2, #63	; 0x3f
 8005228:	409a      	lsls	r2, r3
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005242:	2b00      	cmp	r3, #0
 8005244:	d07e      	beq.n	8005344 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	4798      	blx	r3
        }
        return;
 800524e:	e079      	b.n	8005344 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d01d      	beq.n	800529a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10d      	bne.n	8005288 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005270:	2b00      	cmp	r3, #0
 8005272:	d031      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	4798      	blx	r3
 800527c:	e02c      	b.n	80052d8 <HAL_DMA_IRQHandler+0x2a0>
 800527e:	bf00      	nop
 8005280:	20000014 	.word	0x20000014
 8005284:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528c:	2b00      	cmp	r3, #0
 800528e:	d023      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	4798      	blx	r3
 8005298:	e01e      	b.n	80052d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10f      	bne.n	80052c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0210 	bic.w	r2, r2, #16
 80052b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d032      	beq.n	8005346 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d022      	beq.n	8005332 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2205      	movs	r2, #5
 80052f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0201 	bic.w	r2, r2, #1
 8005302:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	3301      	adds	r3, #1
 8005308:	60bb      	str	r3, [r7, #8]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	429a      	cmp	r2, r3
 800530e:	d307      	bcc.n	8005320 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f2      	bne.n	8005304 <HAL_DMA_IRQHandler+0x2cc>
 800531e:	e000      	b.n	8005322 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005320:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005336:	2b00      	cmp	r3, #0
 8005338:	d005      	beq.n	8005346 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	4798      	blx	r3
 8005342:	e000      	b.n	8005346 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005344:	bf00      	nop
    }
  }
}
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005368:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	2b40      	cmp	r3, #64	; 0x40
 8005378:	d108      	bne.n	800538c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800538a:	e007      	b.n	800539c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	60da      	str	r2, [r3, #12]
}
 800539c:	bf00      	nop
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	3b10      	subs	r3, #16
 80053b8:	4a14      	ldr	r2, [pc, #80]	; (800540c <DMA_CalcBaseAndBitshift+0x64>)
 80053ba:	fba2 2303 	umull	r2, r3, r2, r3
 80053be:	091b      	lsrs	r3, r3, #4
 80053c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80053c2:	4a13      	ldr	r2, [pc, #76]	; (8005410 <DMA_CalcBaseAndBitshift+0x68>)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4413      	add	r3, r2
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d909      	bls.n	80053ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80053de:	f023 0303 	bic.w	r3, r3, #3
 80053e2:	1d1a      	adds	r2, r3, #4
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	659a      	str	r2, [r3, #88]	; 0x58
 80053e8:	e007      	b.n	80053fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80053f2:	f023 0303 	bic.w	r3, r3, #3
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	aaaaaaab 	.word	0xaaaaaaab
 8005410:	0800d7ac 	.word	0x0800d7ac

08005414 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800541c:	2300      	movs	r3, #0
 800541e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005424:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d11f      	bne.n	800546e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2b03      	cmp	r3, #3
 8005432:	d856      	bhi.n	80054e2 <DMA_CheckFifoParam+0xce>
 8005434:	a201      	add	r2, pc, #4	; (adr r2, 800543c <DMA_CheckFifoParam+0x28>)
 8005436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543a:	bf00      	nop
 800543c:	0800544d 	.word	0x0800544d
 8005440:	0800545f 	.word	0x0800545f
 8005444:	0800544d 	.word	0x0800544d
 8005448:	080054e3 	.word	0x080054e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d046      	beq.n	80054e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800545c:	e043      	b.n	80054e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005462:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005466:	d140      	bne.n	80054ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800546c:	e03d      	b.n	80054ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005476:	d121      	bne.n	80054bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b03      	cmp	r3, #3
 800547c:	d837      	bhi.n	80054ee <DMA_CheckFifoParam+0xda>
 800547e:	a201      	add	r2, pc, #4	; (adr r2, 8005484 <DMA_CheckFifoParam+0x70>)
 8005480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005484:	08005495 	.word	0x08005495
 8005488:	0800549b 	.word	0x0800549b
 800548c:	08005495 	.word	0x08005495
 8005490:	080054ad 	.word	0x080054ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	73fb      	strb	r3, [r7, #15]
      break;
 8005498:	e030      	b.n	80054fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d025      	beq.n	80054f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054aa:	e022      	b.n	80054f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054b4:	d11f      	bne.n	80054f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80054ba:	e01c      	b.n	80054f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d903      	bls.n	80054ca <DMA_CheckFifoParam+0xb6>
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2b03      	cmp	r3, #3
 80054c6:	d003      	beq.n	80054d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80054c8:	e018      	b.n	80054fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	73fb      	strb	r3, [r7, #15]
      break;
 80054ce:	e015      	b.n	80054fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00e      	beq.n	80054fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	73fb      	strb	r3, [r7, #15]
      break;
 80054e0:	e00b      	b.n	80054fa <DMA_CheckFifoParam+0xe6>
      break;
 80054e2:	bf00      	nop
 80054e4:	e00a      	b.n	80054fc <DMA_CheckFifoParam+0xe8>
      break;
 80054e6:	bf00      	nop
 80054e8:	e008      	b.n	80054fc <DMA_CheckFifoParam+0xe8>
      break;
 80054ea:	bf00      	nop
 80054ec:	e006      	b.n	80054fc <DMA_CheckFifoParam+0xe8>
      break;
 80054ee:	bf00      	nop
 80054f0:	e004      	b.n	80054fc <DMA_CheckFifoParam+0xe8>
      break;
 80054f2:	bf00      	nop
 80054f4:	e002      	b.n	80054fc <DMA_CheckFifoParam+0xe8>
      break;   
 80054f6:	bf00      	nop
 80054f8:	e000      	b.n	80054fc <DMA_CheckFifoParam+0xe8>
      break;
 80054fa:	bf00      	nop
    }
  } 
  
  return status; 
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop

0800550c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800550c:	b480      	push	{r7}
 800550e:	b089      	sub	sp, #36	; 0x24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800551a:	2300      	movs	r3, #0
 800551c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800551e:	2300      	movs	r3, #0
 8005520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005522:	2300      	movs	r3, #0
 8005524:	61fb      	str	r3, [r7, #28]
 8005526:	e16b      	b.n	8005800 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005528:	2201      	movs	r2, #1
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4013      	ands	r3, r2
 800553a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	429a      	cmp	r2, r3
 8005542:	f040 815a 	bne.w	80057fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	2b01      	cmp	r3, #1
 8005550:	d005      	beq.n	800555e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800555a:	2b02      	cmp	r3, #2
 800555c:	d130      	bne.n	80055c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	2203      	movs	r2, #3
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	43db      	mvns	r3, r3
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	4013      	ands	r3, r2
 8005574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	4313      	orrs	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005594:	2201      	movs	r2, #1
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	43db      	mvns	r3, r3
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	4013      	ands	r3, r2
 80055a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	091b      	lsrs	r3, r3, #4
 80055aa:	f003 0201 	and.w	r2, r3, #1
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f003 0303 	and.w	r3, r3, #3
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d017      	beq.n	80055fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	2203      	movs	r2, #3
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	43db      	mvns	r3, r3
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	4013      	ands	r3, r2
 80055e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	fa02 f303 	lsl.w	r3, r2, r3
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f003 0303 	and.w	r3, r3, #3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d123      	bne.n	8005650 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	08da      	lsrs	r2, r3, #3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3208      	adds	r2, #8
 8005610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005614:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	220f      	movs	r2, #15
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	43db      	mvns	r3, r3
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	4013      	ands	r3, r2
 800562a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	4313      	orrs	r3, r2
 8005640:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	08da      	lsrs	r2, r3, #3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	3208      	adds	r2, #8
 800564a:	69b9      	ldr	r1, [r7, #24]
 800564c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	2203      	movs	r2, #3
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	43db      	mvns	r3, r3
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	4013      	ands	r3, r2
 8005666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f003 0203 	and.w	r2, r3, #3
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	fa02 f303 	lsl.w	r3, r2, r3
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	4313      	orrs	r3, r2
 800567c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 80b4 	beq.w	80057fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	4b60      	ldr	r3, [pc, #384]	; (8005818 <HAL_GPIO_Init+0x30c>)
 8005698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569a:	4a5f      	ldr	r2, [pc, #380]	; (8005818 <HAL_GPIO_Init+0x30c>)
 800569c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056a0:	6453      	str	r3, [r2, #68]	; 0x44
 80056a2:	4b5d      	ldr	r3, [pc, #372]	; (8005818 <HAL_GPIO_Init+0x30c>)
 80056a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056ae:	4a5b      	ldr	r2, [pc, #364]	; (800581c <HAL_GPIO_Init+0x310>)
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	089b      	lsrs	r3, r3, #2
 80056b4:	3302      	adds	r3, #2
 80056b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	220f      	movs	r2, #15
 80056c6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ca:	43db      	mvns	r3, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4013      	ands	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a52      	ldr	r2, [pc, #328]	; (8005820 <HAL_GPIO_Init+0x314>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d02b      	beq.n	8005732 <HAL_GPIO_Init+0x226>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a51      	ldr	r2, [pc, #324]	; (8005824 <HAL_GPIO_Init+0x318>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d025      	beq.n	800572e <HAL_GPIO_Init+0x222>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a50      	ldr	r2, [pc, #320]	; (8005828 <HAL_GPIO_Init+0x31c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d01f      	beq.n	800572a <HAL_GPIO_Init+0x21e>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a4f      	ldr	r2, [pc, #316]	; (800582c <HAL_GPIO_Init+0x320>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d019      	beq.n	8005726 <HAL_GPIO_Init+0x21a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a4e      	ldr	r2, [pc, #312]	; (8005830 <HAL_GPIO_Init+0x324>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d013      	beq.n	8005722 <HAL_GPIO_Init+0x216>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a4d      	ldr	r2, [pc, #308]	; (8005834 <HAL_GPIO_Init+0x328>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d00d      	beq.n	800571e <HAL_GPIO_Init+0x212>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a4c      	ldr	r2, [pc, #304]	; (8005838 <HAL_GPIO_Init+0x32c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d007      	beq.n	800571a <HAL_GPIO_Init+0x20e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a4b      	ldr	r2, [pc, #300]	; (800583c <HAL_GPIO_Init+0x330>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d101      	bne.n	8005716 <HAL_GPIO_Init+0x20a>
 8005712:	2307      	movs	r3, #7
 8005714:	e00e      	b.n	8005734 <HAL_GPIO_Init+0x228>
 8005716:	2308      	movs	r3, #8
 8005718:	e00c      	b.n	8005734 <HAL_GPIO_Init+0x228>
 800571a:	2306      	movs	r3, #6
 800571c:	e00a      	b.n	8005734 <HAL_GPIO_Init+0x228>
 800571e:	2305      	movs	r3, #5
 8005720:	e008      	b.n	8005734 <HAL_GPIO_Init+0x228>
 8005722:	2304      	movs	r3, #4
 8005724:	e006      	b.n	8005734 <HAL_GPIO_Init+0x228>
 8005726:	2303      	movs	r3, #3
 8005728:	e004      	b.n	8005734 <HAL_GPIO_Init+0x228>
 800572a:	2302      	movs	r3, #2
 800572c:	e002      	b.n	8005734 <HAL_GPIO_Init+0x228>
 800572e:	2301      	movs	r3, #1
 8005730:	e000      	b.n	8005734 <HAL_GPIO_Init+0x228>
 8005732:	2300      	movs	r3, #0
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	f002 0203 	and.w	r2, r2, #3
 800573a:	0092      	lsls	r2, r2, #2
 800573c:	4093      	lsls	r3, r2
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	4313      	orrs	r3, r2
 8005742:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005744:	4935      	ldr	r1, [pc, #212]	; (800581c <HAL_GPIO_Init+0x310>)
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	089b      	lsrs	r3, r3, #2
 800574a:	3302      	adds	r3, #2
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005752:	4b3b      	ldr	r3, [pc, #236]	; (8005840 <HAL_GPIO_Init+0x334>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	43db      	mvns	r3, r3
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	4013      	ands	r3, r2
 8005760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	4313      	orrs	r3, r2
 8005774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005776:	4a32      	ldr	r2, [pc, #200]	; (8005840 <HAL_GPIO_Init+0x334>)
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800577c:	4b30      	ldr	r3, [pc, #192]	; (8005840 <HAL_GPIO_Init+0x334>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	43db      	mvns	r3, r3
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	4013      	ands	r3, r2
 800578a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057a0:	4a27      	ldr	r2, [pc, #156]	; (8005840 <HAL_GPIO_Init+0x334>)
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80057a6:	4b26      	ldr	r3, [pc, #152]	; (8005840 <HAL_GPIO_Init+0x334>)
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	43db      	mvns	r3, r3
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	4013      	ands	r3, r2
 80057b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057ca:	4a1d      	ldr	r2, [pc, #116]	; (8005840 <HAL_GPIO_Init+0x334>)
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057d0:	4b1b      	ldr	r3, [pc, #108]	; (8005840 <HAL_GPIO_Init+0x334>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	43db      	mvns	r3, r3
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	4013      	ands	r3, r2
 80057de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057f4:	4a12      	ldr	r2, [pc, #72]	; (8005840 <HAL_GPIO_Init+0x334>)
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	3301      	adds	r3, #1
 80057fe:	61fb      	str	r3, [r7, #28]
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	2b0f      	cmp	r3, #15
 8005804:	f67f ae90 	bls.w	8005528 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	3724      	adds	r7, #36	; 0x24
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40023800 	.word	0x40023800
 800581c:	40013800 	.word	0x40013800
 8005820:	40020000 	.word	0x40020000
 8005824:	40020400 	.word	0x40020400
 8005828:	40020800 	.word	0x40020800
 800582c:	40020c00 	.word	0x40020c00
 8005830:	40021000 	.word	0x40021000
 8005834:	40021400 	.word	0x40021400
 8005838:	40021800 	.word	0x40021800
 800583c:	40021c00 	.word	0x40021c00
 8005840:	40013c00 	.word	0x40013c00

08005844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	460b      	mov	r3, r1
 800584e:	807b      	strh	r3, [r7, #2]
 8005850:	4613      	mov	r3, r2
 8005852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005854:	787b      	ldrb	r3, [r7, #1]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800585a:	887a      	ldrh	r2, [r7, #2]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005860:	e003      	b.n	800586a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005862:	887b      	ldrh	r3, [r7, #2]
 8005864:	041a      	lsls	r2, r3, #16
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	619a      	str	r2, [r3, #24]
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
	...

08005878 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e12b      	b.n	8005ae2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d106      	bne.n	80058a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fb ff3c 	bl	800171c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2224      	movs	r2, #36	; 0x24
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0201 	bic.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058dc:	f001 fbfc 	bl	80070d8 <HAL_RCC_GetPCLK1Freq>
 80058e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	4a81      	ldr	r2, [pc, #516]	; (8005aec <HAL_I2C_Init+0x274>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d807      	bhi.n	80058fc <HAL_I2C_Init+0x84>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4a80      	ldr	r2, [pc, #512]	; (8005af0 <HAL_I2C_Init+0x278>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	bf94      	ite	ls
 80058f4:	2301      	movls	r3, #1
 80058f6:	2300      	movhi	r3, #0
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	e006      	b.n	800590a <HAL_I2C_Init+0x92>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4a7d      	ldr	r2, [pc, #500]	; (8005af4 <HAL_I2C_Init+0x27c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	bf94      	ite	ls
 8005904:	2301      	movls	r3, #1
 8005906:	2300      	movhi	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e0e7      	b.n	8005ae2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4a78      	ldr	r2, [pc, #480]	; (8005af8 <HAL_I2C_Init+0x280>)
 8005916:	fba2 2303 	umull	r2, r3, r2, r3
 800591a:	0c9b      	lsrs	r3, r3, #18
 800591c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	430a      	orrs	r2, r1
 8005930:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	4a6a      	ldr	r2, [pc, #424]	; (8005aec <HAL_I2C_Init+0x274>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d802      	bhi.n	800594c <HAL_I2C_Init+0xd4>
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	3301      	adds	r3, #1
 800594a:	e009      	b.n	8005960 <HAL_I2C_Init+0xe8>
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005952:	fb02 f303 	mul.w	r3, r2, r3
 8005956:	4a69      	ldr	r2, [pc, #420]	; (8005afc <HAL_I2C_Init+0x284>)
 8005958:	fba2 2303 	umull	r2, r3, r2, r3
 800595c:	099b      	lsrs	r3, r3, #6
 800595e:	3301      	adds	r3, #1
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	430b      	orrs	r3, r1
 8005966:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005972:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	495c      	ldr	r1, [pc, #368]	; (8005aec <HAL_I2C_Init+0x274>)
 800597c:	428b      	cmp	r3, r1
 800597e:	d819      	bhi.n	80059b4 <HAL_I2C_Init+0x13c>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	1e59      	subs	r1, r3, #1
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	fbb1 f3f3 	udiv	r3, r1, r3
 800598e:	1c59      	adds	r1, r3, #1
 8005990:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005994:	400b      	ands	r3, r1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <HAL_I2C_Init+0x138>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	1e59      	subs	r1, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80059a8:	3301      	adds	r3, #1
 80059aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ae:	e051      	b.n	8005a54 <HAL_I2C_Init+0x1dc>
 80059b0:	2304      	movs	r3, #4
 80059b2:	e04f      	b.n	8005a54 <HAL_I2C_Init+0x1dc>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d111      	bne.n	80059e0 <HAL_I2C_Init+0x168>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	1e58      	subs	r0, r3, #1
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6859      	ldr	r1, [r3, #4]
 80059c4:	460b      	mov	r3, r1
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	440b      	add	r3, r1
 80059ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ce:	3301      	adds	r3, #1
 80059d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	bf0c      	ite	eq
 80059d8:	2301      	moveq	r3, #1
 80059da:	2300      	movne	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	e012      	b.n	8005a06 <HAL_I2C_Init+0x18e>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	1e58      	subs	r0, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6859      	ldr	r1, [r3, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	440b      	add	r3, r1
 80059ee:	0099      	lsls	r1, r3, #2
 80059f0:	440b      	add	r3, r1
 80059f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80059f6:	3301      	adds	r3, #1
 80059f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	bf0c      	ite	eq
 8005a00:	2301      	moveq	r3, #1
 8005a02:	2300      	movne	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <HAL_I2C_Init+0x196>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e022      	b.n	8005a54 <HAL_I2C_Init+0x1dc>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10e      	bne.n	8005a34 <HAL_I2C_Init+0x1bc>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	1e58      	subs	r0, r3, #1
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6859      	ldr	r1, [r3, #4]
 8005a1e:	460b      	mov	r3, r1
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	440b      	add	r3, r1
 8005a24:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a28:	3301      	adds	r3, #1
 8005a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a32:	e00f      	b.n	8005a54 <HAL_I2C_Init+0x1dc>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	1e58      	subs	r0, r3, #1
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6859      	ldr	r1, [r3, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	440b      	add	r3, r1
 8005a42:	0099      	lsls	r1, r3, #2
 8005a44:	440b      	add	r3, r1
 8005a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	6809      	ldr	r1, [r1, #0]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69da      	ldr	r2, [r3, #28]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6911      	ldr	r1, [r2, #16]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	68d2      	ldr	r2, [r2, #12]
 8005a8e:	4311      	orrs	r1, r2
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6812      	ldr	r2, [r2, #0]
 8005a94:	430b      	orrs	r3, r1
 8005a96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	695a      	ldr	r2, [r3, #20]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 0201 	orr.w	r2, r2, #1
 8005ac2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2220      	movs	r2, #32
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	000186a0 	.word	0x000186a0
 8005af0:	001e847f 	.word	0x001e847f
 8005af4:	003d08ff 	.word	0x003d08ff
 8005af8:	431bde83 	.word	0x431bde83
 8005afc:	10624dd3 	.word	0x10624dd3

08005b00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	4608      	mov	r0, r1
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	4603      	mov	r3, r0
 8005b10:	817b      	strh	r3, [r7, #10]
 8005b12:	460b      	mov	r3, r1
 8005b14:	813b      	strh	r3, [r7, #8]
 8005b16:	4613      	mov	r3, r2
 8005b18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b1a:	f7fe fba1 	bl	8004260 <HAL_GetTick>
 8005b1e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	f040 80d9 	bne.w	8005ce0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	2319      	movs	r3, #25
 8005b34:	2201      	movs	r2, #1
 8005b36:	496d      	ldr	r1, [pc, #436]	; (8005cec <HAL_I2C_Mem_Write+0x1ec>)
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 fc7f 	bl	800643c <I2C_WaitOnFlagUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005b44:	2302      	movs	r3, #2
 8005b46:	e0cc      	b.n	8005ce2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d101      	bne.n	8005b56 <HAL_I2C_Mem_Write+0x56>
 8005b52:	2302      	movs	r3, #2
 8005b54:	e0c5      	b.n	8005ce2 <HAL_I2C_Mem_Write+0x1e2>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d007      	beq.n	8005b7c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2221      	movs	r2, #33	; 0x21
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2240      	movs	r2, #64	; 0x40
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a3a      	ldr	r2, [r7, #32]
 8005ba6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005bac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4a4d      	ldr	r2, [pc, #308]	; (8005cf0 <HAL_I2C_Mem_Write+0x1f0>)
 8005bbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bbe:	88f8      	ldrh	r0, [r7, #6]
 8005bc0:	893a      	ldrh	r2, [r7, #8]
 8005bc2:	8979      	ldrh	r1, [r7, #10]
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	9301      	str	r3, [sp, #4]
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	4603      	mov	r3, r0
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 fab6 	bl	8006140 <I2C_RequestMemoryWrite>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d052      	beq.n	8005c80 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e081      	b.n	8005ce2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 fd00 	bl	80065e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00d      	beq.n	8005c0a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d107      	bne.n	8005c06 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e06b      	b.n	8005ce2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	781a      	ldrb	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d11b      	bne.n	8005c80 <HAL_I2C_Mem_Write+0x180>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d017      	beq.n	8005c80 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	781a      	ldrb	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1aa      	bne.n	8005bde <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 fcec 	bl	800666a <I2C_WaitOnBTFFlagUntilTimeout>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00d      	beq.n	8005cb4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d107      	bne.n	8005cb0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e016      	b.n	8005ce2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e000      	b.n	8005ce2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005ce0:	2302      	movs	r3, #2
  }
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	00100002 	.word	0x00100002
 8005cf0:	ffff0000 	.word	0xffff0000

08005cf4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08c      	sub	sp, #48	; 0x30
 8005cf8:	af02      	add	r7, sp, #8
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	4608      	mov	r0, r1
 8005cfe:	4611      	mov	r1, r2
 8005d00:	461a      	mov	r2, r3
 8005d02:	4603      	mov	r3, r0
 8005d04:	817b      	strh	r3, [r7, #10]
 8005d06:	460b      	mov	r3, r1
 8005d08:	813b      	strh	r3, [r7, #8]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d0e:	f7fe faa7 	bl	8004260 <HAL_GetTick>
 8005d12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	f040 8208 	bne.w	8006132 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	2319      	movs	r3, #25
 8005d28:	2201      	movs	r2, #1
 8005d2a:	497b      	ldr	r1, [pc, #492]	; (8005f18 <HAL_I2C_Mem_Read+0x224>)
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 fb85 	bl	800643c <I2C_WaitOnFlagUntilTimeout>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e1fb      	b.n	8006134 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d101      	bne.n	8005d4a <HAL_I2C_Mem_Read+0x56>
 8005d46:	2302      	movs	r3, #2
 8005d48:	e1f4      	b.n	8006134 <HAL_I2C_Mem_Read+0x440>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d007      	beq.n	8005d70 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0201 	orr.w	r2, r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2222      	movs	r2, #34	; 0x22
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2240      	movs	r2, #64	; 0x40
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005da0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4a5b      	ldr	r2, [pc, #364]	; (8005f1c <HAL_I2C_Mem_Read+0x228>)
 8005db0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005db2:	88f8      	ldrh	r0, [r7, #6]
 8005db4:	893a      	ldrh	r2, [r7, #8]
 8005db6:	8979      	ldrh	r1, [r7, #10]
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	9301      	str	r3, [sp, #4]
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 fa52 	bl	800626c <I2C_RequestMemoryRead>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e1b0      	b.n	8006134 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d113      	bne.n	8005e02 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dda:	2300      	movs	r3, #0
 8005ddc:	623b      	str	r3, [r7, #32]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	623b      	str	r3, [r7, #32]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	623b      	str	r3, [r7, #32]
 8005dee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	e184      	b.n	800610c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d11b      	bne.n	8005e42 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61fb      	str	r3, [r7, #28]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	61fb      	str	r3, [r7, #28]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	61fb      	str	r3, [r7, #28]
 8005e2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	e164      	b.n	800610c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d11b      	bne.n	8005e82 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e58:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61bb      	str	r3, [r7, #24]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	61bb      	str	r3, [r7, #24]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	61bb      	str	r3, [r7, #24]
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	e144      	b.n	800610c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e82:	2300      	movs	r3, #0
 8005e84:	617b      	str	r3, [r7, #20]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	617b      	str	r3, [r7, #20]
 8005e96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005e98:	e138      	b.n	800610c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e9e:	2b03      	cmp	r3, #3
 8005ea0:	f200 80f1 	bhi.w	8006086 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d123      	bne.n	8005ef4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 fc1b 	bl	80066ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e139      	b.n	8006134 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691a      	ldr	r2, [r3, #16]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005edc:	3b01      	subs	r3, #1
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	3b01      	subs	r3, #1
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ef2:	e10b      	b.n	800610c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d14e      	bne.n	8005f9a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f02:	2200      	movs	r2, #0
 8005f04:	4906      	ldr	r1, [pc, #24]	; (8005f20 <HAL_I2C_Mem_Read+0x22c>)
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 fa98 	bl	800643c <I2C_WaitOnFlagUntilTimeout>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d008      	beq.n	8005f24 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e10e      	b.n	8006134 <HAL_I2C_Mem_Read+0x440>
 8005f16:	bf00      	nop
 8005f18:	00100002 	.word	0x00100002
 8005f1c:	ffff0000 	.word	0xffff0000
 8005f20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	691a      	ldr	r2, [r3, #16]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f98:	e0b8      	b.n	800610c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	4966      	ldr	r1, [pc, #408]	; (800613c <HAL_I2C_Mem_Read+0x448>)
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 fa49 	bl	800643c <I2C_WaitOnFlagUntilTimeout>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e0bf      	b.n	8006134 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691a      	ldr	r2, [r3, #16]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	494f      	ldr	r1, [pc, #316]	; (800613c <HAL_I2C_Mem_Read+0x448>)
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 fa1b 	bl	800643c <I2C_WaitOnFlagUntilTimeout>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e091      	b.n	8006134 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800601e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	691a      	ldr	r2, [r3, #16]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603c:	3b01      	subs	r3, #1
 800603e:	b29a      	uxth	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	691a      	ldr	r2, [r3, #16]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	b2d2      	uxtb	r2, r2
 800605e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800606e:	3b01      	subs	r3, #1
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006084:	e042      	b.n	800610c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006088:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 fb2e 	bl	80066ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e04c      	b.n	8006134 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f003 0304 	and.w	r3, r3, #4
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	d118      	bne.n	800610c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	691a      	ldr	r2, [r3, #16]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006102:	b29b      	uxth	r3, r3
 8006104:	3b01      	subs	r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006110:	2b00      	cmp	r3, #0
 8006112:	f47f aec2 	bne.w	8005e9a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2220      	movs	r2, #32
 800611a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	e000      	b.n	8006134 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006132:	2302      	movs	r3, #2
  }
}
 8006134:	4618      	mov	r0, r3
 8006136:	3728      	adds	r7, #40	; 0x28
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	00010004 	.word	0x00010004

08006140 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af02      	add	r7, sp, #8
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	4608      	mov	r0, r1
 800614a:	4611      	mov	r1, r2
 800614c:	461a      	mov	r2, r3
 800614e:	4603      	mov	r3, r0
 8006150:	817b      	strh	r3, [r7, #10]
 8006152:	460b      	mov	r3, r1
 8006154:	813b      	strh	r3, [r7, #8]
 8006156:	4613      	mov	r3, r2
 8006158:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006168:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	2200      	movs	r2, #0
 8006172:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 f960 	bl	800643c <I2C_WaitOnFlagUntilTimeout>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00d      	beq.n	800619e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006190:	d103      	bne.n	800619a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006198:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e05f      	b.n	800625e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800619e:	897b      	ldrh	r3, [r7, #10]
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	6a3a      	ldr	r2, [r7, #32]
 80061b2:	492d      	ldr	r1, [pc, #180]	; (8006268 <I2C_RequestMemoryWrite+0x128>)
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 f998 	bl	80064ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e04c      	b.n	800625e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061dc:	6a39      	ldr	r1, [r7, #32]
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 fa02 	bl	80065e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00d      	beq.n	8006206 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	d107      	bne.n	8006202 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006200:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e02b      	b.n	800625e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006206:	88fb      	ldrh	r3, [r7, #6]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d105      	bne.n	8006218 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800620c:	893b      	ldrh	r3, [r7, #8]
 800620e:	b2da      	uxtb	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	611a      	str	r2, [r3, #16]
 8006216:	e021      	b.n	800625c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006218:	893b      	ldrh	r3, [r7, #8]
 800621a:	0a1b      	lsrs	r3, r3, #8
 800621c:	b29b      	uxth	r3, r3
 800621e:	b2da      	uxtb	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006228:	6a39      	ldr	r1, [r7, #32]
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 f9dc 	bl	80065e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00d      	beq.n	8006252 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	2b04      	cmp	r3, #4
 800623c:	d107      	bne.n	800624e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800624c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e005      	b.n	800625e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006252:	893b      	ldrh	r3, [r7, #8]
 8006254:	b2da      	uxtb	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3718      	adds	r7, #24
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	00010002 	.word	0x00010002

0800626c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af02      	add	r7, sp, #8
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	4608      	mov	r0, r1
 8006276:	4611      	mov	r1, r2
 8006278:	461a      	mov	r2, r3
 800627a:	4603      	mov	r3, r0
 800627c:	817b      	strh	r3, [r7, #10]
 800627e:	460b      	mov	r3, r1
 8006280:	813b      	strh	r3, [r7, #8]
 8006282:	4613      	mov	r3, r2
 8006284:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006294:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 f8c2 	bl	800643c <I2C_WaitOnFlagUntilTimeout>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00d      	beq.n	80062da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062cc:	d103      	bne.n	80062d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e0aa      	b.n	8006430 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062da:	897b      	ldrh	r3, [r7, #10]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	461a      	mov	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	6a3a      	ldr	r2, [r7, #32]
 80062ee:	4952      	ldr	r1, [pc, #328]	; (8006438 <I2C_RequestMemoryRead+0x1cc>)
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 f8fa 	bl	80064ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e097      	b.n	8006430 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006300:	2300      	movs	r3, #0
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	617b      	str	r3, [r7, #20]
 8006314:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006318:	6a39      	ldr	r1, [r7, #32]
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f000 f964 	bl	80065e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00d      	beq.n	8006342 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632a:	2b04      	cmp	r3, #4
 800632c:	d107      	bne.n	800633e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800633c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e076      	b.n	8006430 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006342:	88fb      	ldrh	r3, [r7, #6]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d105      	bne.n	8006354 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006348:	893b      	ldrh	r3, [r7, #8]
 800634a:	b2da      	uxtb	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	611a      	str	r2, [r3, #16]
 8006352:	e021      	b.n	8006398 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006354:	893b      	ldrh	r3, [r7, #8]
 8006356:	0a1b      	lsrs	r3, r3, #8
 8006358:	b29b      	uxth	r3, r3
 800635a:	b2da      	uxtb	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006364:	6a39      	ldr	r1, [r7, #32]
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 f93e 	bl	80065e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00d      	beq.n	800638e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	2b04      	cmp	r3, #4
 8006378:	d107      	bne.n	800638a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006388:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e050      	b.n	8006430 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800638e:	893b      	ldrh	r3, [r7, #8]
 8006390:	b2da      	uxtb	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639a:	6a39      	ldr	r1, [r7, #32]
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 f923 	bl	80065e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00d      	beq.n	80063c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d107      	bne.n	80063c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e035      	b.n	8006430 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	2200      	movs	r2, #0
 80063dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 f82b 	bl	800643c <I2C_WaitOnFlagUntilTimeout>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00d      	beq.n	8006408 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063fa:	d103      	bne.n	8006404 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006402:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e013      	b.n	8006430 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006408:	897b      	ldrh	r3, [r7, #10]
 800640a:	b2db      	uxtb	r3, r3
 800640c:	f043 0301 	orr.w	r3, r3, #1
 8006410:	b2da      	uxtb	r2, r3
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	6a3a      	ldr	r2, [r7, #32]
 800641c:	4906      	ldr	r1, [pc, #24]	; (8006438 <I2C_RequestMemoryRead+0x1cc>)
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 f863 	bl	80064ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e000      	b.n	8006430 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	00010002 	.word	0x00010002

0800643c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	4613      	mov	r3, r2
 800644a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800644c:	e025      	b.n	800649a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006454:	d021      	beq.n	800649a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006456:	f7fd ff03 	bl	8004260 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	429a      	cmp	r2, r3
 8006464:	d302      	bcc.n	800646c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d116      	bne.n	800649a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2220      	movs	r2, #32
 8006476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	f043 0220 	orr.w	r2, r3, #32
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e023      	b.n	80064e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	0c1b      	lsrs	r3, r3, #16
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d10d      	bne.n	80064c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	43da      	mvns	r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4013      	ands	r3, r2
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	bf0c      	ite	eq
 80064b6:	2301      	moveq	r3, #1
 80064b8:	2300      	movne	r3, #0
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	461a      	mov	r2, r3
 80064be:	e00c      	b.n	80064da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	43da      	mvns	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	4013      	ands	r3, r2
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	bf0c      	ite	eq
 80064d2:	2301      	moveq	r3, #1
 80064d4:	2300      	movne	r3, #0
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	461a      	mov	r2, r3
 80064da:	79fb      	ldrb	r3, [r7, #7]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d0b6      	beq.n	800644e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	60f8      	str	r0, [r7, #12]
 80064f2:	60b9      	str	r1, [r7, #8]
 80064f4:	607a      	str	r2, [r7, #4]
 80064f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064f8:	e051      	b.n	800659e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006508:	d123      	bne.n	8006552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006518:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006522:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2220      	movs	r2, #32
 800652e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	f043 0204 	orr.w	r2, r3, #4
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e046      	b.n	80065e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006558:	d021      	beq.n	800659e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655a:	f7fd fe81 	bl	8004260 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	429a      	cmp	r2, r3
 8006568:	d302      	bcc.n	8006570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d116      	bne.n	800659e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2220      	movs	r2, #32
 800657a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	f043 0220 	orr.w	r2, r3, #32
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e020      	b.n	80065e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	0c1b      	lsrs	r3, r3, #16
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d10c      	bne.n	80065c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	43da      	mvns	r2, r3
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	4013      	ands	r3, r2
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	bf14      	ite	ne
 80065ba:	2301      	movne	r3, #1
 80065bc:	2300      	moveq	r3, #0
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	e00b      	b.n	80065da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	43da      	mvns	r2, r3
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	4013      	ands	r3, r2
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	bf14      	ite	ne
 80065d4:	2301      	movne	r3, #1
 80065d6:	2300      	moveq	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d18d      	bne.n	80064fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065f4:	e02d      	b.n	8006652 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 f8ce 	bl	8006798 <I2C_IsAcknowledgeFailed>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e02d      	b.n	8006662 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660c:	d021      	beq.n	8006652 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800660e:	f7fd fe27 	bl	8004260 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	429a      	cmp	r2, r3
 800661c:	d302      	bcc.n	8006624 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d116      	bne.n	8006652 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2220      	movs	r2, #32
 800662e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	f043 0220 	orr.w	r2, r3, #32
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e007      	b.n	8006662 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665c:	2b80      	cmp	r3, #128	; 0x80
 800665e:	d1ca      	bne.n	80065f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	60f8      	str	r0, [r7, #12]
 8006672:	60b9      	str	r1, [r7, #8]
 8006674:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006676:	e02d      	b.n	80066d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 f88d 	bl	8006798 <I2C_IsAcknowledgeFailed>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e02d      	b.n	80066e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668e:	d021      	beq.n	80066d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006690:	f7fd fde6 	bl	8004260 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	429a      	cmp	r2, r3
 800669e:	d302      	bcc.n	80066a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d116      	bne.n	80066d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c0:	f043 0220 	orr.w	r2, r3, #32
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e007      	b.n	80066e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	f003 0304 	and.w	r3, r3, #4
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d1ca      	bne.n	8006678 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066f8:	e042      	b.n	8006780 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	f003 0310 	and.w	r3, r3, #16
 8006704:	2b10      	cmp	r3, #16
 8006706:	d119      	bne.n	800673c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f06f 0210 	mvn.w	r2, #16
 8006710:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2220      	movs	r2, #32
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e029      	b.n	8006790 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800673c:	f7fd fd90 	bl	8004260 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	429a      	cmp	r2, r3
 800674a:	d302      	bcc.n	8006752 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d116      	bne.n	8006780 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2220      	movs	r2, #32
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676c:	f043 0220 	orr.w	r2, r3, #32
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e007      	b.n	8006790 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678a:	2b40      	cmp	r3, #64	; 0x40
 800678c:	d1b5      	bne.n	80066fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ae:	d11b      	bne.n	80067e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2220      	movs	r2, #32
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d4:	f043 0204 	orr.w	r2, r3, #4
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e000      	b.n	80067ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
	...

080067f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e267      	b.n	8006cda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	d075      	beq.n	8006902 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006816:	4b88      	ldr	r3, [pc, #544]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 030c 	and.w	r3, r3, #12
 800681e:	2b04      	cmp	r3, #4
 8006820:	d00c      	beq.n	800683c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006822:	4b85      	ldr	r3, [pc, #532]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800682a:	2b08      	cmp	r3, #8
 800682c:	d112      	bne.n	8006854 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800682e:	4b82      	ldr	r3, [pc, #520]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800683a:	d10b      	bne.n	8006854 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800683c:	4b7e      	ldr	r3, [pc, #504]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d05b      	beq.n	8006900 <HAL_RCC_OscConfig+0x108>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d157      	bne.n	8006900 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e242      	b.n	8006cda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800685c:	d106      	bne.n	800686c <HAL_RCC_OscConfig+0x74>
 800685e:	4b76      	ldr	r3, [pc, #472]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a75      	ldr	r2, [pc, #468]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	e01d      	b.n	80068a8 <HAL_RCC_OscConfig+0xb0>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006874:	d10c      	bne.n	8006890 <HAL_RCC_OscConfig+0x98>
 8006876:	4b70      	ldr	r3, [pc, #448]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a6f      	ldr	r2, [pc, #444]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 800687c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	4b6d      	ldr	r3, [pc, #436]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a6c      	ldr	r2, [pc, #432]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	e00b      	b.n	80068a8 <HAL_RCC_OscConfig+0xb0>
 8006890:	4b69      	ldr	r3, [pc, #420]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a68      	ldr	r2, [pc, #416]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	4b66      	ldr	r3, [pc, #408]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a65      	ldr	r2, [pc, #404]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 80068a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d013      	beq.n	80068d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b0:	f7fd fcd6 	bl	8004260 <HAL_GetTick>
 80068b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068b6:	e008      	b.n	80068ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068b8:	f7fd fcd2 	bl	8004260 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	2b64      	cmp	r3, #100	; 0x64
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e207      	b.n	8006cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ca:	4b5b      	ldr	r3, [pc, #364]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d0f0      	beq.n	80068b8 <HAL_RCC_OscConfig+0xc0>
 80068d6:	e014      	b.n	8006902 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d8:	f7fd fcc2 	bl	8004260 <HAL_GetTick>
 80068dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068e0:	f7fd fcbe 	bl	8004260 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b64      	cmp	r3, #100	; 0x64
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e1f3      	b.n	8006cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068f2:	4b51      	ldr	r3, [pc, #324]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1f0      	bne.n	80068e0 <HAL_RCC_OscConfig+0xe8>
 80068fe:	e000      	b.n	8006902 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d063      	beq.n	80069d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800690e:	4b4a      	ldr	r3, [pc, #296]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 030c 	and.w	r3, r3, #12
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00b      	beq.n	8006932 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800691a:	4b47      	ldr	r3, [pc, #284]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006922:	2b08      	cmp	r3, #8
 8006924:	d11c      	bne.n	8006960 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006926:	4b44      	ldr	r3, [pc, #272]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d116      	bne.n	8006960 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006932:	4b41      	ldr	r3, [pc, #260]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d005      	beq.n	800694a <HAL_RCC_OscConfig+0x152>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d001      	beq.n	800694a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e1c7      	b.n	8006cda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800694a:	4b3b      	ldr	r3, [pc, #236]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	4937      	ldr	r1, [pc, #220]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 800695a:	4313      	orrs	r3, r2
 800695c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800695e:	e03a      	b.n	80069d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d020      	beq.n	80069aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006968:	4b34      	ldr	r3, [pc, #208]	; (8006a3c <HAL_RCC_OscConfig+0x244>)
 800696a:	2201      	movs	r2, #1
 800696c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696e:	f7fd fc77 	bl	8004260 <HAL_GetTick>
 8006972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006974:	e008      	b.n	8006988 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006976:	f7fd fc73 	bl	8004260 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d901      	bls.n	8006988 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e1a8      	b.n	8006cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006988:	4b2b      	ldr	r3, [pc, #172]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b00      	cmp	r3, #0
 8006992:	d0f0      	beq.n	8006976 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006994:	4b28      	ldr	r3, [pc, #160]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	00db      	lsls	r3, r3, #3
 80069a2:	4925      	ldr	r1, [pc, #148]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	600b      	str	r3, [r1, #0]
 80069a8:	e015      	b.n	80069d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069aa:	4b24      	ldr	r3, [pc, #144]	; (8006a3c <HAL_RCC_OscConfig+0x244>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b0:	f7fd fc56 	bl	8004260 <HAL_GetTick>
 80069b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069b6:	e008      	b.n	80069ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069b8:	f7fd fc52 	bl	8004260 <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d901      	bls.n	80069ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e187      	b.n	8006cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ca:	4b1b      	ldr	r3, [pc, #108]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1f0      	bne.n	80069b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0308 	and.w	r3, r3, #8
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d036      	beq.n	8006a50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d016      	beq.n	8006a18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069ea:	4b15      	ldr	r3, [pc, #84]	; (8006a40 <HAL_RCC_OscConfig+0x248>)
 80069ec:	2201      	movs	r2, #1
 80069ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f0:	f7fd fc36 	bl	8004260 <HAL_GetTick>
 80069f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069f6:	e008      	b.n	8006a0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069f8:	f7fd fc32 	bl	8004260 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e167      	b.n	8006cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <HAL_RCC_OscConfig+0x240>)
 8006a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0f0      	beq.n	80069f8 <HAL_RCC_OscConfig+0x200>
 8006a16:	e01b      	b.n	8006a50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a18:	4b09      	ldr	r3, [pc, #36]	; (8006a40 <HAL_RCC_OscConfig+0x248>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a1e:	f7fd fc1f 	bl	8004260 <HAL_GetTick>
 8006a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a24:	e00e      	b.n	8006a44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a26:	f7fd fc1b 	bl	8004260 <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d907      	bls.n	8006a44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e150      	b.n	8006cda <HAL_RCC_OscConfig+0x4e2>
 8006a38:	40023800 	.word	0x40023800
 8006a3c:	42470000 	.word	0x42470000
 8006a40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a44:	4b88      	ldr	r3, [pc, #544]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1ea      	bne.n	8006a26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 8097 	beq.w	8006b8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a62:	4b81      	ldr	r3, [pc, #516]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10f      	bne.n	8006a8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60bb      	str	r3, [r7, #8]
 8006a72:	4b7d      	ldr	r3, [pc, #500]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	4a7c      	ldr	r2, [pc, #496]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8006a7e:	4b7a      	ldr	r3, [pc, #488]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a86:	60bb      	str	r3, [r7, #8]
 8006a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a8e:	4b77      	ldr	r3, [pc, #476]	; (8006c6c <HAL_RCC_OscConfig+0x474>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d118      	bne.n	8006acc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a9a:	4b74      	ldr	r3, [pc, #464]	; (8006c6c <HAL_RCC_OscConfig+0x474>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a73      	ldr	r2, [pc, #460]	; (8006c6c <HAL_RCC_OscConfig+0x474>)
 8006aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aa6:	f7fd fbdb 	bl	8004260 <HAL_GetTick>
 8006aaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aac:	e008      	b.n	8006ac0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aae:	f7fd fbd7 	bl	8004260 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d901      	bls.n	8006ac0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e10c      	b.n	8006cda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ac0:	4b6a      	ldr	r3, [pc, #424]	; (8006c6c <HAL_RCC_OscConfig+0x474>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d0f0      	beq.n	8006aae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d106      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x2ea>
 8006ad4:	4b64      	ldr	r3, [pc, #400]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad8:	4a63      	ldr	r2, [pc, #396]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006ada:	f043 0301 	orr.w	r3, r3, #1
 8006ade:	6713      	str	r3, [r2, #112]	; 0x70
 8006ae0:	e01c      	b.n	8006b1c <HAL_RCC_OscConfig+0x324>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	2b05      	cmp	r3, #5
 8006ae8:	d10c      	bne.n	8006b04 <HAL_RCC_OscConfig+0x30c>
 8006aea:	4b5f      	ldr	r3, [pc, #380]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aee:	4a5e      	ldr	r2, [pc, #376]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006af0:	f043 0304 	orr.w	r3, r3, #4
 8006af4:	6713      	str	r3, [r2, #112]	; 0x70
 8006af6:	4b5c      	ldr	r3, [pc, #368]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afa:	4a5b      	ldr	r2, [pc, #364]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006afc:	f043 0301 	orr.w	r3, r3, #1
 8006b00:	6713      	str	r3, [r2, #112]	; 0x70
 8006b02:	e00b      	b.n	8006b1c <HAL_RCC_OscConfig+0x324>
 8006b04:	4b58      	ldr	r3, [pc, #352]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b08:	4a57      	ldr	r2, [pc, #348]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006b0a:	f023 0301 	bic.w	r3, r3, #1
 8006b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b10:	4b55      	ldr	r3, [pc, #340]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b14:	4a54      	ldr	r2, [pc, #336]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006b16:	f023 0304 	bic.w	r3, r3, #4
 8006b1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d015      	beq.n	8006b50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b24:	f7fd fb9c 	bl	8004260 <HAL_GetTick>
 8006b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b2a:	e00a      	b.n	8006b42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b2c:	f7fd fb98 	bl	8004260 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e0cb      	b.n	8006cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b42:	4b49      	ldr	r3, [pc, #292]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d0ee      	beq.n	8006b2c <HAL_RCC_OscConfig+0x334>
 8006b4e:	e014      	b.n	8006b7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b50:	f7fd fb86 	bl	8004260 <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b56:	e00a      	b.n	8006b6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b58:	f7fd fb82 	bl	8004260 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e0b5      	b.n	8006cda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b6e:	4b3e      	ldr	r3, [pc, #248]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1ee      	bne.n	8006b58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b7a:	7dfb      	ldrb	r3, [r7, #23]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d105      	bne.n	8006b8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b80:	4b39      	ldr	r3, [pc, #228]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b84:	4a38      	ldr	r2, [pc, #224]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 80a1 	beq.w	8006cd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b96:	4b34      	ldr	r3, [pc, #208]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f003 030c 	and.w	r3, r3, #12
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	d05c      	beq.n	8006c5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d141      	bne.n	8006c2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006baa:	4b31      	ldr	r3, [pc, #196]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb0:	f7fd fb56 	bl	8004260 <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bb8:	f7fd fb52 	bl	8004260 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e087      	b.n	8006cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bca:	4b27      	ldr	r3, [pc, #156]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f0      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	69da      	ldr	r2, [r3, #28]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	431a      	orrs	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	019b      	lsls	r3, r3, #6
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bec:	085b      	lsrs	r3, r3, #1
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	041b      	lsls	r3, r3, #16
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf8:	061b      	lsls	r3, r3, #24
 8006bfa:	491b      	ldr	r1, [pc, #108]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c00:	4b1b      	ldr	r3, [pc, #108]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006c02:	2201      	movs	r2, #1
 8006c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c06:	f7fd fb2b 	bl	8004260 <HAL_GetTick>
 8006c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c0c:	e008      	b.n	8006c20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c0e:	f7fd fb27 	bl	8004260 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d901      	bls.n	8006c20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e05c      	b.n	8006cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c20:	4b11      	ldr	r3, [pc, #68]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d0f0      	beq.n	8006c0e <HAL_RCC_OscConfig+0x416>
 8006c2c:	e054      	b.n	8006cd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c2e:	4b10      	ldr	r3, [pc, #64]	; (8006c70 <HAL_RCC_OscConfig+0x478>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c34:	f7fd fb14 	bl	8004260 <HAL_GetTick>
 8006c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c3a:	e008      	b.n	8006c4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c3c:	f7fd fb10 	bl	8004260 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e045      	b.n	8006cda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c4e:	4b06      	ldr	r3, [pc, #24]	; (8006c68 <HAL_RCC_OscConfig+0x470>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1f0      	bne.n	8006c3c <HAL_RCC_OscConfig+0x444>
 8006c5a:	e03d      	b.n	8006cd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d107      	bne.n	8006c74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e038      	b.n	8006cda <HAL_RCC_OscConfig+0x4e2>
 8006c68:	40023800 	.word	0x40023800
 8006c6c:	40007000 	.word	0x40007000
 8006c70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c74:	4b1b      	ldr	r3, [pc, #108]	; (8006ce4 <HAL_RCC_OscConfig+0x4ec>)
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d028      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d121      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d11a      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006caa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d111      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cba:	085b      	lsrs	r3, r3, #1
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d107      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d001      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e000      	b.n	8006cda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	40023800 	.word	0x40023800

08006ce8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e0cc      	b.n	8006e96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006cfc:	4b68      	ldr	r3, [pc, #416]	; (8006ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0307 	and.w	r3, r3, #7
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d90c      	bls.n	8006d24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d0a:	4b65      	ldr	r3, [pc, #404]	; (8006ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	b2d2      	uxtb	r2, r2
 8006d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d12:	4b63      	ldr	r3, [pc, #396]	; (8006ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0307 	and.w	r3, r3, #7
 8006d1a:	683a      	ldr	r2, [r7, #0]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d001      	beq.n	8006d24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e0b8      	b.n	8006e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d020      	beq.n	8006d72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0304 	and.w	r3, r3, #4
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d005      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d3c:	4b59      	ldr	r3, [pc, #356]	; (8006ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	4a58      	ldr	r2, [pc, #352]	; (8006ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0308 	and.w	r3, r3, #8
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d005      	beq.n	8006d60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d54:	4b53      	ldr	r3, [pc, #332]	; (8006ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	4a52      	ldr	r2, [pc, #328]	; (8006ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d60:	4b50      	ldr	r3, [pc, #320]	; (8006ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	494d      	ldr	r1, [pc, #308]	; (8006ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d044      	beq.n	8006e08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d107      	bne.n	8006d96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d86:	4b47      	ldr	r3, [pc, #284]	; (8006ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d119      	bne.n	8006dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e07f      	b.n	8006e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d003      	beq.n	8006da6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d107      	bne.n	8006db6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006da6:	4b3f      	ldr	r3, [pc, #252]	; (8006ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d109      	bne.n	8006dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e06f      	b.n	8006e96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006db6:	4b3b      	ldr	r3, [pc, #236]	; (8006ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e067      	b.n	8006e96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dc6:	4b37      	ldr	r3, [pc, #220]	; (8006ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f023 0203 	bic.w	r2, r3, #3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	4934      	ldr	r1, [pc, #208]	; (8006ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006dd8:	f7fd fa42 	bl	8004260 <HAL_GetTick>
 8006ddc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dde:	e00a      	b.n	8006df6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006de0:	f7fd fa3e 	bl	8004260 <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d901      	bls.n	8006df6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e04f      	b.n	8006e96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006df6:	4b2b      	ldr	r3, [pc, #172]	; (8006ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 020c 	and.w	r2, r3, #12
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d1eb      	bne.n	8006de0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e08:	4b25      	ldr	r3, [pc, #148]	; (8006ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d20c      	bcs.n	8006e30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e16:	4b22      	ldr	r3, [pc, #136]	; (8006ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	b2d2      	uxtb	r2, r2
 8006e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e1e:	4b20      	ldr	r3, [pc, #128]	; (8006ea0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0307 	and.w	r3, r3, #7
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d001      	beq.n	8006e30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e032      	b.n	8006e96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0304 	and.w	r3, r3, #4
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d008      	beq.n	8006e4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e3c:	4b19      	ldr	r3, [pc, #100]	; (8006ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	4916      	ldr	r1, [pc, #88]	; (8006ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0308 	and.w	r3, r3, #8
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d009      	beq.n	8006e6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e5a:	4b12      	ldr	r3, [pc, #72]	; (8006ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	490e      	ldr	r1, [pc, #56]	; (8006ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e6e:	f000 f821 	bl	8006eb4 <HAL_RCC_GetSysClockFreq>
 8006e72:	4602      	mov	r2, r0
 8006e74:	4b0b      	ldr	r3, [pc, #44]	; (8006ea4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	091b      	lsrs	r3, r3, #4
 8006e7a:	f003 030f 	and.w	r3, r3, #15
 8006e7e:	490a      	ldr	r1, [pc, #40]	; (8006ea8 <HAL_RCC_ClockConfig+0x1c0>)
 8006e80:	5ccb      	ldrb	r3, [r1, r3]
 8006e82:	fa22 f303 	lsr.w	r3, r2, r3
 8006e86:	4a09      	ldr	r2, [pc, #36]	; (8006eac <HAL_RCC_ClockConfig+0x1c4>)
 8006e88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e8a:	4b09      	ldr	r3, [pc, #36]	; (8006eb0 <HAL_RCC_ClockConfig+0x1c8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fd f9a2 	bl	80041d8 <HAL_InitTick>

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	40023c00 	.word	0x40023c00
 8006ea4:	40023800 	.word	0x40023800
 8006ea8:	0800d794 	.word	0x0800d794
 8006eac:	20000014 	.word	0x20000014
 8006eb0:	20000018 	.word	0x20000018

08006eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006eb8:	b094      	sub	sp, #80	; 0x50
 8006eba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ecc:	4b79      	ldr	r3, [pc, #484]	; (80070b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f003 030c 	and.w	r3, r3, #12
 8006ed4:	2b08      	cmp	r3, #8
 8006ed6:	d00d      	beq.n	8006ef4 <HAL_RCC_GetSysClockFreq+0x40>
 8006ed8:	2b08      	cmp	r3, #8
 8006eda:	f200 80e1 	bhi.w	80070a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d002      	beq.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x34>
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	d003      	beq.n	8006eee <HAL_RCC_GetSysClockFreq+0x3a>
 8006ee6:	e0db      	b.n	80070a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ee8:	4b73      	ldr	r3, [pc, #460]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006eea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006eec:	e0db      	b.n	80070a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006eee:	4b73      	ldr	r3, [pc, #460]	; (80070bc <HAL_RCC_GetSysClockFreq+0x208>)
 8006ef0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ef2:	e0d8      	b.n	80070a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ef4:	4b6f      	ldr	r3, [pc, #444]	; (80070b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006efc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006efe:	4b6d      	ldr	r3, [pc, #436]	; (80070b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d063      	beq.n	8006fd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f0a:	4b6a      	ldr	r3, [pc, #424]	; (80070b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	099b      	lsrs	r3, r3, #6
 8006f10:	2200      	movs	r2, #0
 8006f12:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f1e:	2300      	movs	r3, #0
 8006f20:	637b      	str	r3, [r7, #52]	; 0x34
 8006f22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006f26:	4622      	mov	r2, r4
 8006f28:	462b      	mov	r3, r5
 8006f2a:	f04f 0000 	mov.w	r0, #0
 8006f2e:	f04f 0100 	mov.w	r1, #0
 8006f32:	0159      	lsls	r1, r3, #5
 8006f34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f38:	0150      	lsls	r0, r2, #5
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4621      	mov	r1, r4
 8006f40:	1a51      	subs	r1, r2, r1
 8006f42:	6139      	str	r1, [r7, #16]
 8006f44:	4629      	mov	r1, r5
 8006f46:	eb63 0301 	sbc.w	r3, r3, r1
 8006f4a:	617b      	str	r3, [r7, #20]
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	f04f 0300 	mov.w	r3, #0
 8006f54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f58:	4659      	mov	r1, fp
 8006f5a:	018b      	lsls	r3, r1, #6
 8006f5c:	4651      	mov	r1, sl
 8006f5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f62:	4651      	mov	r1, sl
 8006f64:	018a      	lsls	r2, r1, #6
 8006f66:	4651      	mov	r1, sl
 8006f68:	ebb2 0801 	subs.w	r8, r2, r1
 8006f6c:	4659      	mov	r1, fp
 8006f6e:	eb63 0901 	sbc.w	r9, r3, r1
 8006f72:	f04f 0200 	mov.w	r2, #0
 8006f76:	f04f 0300 	mov.w	r3, #0
 8006f7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f86:	4690      	mov	r8, r2
 8006f88:	4699      	mov	r9, r3
 8006f8a:	4623      	mov	r3, r4
 8006f8c:	eb18 0303 	adds.w	r3, r8, r3
 8006f90:	60bb      	str	r3, [r7, #8]
 8006f92:	462b      	mov	r3, r5
 8006f94:	eb49 0303 	adc.w	r3, r9, r3
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	f04f 0200 	mov.w	r2, #0
 8006f9e:	f04f 0300 	mov.w	r3, #0
 8006fa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	024b      	lsls	r3, r1, #9
 8006faa:	4621      	mov	r1, r4
 8006fac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	024a      	lsls	r2, r1, #9
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fba:	2200      	movs	r2, #0
 8006fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fc4:	f7f9 fd92 	bl	8000aec <__aeabi_uldivmod>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	4613      	mov	r3, r2
 8006fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fd0:	e058      	b.n	8007084 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fd2:	4b38      	ldr	r3, [pc, #224]	; (80070b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	099b      	lsrs	r3, r3, #6
 8006fd8:	2200      	movs	r2, #0
 8006fda:	4618      	mov	r0, r3
 8006fdc:	4611      	mov	r1, r2
 8006fde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006fe2:	623b      	str	r3, [r7, #32]
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8006fe8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006fec:	4642      	mov	r2, r8
 8006fee:	464b      	mov	r3, r9
 8006ff0:	f04f 0000 	mov.w	r0, #0
 8006ff4:	f04f 0100 	mov.w	r1, #0
 8006ff8:	0159      	lsls	r1, r3, #5
 8006ffa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ffe:	0150      	lsls	r0, r2, #5
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	4641      	mov	r1, r8
 8007006:	ebb2 0a01 	subs.w	sl, r2, r1
 800700a:	4649      	mov	r1, r9
 800700c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007010:	f04f 0200 	mov.w	r2, #0
 8007014:	f04f 0300 	mov.w	r3, #0
 8007018:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800701c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007020:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007024:	ebb2 040a 	subs.w	r4, r2, sl
 8007028:	eb63 050b 	sbc.w	r5, r3, fp
 800702c:	f04f 0200 	mov.w	r2, #0
 8007030:	f04f 0300 	mov.w	r3, #0
 8007034:	00eb      	lsls	r3, r5, #3
 8007036:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800703a:	00e2      	lsls	r2, r4, #3
 800703c:	4614      	mov	r4, r2
 800703e:	461d      	mov	r5, r3
 8007040:	4643      	mov	r3, r8
 8007042:	18e3      	adds	r3, r4, r3
 8007044:	603b      	str	r3, [r7, #0]
 8007046:	464b      	mov	r3, r9
 8007048:	eb45 0303 	adc.w	r3, r5, r3
 800704c:	607b      	str	r3, [r7, #4]
 800704e:	f04f 0200 	mov.w	r2, #0
 8007052:	f04f 0300 	mov.w	r3, #0
 8007056:	e9d7 4500 	ldrd	r4, r5, [r7]
 800705a:	4629      	mov	r1, r5
 800705c:	028b      	lsls	r3, r1, #10
 800705e:	4621      	mov	r1, r4
 8007060:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007064:	4621      	mov	r1, r4
 8007066:	028a      	lsls	r2, r1, #10
 8007068:	4610      	mov	r0, r2
 800706a:	4619      	mov	r1, r3
 800706c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800706e:	2200      	movs	r2, #0
 8007070:	61bb      	str	r3, [r7, #24]
 8007072:	61fa      	str	r2, [r7, #28]
 8007074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007078:	f7f9 fd38 	bl	8000aec <__aeabi_uldivmod>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	4613      	mov	r3, r2
 8007082:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007084:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	0c1b      	lsrs	r3, r3, #16
 800708a:	f003 0303 	and.w	r3, r3, #3
 800708e:	3301      	adds	r3, #1
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007094:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007098:	fbb2 f3f3 	udiv	r3, r2, r3
 800709c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800709e:	e002      	b.n	80070a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070a0:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80070a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80070a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3750      	adds	r7, #80	; 0x50
 80070ac:	46bd      	mov	sp, r7
 80070ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070b2:	bf00      	nop
 80070b4:	40023800 	.word	0x40023800
 80070b8:	00f42400 	.word	0x00f42400
 80070bc:	007a1200 	.word	0x007a1200

080070c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070c0:	b480      	push	{r7}
 80070c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070c4:	4b03      	ldr	r3, [pc, #12]	; (80070d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80070c6:	681b      	ldr	r3, [r3, #0]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	20000014 	.word	0x20000014

080070d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070dc:	f7ff fff0 	bl	80070c0 <HAL_RCC_GetHCLKFreq>
 80070e0:	4602      	mov	r2, r0
 80070e2:	4b05      	ldr	r3, [pc, #20]	; (80070f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	0a9b      	lsrs	r3, r3, #10
 80070e8:	f003 0307 	and.w	r3, r3, #7
 80070ec:	4903      	ldr	r1, [pc, #12]	; (80070fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80070ee:	5ccb      	ldrb	r3, [r1, r3]
 80070f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	40023800 	.word	0x40023800
 80070fc:	0800d7a4 	.word	0x0800d7a4

08007100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007104:	f7ff ffdc 	bl	80070c0 <HAL_RCC_GetHCLKFreq>
 8007108:	4602      	mov	r2, r0
 800710a:	4b05      	ldr	r3, [pc, #20]	; (8007120 <HAL_RCC_GetPCLK2Freq+0x20>)
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	0b5b      	lsrs	r3, r3, #13
 8007110:	f003 0307 	and.w	r3, r3, #7
 8007114:	4903      	ldr	r1, [pc, #12]	; (8007124 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007116:	5ccb      	ldrb	r3, [r1, r3]
 8007118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800711c:	4618      	mov	r0, r3
 800711e:	bd80      	pop	{r7, pc}
 8007120:	40023800 	.word	0x40023800
 8007124:	0800d7a4 	.word	0x0800d7a4

08007128 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e07b      	b.n	8007232 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713e:	2b00      	cmp	r3, #0
 8007140:	d108      	bne.n	8007154 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800714a:	d009      	beq.n	8007160 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	61da      	str	r2, [r3, #28]
 8007152:	e005      	b.n	8007160 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d106      	bne.n	8007180 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7fc fafe 	bl	800377c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2202      	movs	r2, #2
 8007184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007196:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80071a8:	431a      	orrs	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071b2:	431a      	orrs	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	431a      	orrs	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	431a      	orrs	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071d0:	431a      	orrs	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071da:	431a      	orrs	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a1b      	ldr	r3, [r3, #32]
 80071e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e4:	ea42 0103 	orr.w	r1, r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	0c1b      	lsrs	r3, r3, #16
 80071fe:	f003 0104 	and.w	r1, r3, #4
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007206:	f003 0210 	and.w	r2, r3, #16
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	69da      	ldr	r2, [r3, #28]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007220:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b088      	sub	sp, #32
 800723e:	af02      	add	r7, sp, #8
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	60b9      	str	r1, [r7, #8]
 8007244:	603b      	str	r3, [r7, #0]
 8007246:	4613      	mov	r3, r2
 8007248:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007256:	d112      	bne.n	800727e <HAL_SPI_Receive+0x44>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10e      	bne.n	800727e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2204      	movs	r2, #4
 8007264:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007268:	88fa      	ldrh	r2, [r7, #6]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	4613      	mov	r3, r2
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	68b9      	ldr	r1, [r7, #8]
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 f8f1 	bl	800745c <HAL_SPI_TransmitReceive>
 800727a:	4603      	mov	r3, r0
 800727c:	e0ea      	b.n	8007454 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007284:	2b01      	cmp	r3, #1
 8007286:	d101      	bne.n	800728c <HAL_SPI_Receive+0x52>
 8007288:	2302      	movs	r3, #2
 800728a:	e0e3      	b.n	8007454 <HAL_SPI_Receive+0x21a>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007294:	f7fc ffe4 	bl	8004260 <HAL_GetTick>
 8007298:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d002      	beq.n	80072ac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80072a6:	2302      	movs	r3, #2
 80072a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072aa:	e0ca      	b.n	8007442 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d002      	beq.n	80072b8 <HAL_SPI_Receive+0x7e>
 80072b2:	88fb      	ldrh	r3, [r7, #6]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d102      	bne.n	80072be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072bc:	e0c1      	b.n	8007442 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2204      	movs	r2, #4
 80072c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	88fa      	ldrh	r2, [r7, #6]
 80072d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	88fa      	ldrh	r2, [r7, #6]
 80072dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007304:	d10f      	bne.n	8007326 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007314:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007324:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007330:	2b40      	cmp	r3, #64	; 0x40
 8007332:	d007      	beq.n	8007344 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007342:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d162      	bne.n	8007412 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800734c:	e02e      	b.n	80073ac <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b01      	cmp	r3, #1
 800735a:	d115      	bne.n	8007388 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f103 020c 	add.w	r2, r3, #12
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007368:	7812      	ldrb	r2, [r2, #0]
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800737c:	b29b      	uxth	r3, r3
 800737e:	3b01      	subs	r3, #1
 8007380:	b29a      	uxth	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007386:	e011      	b.n	80073ac <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007388:	f7fc ff6a 	bl	8004260 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	429a      	cmp	r2, r3
 8007396:	d803      	bhi.n	80073a0 <HAL_SPI_Receive+0x166>
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739e:	d102      	bne.n	80073a6 <HAL_SPI_Receive+0x16c>
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d102      	bne.n	80073ac <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80073aa:	e04a      	b.n	8007442 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1cb      	bne.n	800734e <HAL_SPI_Receive+0x114>
 80073b6:	e031      	b.n	800741c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d113      	bne.n	80073ee <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68da      	ldr	r2, [r3, #12]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d0:	b292      	uxth	r2, r2
 80073d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d8:	1c9a      	adds	r2, r3, #2
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	3b01      	subs	r3, #1
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073ec:	e011      	b.n	8007412 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073ee:	f7fc ff37 	bl	8004260 <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	683a      	ldr	r2, [r7, #0]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d803      	bhi.n	8007406 <HAL_SPI_Receive+0x1cc>
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007404:	d102      	bne.n	800740c <HAL_SPI_Receive+0x1d2>
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d102      	bne.n	8007412 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007410:	e017      	b.n	8007442 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007416:	b29b      	uxth	r3, r3
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1cd      	bne.n	80073b8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 fa45 	bl	80078b0 <SPI_EndRxTransaction>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2220      	movs	r2, #32
 8007430:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	75fb      	strb	r3, [r7, #23]
 800743e:	e000      	b.n	8007442 <HAL_SPI_Receive+0x208>
  }

error :
 8007440:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007452:	7dfb      	ldrb	r3, [r7, #23]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3718      	adds	r7, #24
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b08c      	sub	sp, #48	; 0x30
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
 8007468:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800746a:	2301      	movs	r3, #1
 800746c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800747a:	2b01      	cmp	r3, #1
 800747c:	d101      	bne.n	8007482 <HAL_SPI_TransmitReceive+0x26>
 800747e:	2302      	movs	r3, #2
 8007480:	e18a      	b.n	8007798 <HAL_SPI_TransmitReceive+0x33c>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800748a:	f7fc fee9 	bl	8004260 <HAL_GetTick>
 800748e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80074a0:	887b      	ldrh	r3, [r7, #2]
 80074a2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d00f      	beq.n	80074cc <HAL_SPI_TransmitReceive+0x70>
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074b2:	d107      	bne.n	80074c4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d103      	bne.n	80074c4 <HAL_SPI_TransmitReceive+0x68>
 80074bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074c0:	2b04      	cmp	r3, #4
 80074c2:	d003      	beq.n	80074cc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80074c4:	2302      	movs	r3, #2
 80074c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80074ca:	e15b      	b.n	8007784 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d005      	beq.n	80074de <HAL_SPI_TransmitReceive+0x82>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <HAL_SPI_TransmitReceive+0x82>
 80074d8:	887b      	ldrh	r3, [r7, #2]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d103      	bne.n	80074e6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80074e4:	e14e      	b.n	8007784 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	d003      	beq.n	80074fa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2205      	movs	r2, #5
 80074f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	887a      	ldrh	r2, [r7, #2]
 800750a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	887a      	ldrh	r2, [r7, #2]
 8007510:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	887a      	ldrh	r2, [r7, #2]
 800751c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	887a      	ldrh	r2, [r7, #2]
 8007522:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753a:	2b40      	cmp	r3, #64	; 0x40
 800753c:	d007      	beq.n	800754e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800754c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007556:	d178      	bne.n	800764a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <HAL_SPI_TransmitReceive+0x10a>
 8007560:	8b7b      	ldrh	r3, [r7, #26]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d166      	bne.n	8007634 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756a:	881a      	ldrh	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007576:	1c9a      	adds	r2, r3, #2
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007580:	b29b      	uxth	r3, r3
 8007582:	3b01      	subs	r3, #1
 8007584:	b29a      	uxth	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800758a:	e053      	b.n	8007634 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	2b02      	cmp	r3, #2
 8007598:	d11b      	bne.n	80075d2 <HAL_SPI_TransmitReceive+0x176>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800759e:	b29b      	uxth	r3, r3
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d016      	beq.n	80075d2 <HAL_SPI_TransmitReceive+0x176>
 80075a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d113      	bne.n	80075d2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ae:	881a      	ldrh	r2, [r3, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ba:	1c9a      	adds	r2, r3, #2
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d119      	bne.n	8007614 <HAL_SPI_TransmitReceive+0x1b8>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d014      	beq.n	8007614 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68da      	ldr	r2, [r3, #12]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f4:	b292      	uxth	r2, r2
 80075f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fc:	1c9a      	adds	r2, r3, #2
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007606:	b29b      	uxth	r3, r3
 8007608:	3b01      	subs	r3, #1
 800760a:	b29a      	uxth	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007610:	2301      	movs	r3, #1
 8007612:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007614:	f7fc fe24 	bl	8004260 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007620:	429a      	cmp	r2, r3
 8007622:	d807      	bhi.n	8007634 <HAL_SPI_TransmitReceive+0x1d8>
 8007624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762a:	d003      	beq.n	8007634 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007632:	e0a7      	b.n	8007784 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007638:	b29b      	uxth	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1a6      	bne.n	800758c <HAL_SPI_TransmitReceive+0x130>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007642:	b29b      	uxth	r3, r3
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1a1      	bne.n	800758c <HAL_SPI_TransmitReceive+0x130>
 8007648:	e07c      	b.n	8007744 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d002      	beq.n	8007658 <HAL_SPI_TransmitReceive+0x1fc>
 8007652:	8b7b      	ldrh	r3, [r7, #26]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d16b      	bne.n	8007730 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	330c      	adds	r3, #12
 8007662:	7812      	ldrb	r2, [r2, #0]
 8007664:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766a:	1c5a      	adds	r2, r3, #1
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007674:	b29b      	uxth	r3, r3
 8007676:	3b01      	subs	r3, #1
 8007678:	b29a      	uxth	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800767e:	e057      	b.n	8007730 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b02      	cmp	r3, #2
 800768c:	d11c      	bne.n	80076c8 <HAL_SPI_TransmitReceive+0x26c>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007692:	b29b      	uxth	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d017      	beq.n	80076c8 <HAL_SPI_TransmitReceive+0x26c>
 8007698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769a:	2b01      	cmp	r3, #1
 800769c:	d114      	bne.n	80076c8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	330c      	adds	r3, #12
 80076a8:	7812      	ldrb	r2, [r2, #0]
 80076aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	3b01      	subs	r3, #1
 80076be:	b29a      	uxth	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d119      	bne.n	800770a <HAL_SPI_TransmitReceive+0x2ae>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076da:	b29b      	uxth	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d014      	beq.n	800770a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68da      	ldr	r2, [r3, #12]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ea:	b2d2      	uxtb	r2, r2
 80076ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	3b01      	subs	r3, #1
 8007700:	b29a      	uxth	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007706:	2301      	movs	r3, #1
 8007708:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800770a:	f7fc fda9 	bl	8004260 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007716:	429a      	cmp	r2, r3
 8007718:	d803      	bhi.n	8007722 <HAL_SPI_TransmitReceive+0x2c6>
 800771a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007720:	d102      	bne.n	8007728 <HAL_SPI_TransmitReceive+0x2cc>
 8007722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007724:	2b00      	cmp	r3, #0
 8007726:	d103      	bne.n	8007730 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800772e:	e029      	b.n	8007784 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007734:	b29b      	uxth	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1a2      	bne.n	8007680 <HAL_SPI_TransmitReceive+0x224>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800773e:	b29b      	uxth	r3, r3
 8007740:	2b00      	cmp	r3, #0
 8007742:	d19d      	bne.n	8007680 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007746:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 f917 	bl	800797c <SPI_EndRxTxTransaction>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d006      	beq.n	8007762 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2220      	movs	r2, #32
 800775e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007760:	e010      	b.n	8007784 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10b      	bne.n	8007782 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800776a:	2300      	movs	r3, #0
 800776c:	617b      	str	r3, [r7, #20]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	617b      	str	r3, [r7, #20]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	617b      	str	r3, [r7, #20]
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	e000      	b.n	8007784 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007782:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007794:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007798:	4618      	mov	r0, r3
 800779a:	3730      	adds	r7, #48	; 0x30
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	603b      	str	r3, [r7, #0]
 80077ac:	4613      	mov	r3, r2
 80077ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80077b0:	f7fc fd56 	bl	8004260 <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b8:	1a9b      	subs	r3, r3, r2
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	4413      	add	r3, r2
 80077be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80077c0:	f7fc fd4e 	bl	8004260 <HAL_GetTick>
 80077c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80077c6:	4b39      	ldr	r3, [pc, #228]	; (80078ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	015b      	lsls	r3, r3, #5
 80077cc:	0d1b      	lsrs	r3, r3, #20
 80077ce:	69fa      	ldr	r2, [r7, #28]
 80077d0:	fb02 f303 	mul.w	r3, r2, r3
 80077d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077d6:	e054      	b.n	8007882 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077de:	d050      	beq.n	8007882 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077e0:	f7fc fd3e 	bl	8004260 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	69fa      	ldr	r2, [r7, #28]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d902      	bls.n	80077f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d13d      	bne.n	8007872 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007804:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800780e:	d111      	bne.n	8007834 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007818:	d004      	beq.n	8007824 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007822:	d107      	bne.n	8007834 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007832:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800783c:	d10f      	bne.n	800785e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800785c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e017      	b.n	80078a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d101      	bne.n	800787c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	3b01      	subs	r3, #1
 8007880:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	4013      	ands	r3, r2
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	429a      	cmp	r2, r3
 8007890:	bf0c      	ite	eq
 8007892:	2301      	moveq	r3, #1
 8007894:	2300      	movne	r3, #0
 8007896:	b2db      	uxtb	r3, r3
 8007898:	461a      	mov	r2, r3
 800789a:	79fb      	ldrb	r3, [r7, #7]
 800789c:	429a      	cmp	r2, r3
 800789e:	d19b      	bne.n	80077d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3720      	adds	r7, #32
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	20000014 	.word	0x20000014

080078b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af02      	add	r7, sp, #8
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078c4:	d111      	bne.n	80078ea <SPI_EndRxTransaction+0x3a>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078ce:	d004      	beq.n	80078da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d8:	d107      	bne.n	80078ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078e8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078f2:	d12a      	bne.n	800794a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078fc:	d012      	beq.n	8007924 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2200      	movs	r2, #0
 8007906:	2180      	movs	r1, #128	; 0x80
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f7ff ff49 	bl	80077a0 <SPI_WaitFlagStateUntilTimeout>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d02d      	beq.n	8007970 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007918:	f043 0220 	orr.w	r2, r3, #32
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e026      	b.n	8007972 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2200      	movs	r2, #0
 800792c:	2101      	movs	r1, #1
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f7ff ff36 	bl	80077a0 <SPI_WaitFlagStateUntilTimeout>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d01a      	beq.n	8007970 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800793e:	f043 0220 	orr.w	r2, r3, #32
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e013      	b.n	8007972 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	2200      	movs	r2, #0
 8007952:	2101      	movs	r1, #1
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f7ff ff23 	bl	80077a0 <SPI_WaitFlagStateUntilTimeout>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d007      	beq.n	8007970 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007964:	f043 0220 	orr.w	r2, r3, #32
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e000      	b.n	8007972 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
	...

0800797c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b088      	sub	sp, #32
 8007980:	af02      	add	r7, sp, #8
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007988:	4b1b      	ldr	r3, [pc, #108]	; (80079f8 <SPI_EndRxTxTransaction+0x7c>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a1b      	ldr	r2, [pc, #108]	; (80079fc <SPI_EndRxTxTransaction+0x80>)
 800798e:	fba2 2303 	umull	r2, r3, r2, r3
 8007992:	0d5b      	lsrs	r3, r3, #21
 8007994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007998:	fb02 f303 	mul.w	r3, r2, r3
 800799c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079a6:	d112      	bne.n	80079ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2200      	movs	r2, #0
 80079b0:	2180      	movs	r1, #128	; 0x80
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f7ff fef4 	bl	80077a0 <SPI_WaitFlagStateUntilTimeout>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d016      	beq.n	80079ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c2:	f043 0220 	orr.w	r2, r3, #32
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e00f      	b.n	80079ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00a      	beq.n	80079ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e4:	2b80      	cmp	r3, #128	; 0x80
 80079e6:	d0f2      	beq.n	80079ce <SPI_EndRxTxTransaction+0x52>
 80079e8:	e000      	b.n	80079ec <SPI_EndRxTxTransaction+0x70>
        break;
 80079ea:	bf00      	nop
  }

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3718      	adds	r7, #24
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	20000014 	.word	0x20000014
 80079fc:	165e9f81 	.word	0x165e9f81

08007a00 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e038      	b.n	8007a88 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d106      	bne.n	8007a30 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f7f9 fd38 	bl	80014a0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	3308      	adds	r3, #8
 8007a38:	4619      	mov	r1, r3
 8007a3a:	4610      	mov	r0, r2
 8007a3c:	f002 f8dc 	bl	8009bf8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6818      	ldr	r0, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	68b9      	ldr	r1, [r7, #8]
 8007a4c:	f002 f93e 	bl	8009ccc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6858      	ldr	r0, [r3, #4]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	689a      	ldr	r2, [r3, #8]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5c:	6879      	ldr	r1, [r7, #4]
 8007a5e:	f002 f96b 	bl	8009d38 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	6892      	ldr	r2, [r2, #8]
 8007a6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	6892      	ldr	r2, [r2, #8]
 8007a76:	f041 0101 	orr.w	r1, r1, #1
 8007a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e041      	b.n	8007b26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d106      	bne.n	8007abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7fc f9ce 	bl	8003e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	3304      	adds	r3, #4
 8007acc:	4619      	mov	r1, r3
 8007ace:	4610      	mov	r0, r2
 8007ad0:	f000 fc7a 	bl	80083c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
	...

08007b30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d001      	beq.n	8007b48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e04e      	b.n	8007be6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68da      	ldr	r2, [r3, #12]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f042 0201 	orr.w	r2, r2, #1
 8007b5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a23      	ldr	r2, [pc, #140]	; (8007bf4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d022      	beq.n	8007bb0 <HAL_TIM_Base_Start_IT+0x80>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b72:	d01d      	beq.n	8007bb0 <HAL_TIM_Base_Start_IT+0x80>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a1f      	ldr	r2, [pc, #124]	; (8007bf8 <HAL_TIM_Base_Start_IT+0xc8>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d018      	beq.n	8007bb0 <HAL_TIM_Base_Start_IT+0x80>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a1e      	ldr	r2, [pc, #120]	; (8007bfc <HAL_TIM_Base_Start_IT+0xcc>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d013      	beq.n	8007bb0 <HAL_TIM_Base_Start_IT+0x80>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a1c      	ldr	r2, [pc, #112]	; (8007c00 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d00e      	beq.n	8007bb0 <HAL_TIM_Base_Start_IT+0x80>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a1b      	ldr	r2, [pc, #108]	; (8007c04 <HAL_TIM_Base_Start_IT+0xd4>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d009      	beq.n	8007bb0 <HAL_TIM_Base_Start_IT+0x80>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a19      	ldr	r2, [pc, #100]	; (8007c08 <HAL_TIM_Base_Start_IT+0xd8>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d004      	beq.n	8007bb0 <HAL_TIM_Base_Start_IT+0x80>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a18      	ldr	r2, [pc, #96]	; (8007c0c <HAL_TIM_Base_Start_IT+0xdc>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d111      	bne.n	8007bd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f003 0307 	and.w	r3, r3, #7
 8007bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2b06      	cmp	r3, #6
 8007bc0:	d010      	beq.n	8007be4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f042 0201 	orr.w	r2, r2, #1
 8007bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bd2:	e007      	b.n	8007be4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f042 0201 	orr.w	r2, r2, #1
 8007be2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	40010000 	.word	0x40010000
 8007bf8:	40000400 	.word	0x40000400
 8007bfc:	40000800 	.word	0x40000800
 8007c00:	40000c00 	.word	0x40000c00
 8007c04:	40010400 	.word	0x40010400
 8007c08:	40014000 	.word	0x40014000
 8007c0c:	40001800 	.word	0x40001800

08007c10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e041      	b.n	8007ca6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d106      	bne.n	8007c3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f839 	bl	8007cae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	4610      	mov	r0, r2
 8007c50:	f000 fbba 	bl	80083c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b083      	sub	sp, #12
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007cb6:	bf00      	nop
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
	...

08007cc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d109      	bne.n	8007ce8 <HAL_TIM_PWM_Start+0x24>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	bf14      	ite	ne
 8007ce0:	2301      	movne	r3, #1
 8007ce2:	2300      	moveq	r3, #0
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	e022      	b.n	8007d2e <HAL_TIM_PWM_Start+0x6a>
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d109      	bne.n	8007d02 <HAL_TIM_PWM_Start+0x3e>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	bf14      	ite	ne
 8007cfa:	2301      	movne	r3, #1
 8007cfc:	2300      	moveq	r3, #0
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	e015      	b.n	8007d2e <HAL_TIM_PWM_Start+0x6a>
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2b08      	cmp	r3, #8
 8007d06:	d109      	bne.n	8007d1c <HAL_TIM_PWM_Start+0x58>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	bf14      	ite	ne
 8007d14:	2301      	movne	r3, #1
 8007d16:	2300      	moveq	r3, #0
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	e008      	b.n	8007d2e <HAL_TIM_PWM_Start+0x6a>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	bf14      	ite	ne
 8007d28:	2301      	movne	r3, #1
 8007d2a:	2300      	moveq	r3, #0
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e07c      	b.n	8007e30 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d104      	bne.n	8007d46 <HAL_TIM_PWM_Start+0x82>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d44:	e013      	b.n	8007d6e <HAL_TIM_PWM_Start+0xaa>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b04      	cmp	r3, #4
 8007d4a:	d104      	bne.n	8007d56 <HAL_TIM_PWM_Start+0x92>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d54:	e00b      	b.n	8007d6e <HAL_TIM_PWM_Start+0xaa>
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d104      	bne.n	8007d66 <HAL_TIM_PWM_Start+0xa2>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d64:	e003      	b.n	8007d6e <HAL_TIM_PWM_Start+0xaa>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2202      	movs	r2, #2
 8007d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2201      	movs	r2, #1
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 fe10 	bl	800899c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a2d      	ldr	r2, [pc, #180]	; (8007e38 <HAL_TIM_PWM_Start+0x174>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d004      	beq.n	8007d90 <HAL_TIM_PWM_Start+0xcc>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a2c      	ldr	r2, [pc, #176]	; (8007e3c <HAL_TIM_PWM_Start+0x178>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d101      	bne.n	8007d94 <HAL_TIM_PWM_Start+0xd0>
 8007d90:	2301      	movs	r3, #1
 8007d92:	e000      	b.n	8007d96 <HAL_TIM_PWM_Start+0xd2>
 8007d94:	2300      	movs	r3, #0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d007      	beq.n	8007daa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007da8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a22      	ldr	r2, [pc, #136]	; (8007e38 <HAL_TIM_PWM_Start+0x174>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d022      	beq.n	8007dfa <HAL_TIM_PWM_Start+0x136>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dbc:	d01d      	beq.n	8007dfa <HAL_TIM_PWM_Start+0x136>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a1f      	ldr	r2, [pc, #124]	; (8007e40 <HAL_TIM_PWM_Start+0x17c>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d018      	beq.n	8007dfa <HAL_TIM_PWM_Start+0x136>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a1d      	ldr	r2, [pc, #116]	; (8007e44 <HAL_TIM_PWM_Start+0x180>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d013      	beq.n	8007dfa <HAL_TIM_PWM_Start+0x136>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a1c      	ldr	r2, [pc, #112]	; (8007e48 <HAL_TIM_PWM_Start+0x184>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d00e      	beq.n	8007dfa <HAL_TIM_PWM_Start+0x136>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a16      	ldr	r2, [pc, #88]	; (8007e3c <HAL_TIM_PWM_Start+0x178>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d009      	beq.n	8007dfa <HAL_TIM_PWM_Start+0x136>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a18      	ldr	r2, [pc, #96]	; (8007e4c <HAL_TIM_PWM_Start+0x188>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d004      	beq.n	8007dfa <HAL_TIM_PWM_Start+0x136>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a16      	ldr	r2, [pc, #88]	; (8007e50 <HAL_TIM_PWM_Start+0x18c>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d111      	bne.n	8007e1e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	f003 0307 	and.w	r3, r3, #7
 8007e04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b06      	cmp	r3, #6
 8007e0a:	d010      	beq.n	8007e2e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f042 0201 	orr.w	r2, r2, #1
 8007e1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e1c:	e007      	b.n	8007e2e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f042 0201 	orr.w	r2, r2, #1
 8007e2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	40010000 	.word	0x40010000
 8007e3c:	40010400 	.word	0x40010400
 8007e40:	40000400 	.word	0x40000400
 8007e44:	40000800 	.word	0x40000800
 8007e48:	40000c00 	.word	0x40000c00
 8007e4c:	40014000 	.word	0x40014000
 8007e50:	40001800 	.word	0x40001800

08007e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	f003 0302 	and.w	r3, r3, #2
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d122      	bne.n	8007eb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	f003 0302 	and.w	r3, r3, #2
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d11b      	bne.n	8007eb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f06f 0202 	mvn.w	r2, #2
 8007e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2201      	movs	r2, #1
 8007e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	f003 0303 	and.w	r3, r3, #3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fa77 	bl	800838a <HAL_TIM_IC_CaptureCallback>
 8007e9c:	e005      	b.n	8007eaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fa69 	bl	8008376 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fa7a 	bl	800839e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	f003 0304 	and.w	r3, r3, #4
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	d122      	bne.n	8007f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	f003 0304 	and.w	r3, r3, #4
 8007ec8:	2b04      	cmp	r3, #4
 8007eca:	d11b      	bne.n	8007f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f06f 0204 	mvn.w	r2, #4
 8007ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2202      	movs	r2, #2
 8007eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fa4d 	bl	800838a <HAL_TIM_IC_CaptureCallback>
 8007ef0:	e005      	b.n	8007efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fa3f 	bl	8008376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fa50 	bl	800839e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	f003 0308 	and.w	r3, r3, #8
 8007f0e:	2b08      	cmp	r3, #8
 8007f10:	d122      	bne.n	8007f58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f003 0308 	and.w	r3, r3, #8
 8007f1c:	2b08      	cmp	r3, #8
 8007f1e:	d11b      	bne.n	8007f58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f06f 0208 	mvn.w	r2, #8
 8007f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2204      	movs	r2, #4
 8007f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	69db      	ldr	r3, [r3, #28]
 8007f36:	f003 0303 	and.w	r3, r3, #3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d003      	beq.n	8007f46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fa23 	bl	800838a <HAL_TIM_IC_CaptureCallback>
 8007f44:	e005      	b.n	8007f52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fa15 	bl	8008376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fa26 	bl	800839e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	f003 0310 	and.w	r3, r3, #16
 8007f62:	2b10      	cmp	r3, #16
 8007f64:	d122      	bne.n	8007fac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	f003 0310 	and.w	r3, r3, #16
 8007f70:	2b10      	cmp	r3, #16
 8007f72:	d11b      	bne.n	8007fac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f06f 0210 	mvn.w	r2, #16
 8007f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2208      	movs	r2, #8
 8007f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	69db      	ldr	r3, [r3, #28]
 8007f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f9f9 	bl	800838a <HAL_TIM_IC_CaptureCallback>
 8007f98:	e005      	b.n	8007fa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f9eb 	bl	8008376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f9fc 	bl	800839e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d10e      	bne.n	8007fd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d107      	bne.n	8007fd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f06f 0201 	mvn.w	r2, #1
 8007fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7fb fb1e 	bl	8003614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe2:	2b80      	cmp	r3, #128	; 0x80
 8007fe4:	d10e      	bne.n	8008004 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff0:	2b80      	cmp	r3, #128	; 0x80
 8007ff2:	d107      	bne.n	8008004 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fd78 	bl	8008af4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800e:	2b40      	cmp	r3, #64	; 0x40
 8008010:	d10e      	bne.n	8008030 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800801c:	2b40      	cmp	r3, #64	; 0x40
 800801e:	d107      	bne.n	8008030 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f9c1 	bl	80083b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	f003 0320 	and.w	r3, r3, #32
 800803a:	2b20      	cmp	r3, #32
 800803c:	d10e      	bne.n	800805c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	f003 0320 	and.w	r3, r3, #32
 8008048:	2b20      	cmp	r3, #32
 800804a:	d107      	bne.n	800805c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f06f 0220 	mvn.w	r2, #32
 8008054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fd42 	bl	8008ae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800805c:	bf00      	nop
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800807a:	2b01      	cmp	r3, #1
 800807c:	d101      	bne.n	8008082 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800807e:	2302      	movs	r3, #2
 8008080:	e0ae      	b.n	80081e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b0c      	cmp	r3, #12
 800808e:	f200 809f 	bhi.w	80081d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008092:	a201      	add	r2, pc, #4	; (adr r2, 8008098 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008098:	080080cd 	.word	0x080080cd
 800809c:	080081d1 	.word	0x080081d1
 80080a0:	080081d1 	.word	0x080081d1
 80080a4:	080081d1 	.word	0x080081d1
 80080a8:	0800810d 	.word	0x0800810d
 80080ac:	080081d1 	.word	0x080081d1
 80080b0:	080081d1 	.word	0x080081d1
 80080b4:	080081d1 	.word	0x080081d1
 80080b8:	0800814f 	.word	0x0800814f
 80080bc:	080081d1 	.word	0x080081d1
 80080c0:	080081d1 	.word	0x080081d1
 80080c4:	080081d1 	.word	0x080081d1
 80080c8:	0800818f 	.word	0x0800818f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68b9      	ldr	r1, [r7, #8]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 fa18 	bl	8008508 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	699a      	ldr	r2, [r3, #24]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f042 0208 	orr.w	r2, r2, #8
 80080e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	699a      	ldr	r2, [r3, #24]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f022 0204 	bic.w	r2, r2, #4
 80080f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6999      	ldr	r1, [r3, #24]
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	691a      	ldr	r2, [r3, #16]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	430a      	orrs	r2, r1
 8008108:	619a      	str	r2, [r3, #24]
      break;
 800810a:	e064      	b.n	80081d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68b9      	ldr	r1, [r7, #8]
 8008112:	4618      	mov	r0, r3
 8008114:	f000 fa68 	bl	80085e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	699a      	ldr	r2, [r3, #24]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	699a      	ldr	r2, [r3, #24]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6999      	ldr	r1, [r3, #24]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	021a      	lsls	r2, r3, #8
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	430a      	orrs	r2, r1
 800814a:	619a      	str	r2, [r3, #24]
      break;
 800814c:	e043      	b.n	80081d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68b9      	ldr	r1, [r7, #8]
 8008154:	4618      	mov	r0, r3
 8008156:	f000 fabd 	bl	80086d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	69da      	ldr	r2, [r3, #28]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f042 0208 	orr.w	r2, r2, #8
 8008168:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	69da      	ldr	r2, [r3, #28]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f022 0204 	bic.w	r2, r2, #4
 8008178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	69d9      	ldr	r1, [r3, #28]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	691a      	ldr	r2, [r3, #16]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	430a      	orrs	r2, r1
 800818a:	61da      	str	r2, [r3, #28]
      break;
 800818c:	e023      	b.n	80081d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68b9      	ldr	r1, [r7, #8]
 8008194:	4618      	mov	r0, r3
 8008196:	f000 fb11 	bl	80087bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	69da      	ldr	r2, [r3, #28]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	69da      	ldr	r2, [r3, #28]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	69d9      	ldr	r1, [r3, #28]
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	021a      	lsls	r2, r3, #8
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	430a      	orrs	r2, r1
 80081cc:	61da      	str	r2, [r3, #28]
      break;
 80081ce:	e002      	b.n	80081d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	75fb      	strb	r3, [r7, #23]
      break;
 80081d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081de:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3718      	adds	r7, #24
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d101      	bne.n	8008204 <HAL_TIM_ConfigClockSource+0x1c>
 8008200:	2302      	movs	r3, #2
 8008202:	e0b4      	b.n	800836e <HAL_TIM_ConfigClockSource+0x186>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2202      	movs	r2, #2
 8008210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800822a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800823c:	d03e      	beq.n	80082bc <HAL_TIM_ConfigClockSource+0xd4>
 800823e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008242:	f200 8087 	bhi.w	8008354 <HAL_TIM_ConfigClockSource+0x16c>
 8008246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800824a:	f000 8086 	beq.w	800835a <HAL_TIM_ConfigClockSource+0x172>
 800824e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008252:	d87f      	bhi.n	8008354 <HAL_TIM_ConfigClockSource+0x16c>
 8008254:	2b70      	cmp	r3, #112	; 0x70
 8008256:	d01a      	beq.n	800828e <HAL_TIM_ConfigClockSource+0xa6>
 8008258:	2b70      	cmp	r3, #112	; 0x70
 800825a:	d87b      	bhi.n	8008354 <HAL_TIM_ConfigClockSource+0x16c>
 800825c:	2b60      	cmp	r3, #96	; 0x60
 800825e:	d050      	beq.n	8008302 <HAL_TIM_ConfigClockSource+0x11a>
 8008260:	2b60      	cmp	r3, #96	; 0x60
 8008262:	d877      	bhi.n	8008354 <HAL_TIM_ConfigClockSource+0x16c>
 8008264:	2b50      	cmp	r3, #80	; 0x50
 8008266:	d03c      	beq.n	80082e2 <HAL_TIM_ConfigClockSource+0xfa>
 8008268:	2b50      	cmp	r3, #80	; 0x50
 800826a:	d873      	bhi.n	8008354 <HAL_TIM_ConfigClockSource+0x16c>
 800826c:	2b40      	cmp	r3, #64	; 0x40
 800826e:	d058      	beq.n	8008322 <HAL_TIM_ConfigClockSource+0x13a>
 8008270:	2b40      	cmp	r3, #64	; 0x40
 8008272:	d86f      	bhi.n	8008354 <HAL_TIM_ConfigClockSource+0x16c>
 8008274:	2b30      	cmp	r3, #48	; 0x30
 8008276:	d064      	beq.n	8008342 <HAL_TIM_ConfigClockSource+0x15a>
 8008278:	2b30      	cmp	r3, #48	; 0x30
 800827a:	d86b      	bhi.n	8008354 <HAL_TIM_ConfigClockSource+0x16c>
 800827c:	2b20      	cmp	r3, #32
 800827e:	d060      	beq.n	8008342 <HAL_TIM_ConfigClockSource+0x15a>
 8008280:	2b20      	cmp	r3, #32
 8008282:	d867      	bhi.n	8008354 <HAL_TIM_ConfigClockSource+0x16c>
 8008284:	2b00      	cmp	r3, #0
 8008286:	d05c      	beq.n	8008342 <HAL_TIM_ConfigClockSource+0x15a>
 8008288:	2b10      	cmp	r3, #16
 800828a:	d05a      	beq.n	8008342 <HAL_TIM_ConfigClockSource+0x15a>
 800828c:	e062      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6818      	ldr	r0, [r3, #0]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	6899      	ldr	r1, [r3, #8]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	685a      	ldr	r2, [r3, #4]
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	f000 fb5d 	bl	800895c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80082b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	609a      	str	r2, [r3, #8]
      break;
 80082ba:	e04f      	b.n	800835c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6818      	ldr	r0, [r3, #0]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	6899      	ldr	r1, [r3, #8]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	685a      	ldr	r2, [r3, #4]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	f000 fb46 	bl	800895c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	689a      	ldr	r2, [r3, #8]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082de:	609a      	str	r2, [r3, #8]
      break;
 80082e0:	e03c      	b.n	800835c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6818      	ldr	r0, [r3, #0]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	6859      	ldr	r1, [r3, #4]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	461a      	mov	r2, r3
 80082f0:	f000 faba 	bl	8008868 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2150      	movs	r1, #80	; 0x50
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 fb13 	bl	8008926 <TIM_ITRx_SetConfig>
      break;
 8008300:	e02c      	b.n	800835c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6818      	ldr	r0, [r3, #0]
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	6859      	ldr	r1, [r3, #4]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	461a      	mov	r2, r3
 8008310:	f000 fad9 	bl	80088c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2160      	movs	r1, #96	; 0x60
 800831a:	4618      	mov	r0, r3
 800831c:	f000 fb03 	bl	8008926 <TIM_ITRx_SetConfig>
      break;
 8008320:	e01c      	b.n	800835c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6818      	ldr	r0, [r3, #0]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	6859      	ldr	r1, [r3, #4]
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	461a      	mov	r2, r3
 8008330:	f000 fa9a 	bl	8008868 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2140      	movs	r1, #64	; 0x40
 800833a:	4618      	mov	r0, r3
 800833c:	f000 faf3 	bl	8008926 <TIM_ITRx_SetConfig>
      break;
 8008340:	e00c      	b.n	800835c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4619      	mov	r1, r3
 800834c:	4610      	mov	r0, r2
 800834e:	f000 faea 	bl	8008926 <TIM_ITRx_SetConfig>
      break;
 8008352:	e003      	b.n	800835c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	73fb      	strb	r3, [r7, #15]
      break;
 8008358:	e000      	b.n	800835c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800835a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800836c:	7bfb      	ldrb	r3, [r7, #15]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008376:	b480      	push	{r7}
 8008378:	b083      	sub	sp, #12
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800837e:	bf00      	nop
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800838a:	b480      	push	{r7}
 800838c:	b083      	sub	sp, #12
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008392:	bf00      	nop
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800839e:	b480      	push	{r7}
 80083a0:	b083      	sub	sp, #12
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083a6:	bf00      	nop
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b083      	sub	sp, #12
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083ba:	bf00      	nop
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
	...

080083c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a40      	ldr	r2, [pc, #256]	; (80084dc <TIM_Base_SetConfig+0x114>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d013      	beq.n	8008408 <TIM_Base_SetConfig+0x40>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083e6:	d00f      	beq.n	8008408 <TIM_Base_SetConfig+0x40>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a3d      	ldr	r2, [pc, #244]	; (80084e0 <TIM_Base_SetConfig+0x118>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d00b      	beq.n	8008408 <TIM_Base_SetConfig+0x40>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a3c      	ldr	r2, [pc, #240]	; (80084e4 <TIM_Base_SetConfig+0x11c>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d007      	beq.n	8008408 <TIM_Base_SetConfig+0x40>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a3b      	ldr	r2, [pc, #236]	; (80084e8 <TIM_Base_SetConfig+0x120>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d003      	beq.n	8008408 <TIM_Base_SetConfig+0x40>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a3a      	ldr	r2, [pc, #232]	; (80084ec <TIM_Base_SetConfig+0x124>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d108      	bne.n	800841a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800840e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	4313      	orrs	r3, r2
 8008418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a2f      	ldr	r2, [pc, #188]	; (80084dc <TIM_Base_SetConfig+0x114>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d02b      	beq.n	800847a <TIM_Base_SetConfig+0xb2>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008428:	d027      	beq.n	800847a <TIM_Base_SetConfig+0xb2>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a2c      	ldr	r2, [pc, #176]	; (80084e0 <TIM_Base_SetConfig+0x118>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d023      	beq.n	800847a <TIM_Base_SetConfig+0xb2>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a2b      	ldr	r2, [pc, #172]	; (80084e4 <TIM_Base_SetConfig+0x11c>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d01f      	beq.n	800847a <TIM_Base_SetConfig+0xb2>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a2a      	ldr	r2, [pc, #168]	; (80084e8 <TIM_Base_SetConfig+0x120>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d01b      	beq.n	800847a <TIM_Base_SetConfig+0xb2>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a29      	ldr	r2, [pc, #164]	; (80084ec <TIM_Base_SetConfig+0x124>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d017      	beq.n	800847a <TIM_Base_SetConfig+0xb2>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a28      	ldr	r2, [pc, #160]	; (80084f0 <TIM_Base_SetConfig+0x128>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d013      	beq.n	800847a <TIM_Base_SetConfig+0xb2>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a27      	ldr	r2, [pc, #156]	; (80084f4 <TIM_Base_SetConfig+0x12c>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d00f      	beq.n	800847a <TIM_Base_SetConfig+0xb2>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a26      	ldr	r2, [pc, #152]	; (80084f8 <TIM_Base_SetConfig+0x130>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d00b      	beq.n	800847a <TIM_Base_SetConfig+0xb2>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a25      	ldr	r2, [pc, #148]	; (80084fc <TIM_Base_SetConfig+0x134>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d007      	beq.n	800847a <TIM_Base_SetConfig+0xb2>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a24      	ldr	r2, [pc, #144]	; (8008500 <TIM_Base_SetConfig+0x138>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d003      	beq.n	800847a <TIM_Base_SetConfig+0xb2>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a23      	ldr	r2, [pc, #140]	; (8008504 <TIM_Base_SetConfig+0x13c>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d108      	bne.n	800848c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	4313      	orrs	r3, r2
 800848a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	4313      	orrs	r3, r2
 8008498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	689a      	ldr	r2, [r3, #8]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a0a      	ldr	r2, [pc, #40]	; (80084dc <TIM_Base_SetConfig+0x114>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d003      	beq.n	80084c0 <TIM_Base_SetConfig+0xf8>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a0c      	ldr	r2, [pc, #48]	; (80084ec <TIM_Base_SetConfig+0x124>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d103      	bne.n	80084c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	691a      	ldr	r2, [r3, #16]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	615a      	str	r2, [r3, #20]
}
 80084ce:	bf00      	nop
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	40010000 	.word	0x40010000
 80084e0:	40000400 	.word	0x40000400
 80084e4:	40000800 	.word	0x40000800
 80084e8:	40000c00 	.word	0x40000c00
 80084ec:	40010400 	.word	0x40010400
 80084f0:	40014000 	.word	0x40014000
 80084f4:	40014400 	.word	0x40014400
 80084f8:	40014800 	.word	0x40014800
 80084fc:	40001800 	.word	0x40001800
 8008500:	40001c00 	.word	0x40001c00
 8008504:	40002000 	.word	0x40002000

08008508 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008508:	b480      	push	{r7}
 800850a:	b087      	sub	sp, #28
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	f023 0201 	bic.w	r2, r3, #1
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a1b      	ldr	r3, [r3, #32]
 8008522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f023 0303 	bic.w	r3, r3, #3
 800853e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	4313      	orrs	r3, r2
 8008548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f023 0302 	bic.w	r3, r3, #2
 8008550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	4313      	orrs	r3, r2
 800855a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a20      	ldr	r2, [pc, #128]	; (80085e0 <TIM_OC1_SetConfig+0xd8>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d003      	beq.n	800856c <TIM_OC1_SetConfig+0x64>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a1f      	ldr	r2, [pc, #124]	; (80085e4 <TIM_OC1_SetConfig+0xdc>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d10c      	bne.n	8008586 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	f023 0308 	bic.w	r3, r3, #8
 8008572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	697a      	ldr	r2, [r7, #20]
 800857a:	4313      	orrs	r3, r2
 800857c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	f023 0304 	bic.w	r3, r3, #4
 8008584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a15      	ldr	r2, [pc, #84]	; (80085e0 <TIM_OC1_SetConfig+0xd8>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d003      	beq.n	8008596 <TIM_OC1_SetConfig+0x8e>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a14      	ldr	r2, [pc, #80]	; (80085e4 <TIM_OC1_SetConfig+0xdc>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d111      	bne.n	80085ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800859c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	685a      	ldr	r2, [r3, #4]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	621a      	str	r2, [r3, #32]
}
 80085d4:	bf00      	nop
 80085d6:	371c      	adds	r7, #28
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	40010000 	.word	0x40010000
 80085e4:	40010400 	.word	0x40010400

080085e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b087      	sub	sp, #28
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a1b      	ldr	r3, [r3, #32]
 80085f6:	f023 0210 	bic.w	r2, r3, #16
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800861e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	021b      	lsls	r3, r3, #8
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	4313      	orrs	r3, r2
 800862a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f023 0320 	bic.w	r3, r3, #32
 8008632:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	011b      	lsls	r3, r3, #4
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	4313      	orrs	r3, r2
 800863e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a22      	ldr	r2, [pc, #136]	; (80086cc <TIM_OC2_SetConfig+0xe4>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d003      	beq.n	8008650 <TIM_OC2_SetConfig+0x68>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a21      	ldr	r2, [pc, #132]	; (80086d0 <TIM_OC2_SetConfig+0xe8>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d10d      	bne.n	800866c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	011b      	lsls	r3, r3, #4
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	4313      	orrs	r3, r2
 8008662:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800866a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a17      	ldr	r2, [pc, #92]	; (80086cc <TIM_OC2_SetConfig+0xe4>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d003      	beq.n	800867c <TIM_OC2_SetConfig+0x94>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a16      	ldr	r2, [pc, #88]	; (80086d0 <TIM_OC2_SetConfig+0xe8>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d113      	bne.n	80086a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800868a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	695b      	ldr	r3, [r3, #20]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	4313      	orrs	r3, r2
 8008696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	685a      	ldr	r2, [r3, #4]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	697a      	ldr	r2, [r7, #20]
 80086bc:	621a      	str	r2, [r3, #32]
}
 80086be:	bf00      	nop
 80086c0:	371c      	adds	r7, #28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	40010000 	.word	0x40010000
 80086d0:	40010400 	.word	0x40010400

080086d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b087      	sub	sp, #28
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f023 0303 	bic.w	r3, r3, #3
 800870a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	4313      	orrs	r3, r2
 8008714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800871c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	021b      	lsls	r3, r3, #8
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	4313      	orrs	r3, r2
 8008728:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a21      	ldr	r2, [pc, #132]	; (80087b4 <TIM_OC3_SetConfig+0xe0>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d003      	beq.n	800873a <TIM_OC3_SetConfig+0x66>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a20      	ldr	r2, [pc, #128]	; (80087b8 <TIM_OC3_SetConfig+0xe4>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d10d      	bne.n	8008756 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008740:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	021b      	lsls	r3, r3, #8
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	4313      	orrs	r3, r2
 800874c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a16      	ldr	r2, [pc, #88]	; (80087b4 <TIM_OC3_SetConfig+0xe0>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d003      	beq.n	8008766 <TIM_OC3_SetConfig+0x92>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a15      	ldr	r2, [pc, #84]	; (80087b8 <TIM_OC3_SetConfig+0xe4>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d113      	bne.n	800878e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800876c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	011b      	lsls	r3, r3, #4
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	4313      	orrs	r3, r2
 8008780:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	011b      	lsls	r3, r3, #4
 8008788:	693a      	ldr	r2, [r7, #16]
 800878a:	4313      	orrs	r3, r2
 800878c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	685a      	ldr	r2, [r3, #4]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	697a      	ldr	r2, [r7, #20]
 80087a6:	621a      	str	r2, [r3, #32]
}
 80087a8:	bf00      	nop
 80087aa:	371c      	adds	r7, #28
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr
 80087b4:	40010000 	.word	0x40010000
 80087b8:	40010400 	.word	0x40010400

080087bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087bc:	b480      	push	{r7}
 80087be:	b087      	sub	sp, #28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	021b      	lsls	r3, r3, #8
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	031b      	lsls	r3, r3, #12
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	4313      	orrs	r3, r2
 8008812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a12      	ldr	r2, [pc, #72]	; (8008860 <TIM_OC4_SetConfig+0xa4>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d003      	beq.n	8008824 <TIM_OC4_SetConfig+0x68>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a11      	ldr	r2, [pc, #68]	; (8008864 <TIM_OC4_SetConfig+0xa8>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d109      	bne.n	8008838 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800882a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	695b      	ldr	r3, [r3, #20]
 8008830:	019b      	lsls	r3, r3, #6
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	4313      	orrs	r3, r2
 8008836:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	697a      	ldr	r2, [r7, #20]
 800883c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	685a      	ldr	r2, [r3, #4]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	693a      	ldr	r2, [r7, #16]
 8008850:	621a      	str	r2, [r3, #32]
}
 8008852:	bf00      	nop
 8008854:	371c      	adds	r7, #28
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	40010000 	.word	0x40010000
 8008864:	40010400 	.word	0x40010400

08008868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6a1b      	ldr	r3, [r3, #32]
 8008878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	f023 0201 	bic.w	r2, r3, #1
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	011b      	lsls	r3, r3, #4
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	4313      	orrs	r3, r2
 800889c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f023 030a 	bic.w	r3, r3, #10
 80088a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	693a      	ldr	r2, [r7, #16]
 80088b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	621a      	str	r2, [r3, #32]
}
 80088ba:	bf00      	nop
 80088bc:	371c      	adds	r7, #28
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr

080088c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088c6:	b480      	push	{r7}
 80088c8:	b087      	sub	sp, #28
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	60f8      	str	r0, [r7, #12]
 80088ce:	60b9      	str	r1, [r7, #8]
 80088d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	f023 0210 	bic.w	r2, r3, #16
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6a1b      	ldr	r3, [r3, #32]
 80088e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	031b      	lsls	r3, r3, #12
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008902:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	011b      	lsls	r3, r3, #4
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	4313      	orrs	r3, r2
 800890c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	621a      	str	r2, [r3, #32]
}
 800891a:	bf00      	nop
 800891c:	371c      	adds	r7, #28
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008926:	b480      	push	{r7}
 8008928:	b085      	sub	sp, #20
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800893c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	4313      	orrs	r3, r2
 8008944:	f043 0307 	orr.w	r3, r3, #7
 8008948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	609a      	str	r2, [r3, #8]
}
 8008950:	bf00      	nop
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800895c:	b480      	push	{r7}
 800895e:	b087      	sub	sp, #28
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
 8008968:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008976:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	021a      	lsls	r2, r3, #8
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	431a      	orrs	r2, r3
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	4313      	orrs	r3, r2
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	4313      	orrs	r3, r2
 8008988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	609a      	str	r2, [r3, #8]
}
 8008990:	bf00      	nop
 8008992:	371c      	adds	r7, #28
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800899c:	b480      	push	{r7}
 800899e:	b087      	sub	sp, #28
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	f003 031f 	and.w	r3, r3, #31
 80089ae:	2201      	movs	r2, #1
 80089b0:	fa02 f303 	lsl.w	r3, r2, r3
 80089b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6a1a      	ldr	r2, [r3, #32]
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	43db      	mvns	r3, r3
 80089be:	401a      	ands	r2, r3
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6a1a      	ldr	r2, [r3, #32]
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	f003 031f 	and.w	r3, r3, #31
 80089ce:	6879      	ldr	r1, [r7, #4]
 80089d0:	fa01 f303 	lsl.w	r3, r1, r3
 80089d4:	431a      	orrs	r2, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	621a      	str	r2, [r3, #32]
}
 80089da:	bf00      	nop
 80089dc:	371c      	adds	r7, #28
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
	...

080089e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d101      	bne.n	8008a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089fc:	2302      	movs	r3, #2
 80089fe:	e05a      	b.n	8008ab6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a21      	ldr	r2, [pc, #132]	; (8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d022      	beq.n	8008a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a4c:	d01d      	beq.n	8008a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a1d      	ldr	r2, [pc, #116]	; (8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d018      	beq.n	8008a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a1b      	ldr	r2, [pc, #108]	; (8008acc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d013      	beq.n	8008a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a1a      	ldr	r2, [pc, #104]	; (8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d00e      	beq.n	8008a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a18      	ldr	r2, [pc, #96]	; (8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d009      	beq.n	8008a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a17      	ldr	r2, [pc, #92]	; (8008ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d004      	beq.n	8008a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a15      	ldr	r2, [pc, #84]	; (8008adc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d10c      	bne.n	8008aa4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3714      	adds	r7, #20
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	40010000 	.word	0x40010000
 8008ac8:	40000400 	.word	0x40000400
 8008acc:	40000800 	.word	0x40000800
 8008ad0:	40000c00 	.word	0x40000c00
 8008ad4:	40010400 	.word	0x40010400
 8008ad8:	40014000 	.word	0x40014000
 8008adc:	40001800 	.word	0x40001800

08008ae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e03f      	b.n	8008b9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d106      	bne.n	8008b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7fb fa78 	bl	8004024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2224      	movs	r2, #36	; 0x24
 8008b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68da      	ldr	r2, [r3, #12]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fddf 	bl	8009710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	691a      	ldr	r2, [r3, #16]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	695a      	ldr	r2, [r3, #20]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68da      	ldr	r2, [r3, #12]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2220      	movs	r2, #32
 8008b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2220      	movs	r2, #32
 8008b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b08a      	sub	sp, #40	; 0x28
 8008ba6:	af02      	add	r7, sp, #8
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	603b      	str	r3, [r7, #0]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b20      	cmp	r3, #32
 8008bc0:	d17c      	bne.n	8008cbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d002      	beq.n	8008bce <HAL_UART_Transmit+0x2c>
 8008bc8:	88fb      	ldrh	r3, [r7, #6]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d101      	bne.n	8008bd2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e075      	b.n	8008cbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d101      	bne.n	8008be0 <HAL_UART_Transmit+0x3e>
 8008bdc:	2302      	movs	r3, #2
 8008bde:	e06e      	b.n	8008cbe <HAL_UART_Transmit+0x11c>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2221      	movs	r2, #33	; 0x21
 8008bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008bf6:	f7fb fb33 	bl	8004260 <HAL_GetTick>
 8008bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	88fa      	ldrh	r2, [r7, #6]
 8008c00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	88fa      	ldrh	r2, [r7, #6]
 8008c06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c10:	d108      	bne.n	8008c24 <HAL_UART_Transmit+0x82>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d104      	bne.n	8008c24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	61bb      	str	r3, [r7, #24]
 8008c22:	e003      	b.n	8008c2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008c34:	e02a      	b.n	8008c8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	2180      	movs	r1, #128	; 0x80
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f000 fb1f 	bl	8009284 <UART_WaitOnFlagUntilTimeout>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d001      	beq.n	8008c50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e036      	b.n	8008cbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10b      	bne.n	8008c6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	881b      	ldrh	r3, [r3, #0]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	3302      	adds	r3, #2
 8008c6a:	61bb      	str	r3, [r7, #24]
 8008c6c:	e007      	b.n	8008c7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	781a      	ldrb	r2, [r3, #0]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	3b01      	subs	r3, #1
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1cf      	bne.n	8008c36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	2140      	movs	r1, #64	; 0x40
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f000 faef 	bl	8009284 <UART_WaitOnFlagUntilTimeout>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008cac:	2303      	movs	r3, #3
 8008cae:	e006      	b.n	8008cbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2220      	movs	r2, #32
 8008cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	e000      	b.n	8008cbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008cbc:	2302      	movs	r3, #2
  }
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3720      	adds	r7, #32
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b084      	sub	sp, #16
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	60f8      	str	r0, [r7, #12]
 8008cce:	60b9      	str	r1, [r7, #8]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	2b20      	cmp	r3, #32
 8008cde:	d11d      	bne.n	8008d1c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d002      	beq.n	8008cec <HAL_UART_Receive_IT+0x26>
 8008ce6:	88fb      	ldrh	r3, [r7, #6]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e016      	b.n	8008d1e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d101      	bne.n	8008cfe <HAL_UART_Receive_IT+0x38>
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	e00f      	b.n	8008d1e <HAL_UART_Receive_IT+0x58>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d0c:	88fb      	ldrh	r3, [r7, #6]
 8008d0e:	461a      	mov	r2, r3
 8008d10:	68b9      	ldr	r1, [r7, #8]
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f000 fb24 	bl	8009360 <UART_Start_Receive_IT>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	e000      	b.n	8008d1e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008d1c:	2302      	movs	r3, #2
  }
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
	...

08008d28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b0ba      	sub	sp, #232	; 0xe8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008d54:	2300      	movs	r3, #0
 8008d56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d5e:	f003 030f 	and.w	r3, r3, #15
 8008d62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008d66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10f      	bne.n	8008d8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d72:	f003 0320 	and.w	r3, r3, #32
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d009      	beq.n	8008d8e <HAL_UART_IRQHandler+0x66>
 8008d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d7e:	f003 0320 	and.w	r3, r3, #32
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fc07 	bl	800959a <UART_Receive_IT>
      return;
 8008d8c:	e256      	b.n	800923c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008d8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f000 80de 	beq.w	8008f54 <HAL_UART_IRQHandler+0x22c>
 8008d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d106      	bne.n	8008db2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008da8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f000 80d1 	beq.w	8008f54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00b      	beq.n	8008dd6 <HAL_UART_IRQHandler+0xae>
 8008dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d005      	beq.n	8008dd6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dce:	f043 0201 	orr.w	r2, r3, #1
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dda:	f003 0304 	and.w	r3, r3, #4
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00b      	beq.n	8008dfa <HAL_UART_IRQHandler+0xd2>
 8008de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008de6:	f003 0301 	and.w	r3, r3, #1
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d005      	beq.n	8008dfa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df2:	f043 0202 	orr.w	r2, r3, #2
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dfe:	f003 0302 	and.w	r3, r3, #2
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00b      	beq.n	8008e1e <HAL_UART_IRQHandler+0xf6>
 8008e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e0a:	f003 0301 	and.w	r3, r3, #1
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d005      	beq.n	8008e1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e16:	f043 0204 	orr.w	r2, r3, #4
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e22:	f003 0308 	and.w	r3, r3, #8
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d011      	beq.n	8008e4e <HAL_UART_IRQHandler+0x126>
 8008e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e2e:	f003 0320 	and.w	r3, r3, #32
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d105      	bne.n	8008e42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d005      	beq.n	8008e4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e46:	f043 0208 	orr.w	r2, r3, #8
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f000 81ed 	beq.w	8009232 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e5c:	f003 0320 	and.w	r3, r3, #32
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d008      	beq.n	8008e76 <HAL_UART_IRQHandler+0x14e>
 8008e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e68:	f003 0320 	and.w	r3, r3, #32
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d002      	beq.n	8008e76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fb92 	bl	800959a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e80:	2b40      	cmp	r3, #64	; 0x40
 8008e82:	bf0c      	ite	eq
 8008e84:	2301      	moveq	r3, #1
 8008e86:	2300      	movne	r3, #0
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e92:	f003 0308 	and.w	r3, r3, #8
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d103      	bne.n	8008ea2 <HAL_UART_IRQHandler+0x17a>
 8008e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d04f      	beq.n	8008f42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fa9a 	bl	80093dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	695b      	ldr	r3, [r3, #20]
 8008eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb2:	2b40      	cmp	r3, #64	; 0x40
 8008eb4:	d141      	bne.n	8008f3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3314      	adds	r3, #20
 8008ebc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ec4:	e853 3f00 	ldrex	r3, [r3]
 8008ec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3314      	adds	r3, #20
 8008ede:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008ee2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008eee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008ef2:	e841 2300 	strex	r3, r2, [r1]
 8008ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008efa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1d9      	bne.n	8008eb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d013      	beq.n	8008f32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0e:	4a7d      	ldr	r2, [pc, #500]	; (8009104 <HAL_UART_IRQHandler+0x3dc>)
 8008f10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7fc f86c 	bl	8004ff4 <HAL_DMA_Abort_IT>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d016      	beq.n	8008f50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f30:	e00e      	b.n	8008f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f990 	bl	8009258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f38:	e00a      	b.n	8008f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f98c 	bl	8009258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f40:	e006      	b.n	8008f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f988 	bl	8009258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008f4e:	e170      	b.n	8009232 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f50:	bf00      	nop
    return;
 8008f52:	e16e      	b.n	8009232 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	f040 814a 	bne.w	80091f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f62:	f003 0310 	and.w	r3, r3, #16
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f000 8143 	beq.w	80091f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f70:	f003 0310 	and.w	r3, r3, #16
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f000 813c 	beq.w	80091f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	60bb      	str	r3, [r7, #8]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	60bb      	str	r3, [r7, #8]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	60bb      	str	r3, [r7, #8]
 8008f8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f9a:	2b40      	cmp	r3, #64	; 0x40
 8008f9c:	f040 80b4 	bne.w	8009108 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008fac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f000 8140 	beq.w	8009236 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008fba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	f080 8139 	bcs.w	8009236 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fd6:	f000 8088 	beq.w	80090ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	330c      	adds	r3, #12
 8008fe0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fe8:	e853 3f00 	ldrex	r3, [r3]
 8008fec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	330c      	adds	r3, #12
 8009002:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009006:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800900a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009012:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009016:	e841 2300 	strex	r3, r2, [r1]
 800901a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800901e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1d9      	bne.n	8008fda <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	3314      	adds	r3, #20
 800902c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009030:	e853 3f00 	ldrex	r3, [r3]
 8009034:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009036:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009038:	f023 0301 	bic.w	r3, r3, #1
 800903c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3314      	adds	r3, #20
 8009046:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800904a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800904e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009050:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009052:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009056:	e841 2300 	strex	r3, r2, [r1]
 800905a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800905c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1e1      	bne.n	8009026 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3314      	adds	r3, #20
 8009068:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800906c:	e853 3f00 	ldrex	r3, [r3]
 8009070:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	3314      	adds	r3, #20
 8009082:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009086:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009088:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800908c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e3      	bne.n	8009062 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2220      	movs	r2, #32
 800909e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	330c      	adds	r3, #12
 80090ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090b2:	e853 3f00 	ldrex	r3, [r3]
 80090b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80090b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090ba:	f023 0310 	bic.w	r3, r3, #16
 80090be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	330c      	adds	r3, #12
 80090c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80090cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80090ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80090d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090d4:	e841 2300 	strex	r3, r2, [r1]
 80090d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80090da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1e3      	bne.n	80090a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7fb ff15 	bl	8004f14 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	4619      	mov	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f8b6 	bl	800926c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009100:	e099      	b.n	8009236 <HAL_UART_IRQHandler+0x50e>
 8009102:	bf00      	nop
 8009104:	080094a3 	.word	0x080094a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009110:	b29b      	uxth	r3, r3
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800911c:	b29b      	uxth	r3, r3
 800911e:	2b00      	cmp	r3, #0
 8009120:	f000 808b 	beq.w	800923a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009124:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009128:	2b00      	cmp	r3, #0
 800912a:	f000 8086 	beq.w	800923a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	330c      	adds	r3, #12
 8009134:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009138:	e853 3f00 	ldrex	r3, [r3]
 800913c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800913e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009140:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009144:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	330c      	adds	r3, #12
 800914e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009152:	647a      	str	r2, [r7, #68]	; 0x44
 8009154:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009156:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009158:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800915a:	e841 2300 	strex	r3, r2, [r1]
 800915e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1e3      	bne.n	800912e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3314      	adds	r3, #20
 800916c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009170:	e853 3f00 	ldrex	r3, [r3]
 8009174:	623b      	str	r3, [r7, #32]
   return(result);
 8009176:	6a3b      	ldr	r3, [r7, #32]
 8009178:	f023 0301 	bic.w	r3, r3, #1
 800917c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	3314      	adds	r3, #20
 8009186:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800918a:	633a      	str	r2, [r7, #48]	; 0x30
 800918c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009192:	e841 2300 	strex	r3, r2, [r1]
 8009196:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1e3      	bne.n	8009166 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2220      	movs	r2, #32
 80091a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	330c      	adds	r3, #12
 80091b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	e853 3f00 	ldrex	r3, [r3]
 80091ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f023 0310 	bic.w	r3, r3, #16
 80091c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	330c      	adds	r3, #12
 80091cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80091d0:	61fa      	str	r2, [r7, #28]
 80091d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d4:	69b9      	ldr	r1, [r7, #24]
 80091d6:	69fa      	ldr	r2, [r7, #28]
 80091d8:	e841 2300 	strex	r3, r2, [r1]
 80091dc:	617b      	str	r3, [r7, #20]
   return(result);
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1e3      	bne.n	80091ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091e8:	4619      	mov	r1, r3
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f83e 	bl	800926c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80091f0:	e023      	b.n	800923a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80091f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d009      	beq.n	8009212 <HAL_UART_IRQHandler+0x4ea>
 80091fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009206:	2b00      	cmp	r3, #0
 8009208:	d003      	beq.n	8009212 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f95d 	bl	80094ca <UART_Transmit_IT>
    return;
 8009210:	e014      	b.n	800923c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00e      	beq.n	800923c <HAL_UART_IRQHandler+0x514>
 800921e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009226:	2b00      	cmp	r3, #0
 8009228:	d008      	beq.n	800923c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f99d 	bl	800956a <UART_EndTransmit_IT>
    return;
 8009230:	e004      	b.n	800923c <HAL_UART_IRQHandler+0x514>
    return;
 8009232:	bf00      	nop
 8009234:	e002      	b.n	800923c <HAL_UART_IRQHandler+0x514>
      return;
 8009236:	bf00      	nop
 8009238:	e000      	b.n	800923c <HAL_UART_IRQHandler+0x514>
      return;
 800923a:	bf00      	nop
  }
}
 800923c:	37e8      	adds	r7, #232	; 0xe8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop

08009244 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	460b      	mov	r3, r1
 8009276:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009278:	bf00      	nop
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b090      	sub	sp, #64	; 0x40
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	603b      	str	r3, [r7, #0]
 8009290:	4613      	mov	r3, r2
 8009292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009294:	e050      	b.n	8009338 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800929c:	d04c      	beq.n	8009338 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800929e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d007      	beq.n	80092b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80092a4:	f7fa ffdc 	bl	8004260 <HAL_GetTick>
 80092a8:	4602      	mov	r2, r0
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	1ad3      	subs	r3, r2, r3
 80092ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d241      	bcs.n	8009338 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	330c      	adds	r3, #12
 80092ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092be:	e853 3f00 	ldrex	r3, [r3]
 80092c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80092ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	330c      	adds	r3, #12
 80092d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80092d4:	637a      	str	r2, [r7, #52]	; 0x34
 80092d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092dc:	e841 2300 	strex	r3, r2, [r1]
 80092e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80092e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1e5      	bne.n	80092b4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	3314      	adds	r3, #20
 80092ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	e853 3f00 	ldrex	r3, [r3]
 80092f6:	613b      	str	r3, [r7, #16]
   return(result);
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	f023 0301 	bic.w	r3, r3, #1
 80092fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	3314      	adds	r3, #20
 8009306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009308:	623a      	str	r2, [r7, #32]
 800930a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930c:	69f9      	ldr	r1, [r7, #28]
 800930e:	6a3a      	ldr	r2, [r7, #32]
 8009310:	e841 2300 	strex	r3, r2, [r1]
 8009314:	61bb      	str	r3, [r7, #24]
   return(result);
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1e5      	bne.n	80092e8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2220      	movs	r2, #32
 8009320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2220      	movs	r2, #32
 8009328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009334:	2303      	movs	r3, #3
 8009336:	e00f      	b.n	8009358 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	4013      	ands	r3, r2
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	429a      	cmp	r2, r3
 8009346:	bf0c      	ite	eq
 8009348:	2301      	moveq	r3, #1
 800934a:	2300      	movne	r3, #0
 800934c:	b2db      	uxtb	r3, r3
 800934e:	461a      	mov	r2, r3
 8009350:	79fb      	ldrb	r3, [r7, #7]
 8009352:	429a      	cmp	r2, r3
 8009354:	d09f      	beq.n	8009296 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3740      	adds	r7, #64	; 0x40
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	4613      	mov	r3, r2
 800936c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	88fa      	ldrh	r2, [r7, #6]
 8009378:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	88fa      	ldrh	r2, [r7, #6]
 800937e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2222      	movs	r2, #34	; 0x22
 800938a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d007      	beq.n	80093ae <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68da      	ldr	r2, [r3, #12]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093ac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	695a      	ldr	r2, [r3, #20]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f042 0201 	orr.w	r2, r2, #1
 80093bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68da      	ldr	r2, [r3, #12]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f042 0220 	orr.w	r2, r2, #32
 80093cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093dc:	b480      	push	{r7}
 80093de:	b095      	sub	sp, #84	; 0x54
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	330c      	adds	r3, #12
 80093ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ee:	e853 3f00 	ldrex	r3, [r3]
 80093f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80093f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	330c      	adds	r3, #12
 8009402:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009404:	643a      	str	r2, [r7, #64]	; 0x40
 8009406:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009408:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800940a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800940c:	e841 2300 	strex	r3, r2, [r1]
 8009410:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009414:	2b00      	cmp	r3, #0
 8009416:	d1e5      	bne.n	80093e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	3314      	adds	r3, #20
 800941e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009420:	6a3b      	ldr	r3, [r7, #32]
 8009422:	e853 3f00 	ldrex	r3, [r3]
 8009426:	61fb      	str	r3, [r7, #28]
   return(result);
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	f023 0301 	bic.w	r3, r3, #1
 800942e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	3314      	adds	r3, #20
 8009436:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009438:	62fa      	str	r2, [r7, #44]	; 0x2c
 800943a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800943e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009440:	e841 2300 	strex	r3, r2, [r1]
 8009444:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1e5      	bne.n	8009418 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009450:	2b01      	cmp	r3, #1
 8009452:	d119      	bne.n	8009488 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	330c      	adds	r3, #12
 800945a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	e853 3f00 	ldrex	r3, [r3]
 8009462:	60bb      	str	r3, [r7, #8]
   return(result);
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	f023 0310 	bic.w	r3, r3, #16
 800946a:	647b      	str	r3, [r7, #68]	; 0x44
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	330c      	adds	r3, #12
 8009472:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009474:	61ba      	str	r2, [r7, #24]
 8009476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009478:	6979      	ldr	r1, [r7, #20]
 800947a:	69ba      	ldr	r2, [r7, #24]
 800947c:	e841 2300 	strex	r3, r2, [r1]
 8009480:	613b      	str	r3, [r7, #16]
   return(result);
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d1e5      	bne.n	8009454 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2220      	movs	r2, #32
 800948c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009496:	bf00      	nop
 8009498:	3754      	adds	r7, #84	; 0x54
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b084      	sub	sp, #16
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f7ff fecb 	bl	8009258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094c2:	bf00      	nop
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80094ca:	b480      	push	{r7}
 80094cc:	b085      	sub	sp, #20
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b21      	cmp	r3, #33	; 0x21
 80094dc:	d13e      	bne.n	800955c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094e6:	d114      	bne.n	8009512 <UART_Transmit_IT+0x48>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d110      	bne.n	8009512 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6a1b      	ldr	r3, [r3, #32]
 80094f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	881b      	ldrh	r3, [r3, #0]
 80094fa:	461a      	mov	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009504:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a1b      	ldr	r3, [r3, #32]
 800950a:	1c9a      	adds	r2, r3, #2
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	621a      	str	r2, [r3, #32]
 8009510:	e008      	b.n	8009524 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a1b      	ldr	r3, [r3, #32]
 8009516:	1c59      	adds	r1, r3, #1
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	6211      	str	r1, [r2, #32]
 800951c:	781a      	ldrb	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009528:	b29b      	uxth	r3, r3
 800952a:	3b01      	subs	r3, #1
 800952c:	b29b      	uxth	r3, r3
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	4619      	mov	r1, r3
 8009532:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009534:	2b00      	cmp	r3, #0
 8009536:	d10f      	bne.n	8009558 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68da      	ldr	r2, [r3, #12]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009546:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	68da      	ldr	r2, [r3, #12]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009556:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009558:	2300      	movs	r3, #0
 800955a:	e000      	b.n	800955e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800955c:	2302      	movs	r3, #2
  }
}
 800955e:	4618      	mov	r0, r3
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b082      	sub	sp, #8
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68da      	ldr	r2, [r3, #12]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009580:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2220      	movs	r2, #32
 8009586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7ff fe5a 	bl	8009244 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b08c      	sub	sp, #48	; 0x30
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b22      	cmp	r3, #34	; 0x22
 80095ac:	f040 80ab 	bne.w	8009706 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095b8:	d117      	bne.n	80095ea <UART_Receive_IT+0x50>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d113      	bne.n	80095ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80095c2:	2300      	movs	r3, #0
 80095c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095d8:	b29a      	uxth	r2, r3
 80095da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e2:	1c9a      	adds	r2, r3, #2
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	629a      	str	r2, [r3, #40]	; 0x28
 80095e8:	e026      	b.n	8009638 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80095f0:	2300      	movs	r3, #0
 80095f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095fc:	d007      	beq.n	800960e <UART_Receive_IT+0x74>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d10a      	bne.n	800961c <UART_Receive_IT+0x82>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d106      	bne.n	800961c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	b2da      	uxtb	r2, r3
 8009616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009618:	701a      	strb	r2, [r3, #0]
 800961a:	e008      	b.n	800962e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	b2db      	uxtb	r3, r3
 8009624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009628:	b2da      	uxtb	r2, r3
 800962a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009632:	1c5a      	adds	r2, r3, #1
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800963c:	b29b      	uxth	r3, r3
 800963e:	3b01      	subs	r3, #1
 8009640:	b29b      	uxth	r3, r3
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	4619      	mov	r1, r3
 8009646:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009648:	2b00      	cmp	r3, #0
 800964a:	d15a      	bne.n	8009702 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68da      	ldr	r2, [r3, #12]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f022 0220 	bic.w	r2, r2, #32
 800965a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68da      	ldr	r2, [r3, #12]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800966a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	695a      	ldr	r2, [r3, #20]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f022 0201 	bic.w	r2, r2, #1
 800967a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2220      	movs	r2, #32
 8009680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009688:	2b01      	cmp	r3, #1
 800968a:	d135      	bne.n	80096f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	330c      	adds	r3, #12
 8009698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	e853 3f00 	ldrex	r3, [r3]
 80096a0:	613b      	str	r3, [r7, #16]
   return(result);
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	f023 0310 	bic.w	r3, r3, #16
 80096a8:	627b      	str	r3, [r7, #36]	; 0x24
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	330c      	adds	r3, #12
 80096b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096b2:	623a      	str	r2, [r7, #32]
 80096b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b6:	69f9      	ldr	r1, [r7, #28]
 80096b8:	6a3a      	ldr	r2, [r7, #32]
 80096ba:	e841 2300 	strex	r3, r2, [r1]
 80096be:	61bb      	str	r3, [r7, #24]
   return(result);
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1e5      	bne.n	8009692 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 0310 	and.w	r3, r3, #16
 80096d0:	2b10      	cmp	r3, #16
 80096d2:	d10a      	bne.n	80096ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80096d4:	2300      	movs	r3, #0
 80096d6:	60fb      	str	r3, [r7, #12]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	60fb      	str	r3, [r7, #12]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	60fb      	str	r3, [r7, #12]
 80096e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80096ee:	4619      	mov	r1, r3
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f7ff fdbb 	bl	800926c <HAL_UARTEx_RxEventCallback>
 80096f6:	e002      	b.n	80096fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f7fa fc4b 	bl	8003f94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	e002      	b.n	8009708 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	e000      	b.n	8009708 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009706:	2302      	movs	r3, #2
  }
}
 8009708:	4618      	mov	r0, r3
 800970a:	3730      	adds	r7, #48	; 0x30
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009714:	b0c0      	sub	sp, #256	; 0x100
 8009716:	af00      	add	r7, sp, #0
 8009718:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800971c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800972c:	68d9      	ldr	r1, [r3, #12]
 800972e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	ea40 0301 	orr.w	r3, r0, r1
 8009738:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800973a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800973e:	689a      	ldr	r2, [r3, #8]
 8009740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009744:	691b      	ldr	r3, [r3, #16]
 8009746:	431a      	orrs	r2, r3
 8009748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800974c:	695b      	ldr	r3, [r3, #20]
 800974e:	431a      	orrs	r2, r3
 8009750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009754:	69db      	ldr	r3, [r3, #28]
 8009756:	4313      	orrs	r3, r2
 8009758:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800975c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009768:	f021 010c 	bic.w	r1, r1, #12
 800976c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009776:	430b      	orrs	r3, r1
 8009778:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800977a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800978a:	6999      	ldr	r1, [r3, #24]
 800978c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	ea40 0301 	orr.w	r3, r0, r1
 8009796:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	4b8f      	ldr	r3, [pc, #572]	; (80099dc <UART_SetConfig+0x2cc>)
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d005      	beq.n	80097b0 <UART_SetConfig+0xa0>
 80097a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	4b8d      	ldr	r3, [pc, #564]	; (80099e0 <UART_SetConfig+0x2d0>)
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d104      	bne.n	80097ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80097b0:	f7fd fca6 	bl	8007100 <HAL_RCC_GetPCLK2Freq>
 80097b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80097b8:	e003      	b.n	80097c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80097ba:	f7fd fc8d 	bl	80070d8 <HAL_RCC_GetPCLK1Freq>
 80097be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097c6:	69db      	ldr	r3, [r3, #28]
 80097c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097cc:	f040 810c 	bne.w	80099e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80097d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097d4:	2200      	movs	r2, #0
 80097d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80097da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80097de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80097e2:	4622      	mov	r2, r4
 80097e4:	462b      	mov	r3, r5
 80097e6:	1891      	adds	r1, r2, r2
 80097e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80097ea:	415b      	adcs	r3, r3
 80097ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80097f2:	4621      	mov	r1, r4
 80097f4:	eb12 0801 	adds.w	r8, r2, r1
 80097f8:	4629      	mov	r1, r5
 80097fa:	eb43 0901 	adc.w	r9, r3, r1
 80097fe:	f04f 0200 	mov.w	r2, #0
 8009802:	f04f 0300 	mov.w	r3, #0
 8009806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800980a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800980e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009812:	4690      	mov	r8, r2
 8009814:	4699      	mov	r9, r3
 8009816:	4623      	mov	r3, r4
 8009818:	eb18 0303 	adds.w	r3, r8, r3
 800981c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009820:	462b      	mov	r3, r5
 8009822:	eb49 0303 	adc.w	r3, r9, r3
 8009826:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800982a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009836:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800983a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800983e:	460b      	mov	r3, r1
 8009840:	18db      	adds	r3, r3, r3
 8009842:	653b      	str	r3, [r7, #80]	; 0x50
 8009844:	4613      	mov	r3, r2
 8009846:	eb42 0303 	adc.w	r3, r2, r3
 800984a:	657b      	str	r3, [r7, #84]	; 0x54
 800984c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009850:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009854:	f7f7 f94a 	bl	8000aec <__aeabi_uldivmod>
 8009858:	4602      	mov	r2, r0
 800985a:	460b      	mov	r3, r1
 800985c:	4b61      	ldr	r3, [pc, #388]	; (80099e4 <UART_SetConfig+0x2d4>)
 800985e:	fba3 2302 	umull	r2, r3, r3, r2
 8009862:	095b      	lsrs	r3, r3, #5
 8009864:	011c      	lsls	r4, r3, #4
 8009866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800986a:	2200      	movs	r2, #0
 800986c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009870:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009874:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009878:	4642      	mov	r2, r8
 800987a:	464b      	mov	r3, r9
 800987c:	1891      	adds	r1, r2, r2
 800987e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009880:	415b      	adcs	r3, r3
 8009882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009884:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009888:	4641      	mov	r1, r8
 800988a:	eb12 0a01 	adds.w	sl, r2, r1
 800988e:	4649      	mov	r1, r9
 8009890:	eb43 0b01 	adc.w	fp, r3, r1
 8009894:	f04f 0200 	mov.w	r2, #0
 8009898:	f04f 0300 	mov.w	r3, #0
 800989c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80098a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80098a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80098a8:	4692      	mov	sl, r2
 80098aa:	469b      	mov	fp, r3
 80098ac:	4643      	mov	r3, r8
 80098ae:	eb1a 0303 	adds.w	r3, sl, r3
 80098b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80098b6:	464b      	mov	r3, r9
 80098b8:	eb4b 0303 	adc.w	r3, fp, r3
 80098bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80098c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80098cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80098d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80098d4:	460b      	mov	r3, r1
 80098d6:	18db      	adds	r3, r3, r3
 80098d8:	643b      	str	r3, [r7, #64]	; 0x40
 80098da:	4613      	mov	r3, r2
 80098dc:	eb42 0303 	adc.w	r3, r2, r3
 80098e0:	647b      	str	r3, [r7, #68]	; 0x44
 80098e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80098e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80098ea:	f7f7 f8ff 	bl	8000aec <__aeabi_uldivmod>
 80098ee:	4602      	mov	r2, r0
 80098f0:	460b      	mov	r3, r1
 80098f2:	4611      	mov	r1, r2
 80098f4:	4b3b      	ldr	r3, [pc, #236]	; (80099e4 <UART_SetConfig+0x2d4>)
 80098f6:	fba3 2301 	umull	r2, r3, r3, r1
 80098fa:	095b      	lsrs	r3, r3, #5
 80098fc:	2264      	movs	r2, #100	; 0x64
 80098fe:	fb02 f303 	mul.w	r3, r2, r3
 8009902:	1acb      	subs	r3, r1, r3
 8009904:	00db      	lsls	r3, r3, #3
 8009906:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800990a:	4b36      	ldr	r3, [pc, #216]	; (80099e4 <UART_SetConfig+0x2d4>)
 800990c:	fba3 2302 	umull	r2, r3, r3, r2
 8009910:	095b      	lsrs	r3, r3, #5
 8009912:	005b      	lsls	r3, r3, #1
 8009914:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009918:	441c      	add	r4, r3
 800991a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800991e:	2200      	movs	r2, #0
 8009920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009924:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009928:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800992c:	4642      	mov	r2, r8
 800992e:	464b      	mov	r3, r9
 8009930:	1891      	adds	r1, r2, r2
 8009932:	63b9      	str	r1, [r7, #56]	; 0x38
 8009934:	415b      	adcs	r3, r3
 8009936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009938:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800993c:	4641      	mov	r1, r8
 800993e:	1851      	adds	r1, r2, r1
 8009940:	6339      	str	r1, [r7, #48]	; 0x30
 8009942:	4649      	mov	r1, r9
 8009944:	414b      	adcs	r3, r1
 8009946:	637b      	str	r3, [r7, #52]	; 0x34
 8009948:	f04f 0200 	mov.w	r2, #0
 800994c:	f04f 0300 	mov.w	r3, #0
 8009950:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009954:	4659      	mov	r1, fp
 8009956:	00cb      	lsls	r3, r1, #3
 8009958:	4651      	mov	r1, sl
 800995a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800995e:	4651      	mov	r1, sl
 8009960:	00ca      	lsls	r2, r1, #3
 8009962:	4610      	mov	r0, r2
 8009964:	4619      	mov	r1, r3
 8009966:	4603      	mov	r3, r0
 8009968:	4642      	mov	r2, r8
 800996a:	189b      	adds	r3, r3, r2
 800996c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009970:	464b      	mov	r3, r9
 8009972:	460a      	mov	r2, r1
 8009974:	eb42 0303 	adc.w	r3, r2, r3
 8009978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800997c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009988:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800998c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009990:	460b      	mov	r3, r1
 8009992:	18db      	adds	r3, r3, r3
 8009994:	62bb      	str	r3, [r7, #40]	; 0x28
 8009996:	4613      	mov	r3, r2
 8009998:	eb42 0303 	adc.w	r3, r2, r3
 800999c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800999e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80099a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80099a6:	f7f7 f8a1 	bl	8000aec <__aeabi_uldivmod>
 80099aa:	4602      	mov	r2, r0
 80099ac:	460b      	mov	r3, r1
 80099ae:	4b0d      	ldr	r3, [pc, #52]	; (80099e4 <UART_SetConfig+0x2d4>)
 80099b0:	fba3 1302 	umull	r1, r3, r3, r2
 80099b4:	095b      	lsrs	r3, r3, #5
 80099b6:	2164      	movs	r1, #100	; 0x64
 80099b8:	fb01 f303 	mul.w	r3, r1, r3
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	00db      	lsls	r3, r3, #3
 80099c0:	3332      	adds	r3, #50	; 0x32
 80099c2:	4a08      	ldr	r2, [pc, #32]	; (80099e4 <UART_SetConfig+0x2d4>)
 80099c4:	fba2 2303 	umull	r2, r3, r2, r3
 80099c8:	095b      	lsrs	r3, r3, #5
 80099ca:	f003 0207 	and.w	r2, r3, #7
 80099ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4422      	add	r2, r4
 80099d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80099d8:	e106      	b.n	8009be8 <UART_SetConfig+0x4d8>
 80099da:	bf00      	nop
 80099dc:	40011000 	.word	0x40011000
 80099e0:	40011400 	.word	0x40011400
 80099e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80099e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099ec:	2200      	movs	r2, #0
 80099ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80099f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80099f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80099fa:	4642      	mov	r2, r8
 80099fc:	464b      	mov	r3, r9
 80099fe:	1891      	adds	r1, r2, r2
 8009a00:	6239      	str	r1, [r7, #32]
 8009a02:	415b      	adcs	r3, r3
 8009a04:	627b      	str	r3, [r7, #36]	; 0x24
 8009a06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a0a:	4641      	mov	r1, r8
 8009a0c:	1854      	adds	r4, r2, r1
 8009a0e:	4649      	mov	r1, r9
 8009a10:	eb43 0501 	adc.w	r5, r3, r1
 8009a14:	f04f 0200 	mov.w	r2, #0
 8009a18:	f04f 0300 	mov.w	r3, #0
 8009a1c:	00eb      	lsls	r3, r5, #3
 8009a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a22:	00e2      	lsls	r2, r4, #3
 8009a24:	4614      	mov	r4, r2
 8009a26:	461d      	mov	r5, r3
 8009a28:	4643      	mov	r3, r8
 8009a2a:	18e3      	adds	r3, r4, r3
 8009a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009a30:	464b      	mov	r3, r9
 8009a32:	eb45 0303 	adc.w	r3, r5, r3
 8009a36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009a4a:	f04f 0200 	mov.w	r2, #0
 8009a4e:	f04f 0300 	mov.w	r3, #0
 8009a52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009a56:	4629      	mov	r1, r5
 8009a58:	008b      	lsls	r3, r1, #2
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a60:	4621      	mov	r1, r4
 8009a62:	008a      	lsls	r2, r1, #2
 8009a64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009a68:	f7f7 f840 	bl	8000aec <__aeabi_uldivmod>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	460b      	mov	r3, r1
 8009a70:	4b60      	ldr	r3, [pc, #384]	; (8009bf4 <UART_SetConfig+0x4e4>)
 8009a72:	fba3 2302 	umull	r2, r3, r3, r2
 8009a76:	095b      	lsrs	r3, r3, #5
 8009a78:	011c      	lsls	r4, r3, #4
 8009a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009a84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009a88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009a8c:	4642      	mov	r2, r8
 8009a8e:	464b      	mov	r3, r9
 8009a90:	1891      	adds	r1, r2, r2
 8009a92:	61b9      	str	r1, [r7, #24]
 8009a94:	415b      	adcs	r3, r3
 8009a96:	61fb      	str	r3, [r7, #28]
 8009a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a9c:	4641      	mov	r1, r8
 8009a9e:	1851      	adds	r1, r2, r1
 8009aa0:	6139      	str	r1, [r7, #16]
 8009aa2:	4649      	mov	r1, r9
 8009aa4:	414b      	adcs	r3, r1
 8009aa6:	617b      	str	r3, [r7, #20]
 8009aa8:	f04f 0200 	mov.w	r2, #0
 8009aac:	f04f 0300 	mov.w	r3, #0
 8009ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ab4:	4659      	mov	r1, fp
 8009ab6:	00cb      	lsls	r3, r1, #3
 8009ab8:	4651      	mov	r1, sl
 8009aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009abe:	4651      	mov	r1, sl
 8009ac0:	00ca      	lsls	r2, r1, #3
 8009ac2:	4610      	mov	r0, r2
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	4642      	mov	r2, r8
 8009aca:	189b      	adds	r3, r3, r2
 8009acc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ad0:	464b      	mov	r3, r9
 8009ad2:	460a      	mov	r2, r1
 8009ad4:	eb42 0303 	adc.w	r3, r2, r3
 8009ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ae6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009ae8:	f04f 0200 	mov.w	r2, #0
 8009aec:	f04f 0300 	mov.w	r3, #0
 8009af0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009af4:	4649      	mov	r1, r9
 8009af6:	008b      	lsls	r3, r1, #2
 8009af8:	4641      	mov	r1, r8
 8009afa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009afe:	4641      	mov	r1, r8
 8009b00:	008a      	lsls	r2, r1, #2
 8009b02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009b06:	f7f6 fff1 	bl	8000aec <__aeabi_uldivmod>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	4611      	mov	r1, r2
 8009b10:	4b38      	ldr	r3, [pc, #224]	; (8009bf4 <UART_SetConfig+0x4e4>)
 8009b12:	fba3 2301 	umull	r2, r3, r3, r1
 8009b16:	095b      	lsrs	r3, r3, #5
 8009b18:	2264      	movs	r2, #100	; 0x64
 8009b1a:	fb02 f303 	mul.w	r3, r2, r3
 8009b1e:	1acb      	subs	r3, r1, r3
 8009b20:	011b      	lsls	r3, r3, #4
 8009b22:	3332      	adds	r3, #50	; 0x32
 8009b24:	4a33      	ldr	r2, [pc, #204]	; (8009bf4 <UART_SetConfig+0x4e4>)
 8009b26:	fba2 2303 	umull	r2, r3, r2, r3
 8009b2a:	095b      	lsrs	r3, r3, #5
 8009b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b30:	441c      	add	r4, r3
 8009b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b36:	2200      	movs	r2, #0
 8009b38:	673b      	str	r3, [r7, #112]	; 0x70
 8009b3a:	677a      	str	r2, [r7, #116]	; 0x74
 8009b3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009b40:	4642      	mov	r2, r8
 8009b42:	464b      	mov	r3, r9
 8009b44:	1891      	adds	r1, r2, r2
 8009b46:	60b9      	str	r1, [r7, #8]
 8009b48:	415b      	adcs	r3, r3
 8009b4a:	60fb      	str	r3, [r7, #12]
 8009b4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b50:	4641      	mov	r1, r8
 8009b52:	1851      	adds	r1, r2, r1
 8009b54:	6039      	str	r1, [r7, #0]
 8009b56:	4649      	mov	r1, r9
 8009b58:	414b      	adcs	r3, r1
 8009b5a:	607b      	str	r3, [r7, #4]
 8009b5c:	f04f 0200 	mov.w	r2, #0
 8009b60:	f04f 0300 	mov.w	r3, #0
 8009b64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009b68:	4659      	mov	r1, fp
 8009b6a:	00cb      	lsls	r3, r1, #3
 8009b6c:	4651      	mov	r1, sl
 8009b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b72:	4651      	mov	r1, sl
 8009b74:	00ca      	lsls	r2, r1, #3
 8009b76:	4610      	mov	r0, r2
 8009b78:	4619      	mov	r1, r3
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	4642      	mov	r2, r8
 8009b7e:	189b      	adds	r3, r3, r2
 8009b80:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b82:	464b      	mov	r3, r9
 8009b84:	460a      	mov	r2, r1
 8009b86:	eb42 0303 	adc.w	r3, r2, r3
 8009b8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	663b      	str	r3, [r7, #96]	; 0x60
 8009b96:	667a      	str	r2, [r7, #100]	; 0x64
 8009b98:	f04f 0200 	mov.w	r2, #0
 8009b9c:	f04f 0300 	mov.w	r3, #0
 8009ba0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009ba4:	4649      	mov	r1, r9
 8009ba6:	008b      	lsls	r3, r1, #2
 8009ba8:	4641      	mov	r1, r8
 8009baa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bae:	4641      	mov	r1, r8
 8009bb0:	008a      	lsls	r2, r1, #2
 8009bb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009bb6:	f7f6 ff99 	bl	8000aec <__aeabi_uldivmod>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	4b0d      	ldr	r3, [pc, #52]	; (8009bf4 <UART_SetConfig+0x4e4>)
 8009bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8009bc4:	095b      	lsrs	r3, r3, #5
 8009bc6:	2164      	movs	r1, #100	; 0x64
 8009bc8:	fb01 f303 	mul.w	r3, r1, r3
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	011b      	lsls	r3, r3, #4
 8009bd0:	3332      	adds	r3, #50	; 0x32
 8009bd2:	4a08      	ldr	r2, [pc, #32]	; (8009bf4 <UART_SetConfig+0x4e4>)
 8009bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8009bd8:	095b      	lsrs	r3, r3, #5
 8009bda:	f003 020f 	and.w	r2, r3, #15
 8009bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4422      	add	r2, r4
 8009be6:	609a      	str	r2, [r3, #8]
}
 8009be8:	bf00      	nop
 8009bea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009bf4:	51eb851f 	.word	0x51eb851f

08009bf8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b087      	sub	sp, #28
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c0c:	683a      	ldr	r2, [r7, #0]
 8009c0e:	6812      	ldr	r2, [r2, #0]
 8009c10:	f023 0101 	bic.w	r1, r3, #1
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	2b08      	cmp	r3, #8
 8009c20:	d102      	bne.n	8009c28 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009c22:	2340      	movs	r3, #64	; 0x40
 8009c24:	617b      	str	r3, [r7, #20]
 8009c26:	e001      	b.n	8009c2c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009c38:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009c3e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009c44:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8009c4a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8009c50:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8009c56:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8009c5c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8009c62:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8009c68:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	699b      	ldr	r3, [r3, #24]
 8009c76:	693a      	ldr	r2, [r7, #16]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8009c86:	4b10      	ldr	r3, [pc, #64]	; (8009cc8 <FSMC_NORSRAM_Init+0xd0>)
 8009c88:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c90:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009c98:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	43db      	mvns	r3, r3
 8009ca8:	ea02 0103 	and.w	r1, r2, r3
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	4319      	orrs	r1, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	371c      	adds	r7, #28
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	0008fb7f 	.word	0x0008fb7f

08009ccc <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ce2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	011b      	lsls	r3, r3, #4
 8009cf0:	431a      	orrs	r2, r3
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	021b      	lsls	r3, r3, #8
 8009cf8:	431a      	orrs	r2, r3
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	041b      	lsls	r3, r3, #16
 8009d00:	431a      	orrs	r2, r3
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	3b01      	subs	r3, #1
 8009d08:	051b      	lsls	r3, r3, #20
 8009d0a:	431a      	orrs	r2, r3
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	695b      	ldr	r3, [r3, #20]
 8009d10:	3b02      	subs	r3, #2
 8009d12:	061b      	lsls	r3, r3, #24
 8009d14:	431a      	orrs	r2, r3
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	699b      	ldr	r3, [r3, #24]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	3201      	adds	r2, #1
 8009d20:	4319      	orrs	r1, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3714      	adds	r7, #20
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
	...

08009d38 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b085      	sub	sp, #20
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
 8009d44:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d4c:	d11d      	bne.n	8009d8a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d56:	4b13      	ldr	r3, [pc, #76]	; (8009da4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009d58:	4013      	ands	r3, r2
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	6811      	ldr	r1, [r2, #0]
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	6852      	ldr	r2, [r2, #4]
 8009d62:	0112      	lsls	r2, r2, #4
 8009d64:	4311      	orrs	r1, r2
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	6892      	ldr	r2, [r2, #8]
 8009d6a:	0212      	lsls	r2, r2, #8
 8009d6c:	4311      	orrs	r1, r2
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	6992      	ldr	r2, [r2, #24]
 8009d72:	4311      	orrs	r1, r2
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	68d2      	ldr	r2, [r2, #12]
 8009d78:	0412      	lsls	r2, r2, #16
 8009d7a:	430a      	orrs	r2, r1
 8009d7c:	ea43 0102 	orr.w	r1, r3, r2
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009d88:	e005      	b.n	8009d96 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3714      	adds	r7, #20
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr
 8009da4:	cff00000 	.word	0xcff00000

08009da8 <siprintf>:
 8009da8:	b40e      	push	{r1, r2, r3}
 8009daa:	b500      	push	{lr}
 8009dac:	b09c      	sub	sp, #112	; 0x70
 8009dae:	ab1d      	add	r3, sp, #116	; 0x74
 8009db0:	9002      	str	r0, [sp, #8]
 8009db2:	9006      	str	r0, [sp, #24]
 8009db4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009db8:	4809      	ldr	r0, [pc, #36]	; (8009de0 <siprintf+0x38>)
 8009dba:	9107      	str	r1, [sp, #28]
 8009dbc:	9104      	str	r1, [sp, #16]
 8009dbe:	4909      	ldr	r1, [pc, #36]	; (8009de4 <siprintf+0x3c>)
 8009dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dc4:	9105      	str	r1, [sp, #20]
 8009dc6:	6800      	ldr	r0, [r0, #0]
 8009dc8:	9301      	str	r3, [sp, #4]
 8009dca:	a902      	add	r1, sp, #8
 8009dcc:	f000 f992 	bl	800a0f4 <_svfiprintf_r>
 8009dd0:	9b02      	ldr	r3, [sp, #8]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	701a      	strb	r2, [r3, #0]
 8009dd6:	b01c      	add	sp, #112	; 0x70
 8009dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ddc:	b003      	add	sp, #12
 8009dde:	4770      	bx	lr
 8009de0:	2000006c 	.word	0x2000006c
 8009de4:	ffff0208 	.word	0xffff0208

08009de8 <memset>:
 8009de8:	4402      	add	r2, r0
 8009dea:	4603      	mov	r3, r0
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d100      	bne.n	8009df2 <memset+0xa>
 8009df0:	4770      	bx	lr
 8009df2:	f803 1b01 	strb.w	r1, [r3], #1
 8009df6:	e7f9      	b.n	8009dec <memset+0x4>

08009df8 <__errno>:
 8009df8:	4b01      	ldr	r3, [pc, #4]	; (8009e00 <__errno+0x8>)
 8009dfa:	6818      	ldr	r0, [r3, #0]
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	2000006c 	.word	0x2000006c

08009e04 <__libc_init_array>:
 8009e04:	b570      	push	{r4, r5, r6, lr}
 8009e06:	4d0d      	ldr	r5, [pc, #52]	; (8009e3c <__libc_init_array+0x38>)
 8009e08:	4c0d      	ldr	r4, [pc, #52]	; (8009e40 <__libc_init_array+0x3c>)
 8009e0a:	1b64      	subs	r4, r4, r5
 8009e0c:	10a4      	asrs	r4, r4, #2
 8009e0e:	2600      	movs	r6, #0
 8009e10:	42a6      	cmp	r6, r4
 8009e12:	d109      	bne.n	8009e28 <__libc_init_array+0x24>
 8009e14:	4d0b      	ldr	r5, [pc, #44]	; (8009e44 <__libc_init_array+0x40>)
 8009e16:	4c0c      	ldr	r4, [pc, #48]	; (8009e48 <__libc_init_array+0x44>)
 8009e18:	f000 fc6a 	bl	800a6f0 <_init>
 8009e1c:	1b64      	subs	r4, r4, r5
 8009e1e:	10a4      	asrs	r4, r4, #2
 8009e20:	2600      	movs	r6, #0
 8009e22:	42a6      	cmp	r6, r4
 8009e24:	d105      	bne.n	8009e32 <__libc_init_array+0x2e>
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e2c:	4798      	blx	r3
 8009e2e:	3601      	adds	r6, #1
 8009e30:	e7ee      	b.n	8009e10 <__libc_init_array+0xc>
 8009e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e36:	4798      	blx	r3
 8009e38:	3601      	adds	r6, #1
 8009e3a:	e7f2      	b.n	8009e22 <__libc_init_array+0x1e>
 8009e3c:	0800d7f0 	.word	0x0800d7f0
 8009e40:	0800d7f0 	.word	0x0800d7f0
 8009e44:	0800d7f0 	.word	0x0800d7f0
 8009e48:	0800d7f4 	.word	0x0800d7f4

08009e4c <__retarget_lock_acquire_recursive>:
 8009e4c:	4770      	bx	lr

08009e4e <__retarget_lock_release_recursive>:
 8009e4e:	4770      	bx	lr

08009e50 <_free_r>:
 8009e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e52:	2900      	cmp	r1, #0
 8009e54:	d044      	beq.n	8009ee0 <_free_r+0x90>
 8009e56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e5a:	9001      	str	r0, [sp, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f1a1 0404 	sub.w	r4, r1, #4
 8009e62:	bfb8      	it	lt
 8009e64:	18e4      	addlt	r4, r4, r3
 8009e66:	f000 f8df 	bl	800a028 <__malloc_lock>
 8009e6a:	4a1e      	ldr	r2, [pc, #120]	; (8009ee4 <_free_r+0x94>)
 8009e6c:	9801      	ldr	r0, [sp, #4]
 8009e6e:	6813      	ldr	r3, [r2, #0]
 8009e70:	b933      	cbnz	r3, 8009e80 <_free_r+0x30>
 8009e72:	6063      	str	r3, [r4, #4]
 8009e74:	6014      	str	r4, [r2, #0]
 8009e76:	b003      	add	sp, #12
 8009e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e7c:	f000 b8da 	b.w	800a034 <__malloc_unlock>
 8009e80:	42a3      	cmp	r3, r4
 8009e82:	d908      	bls.n	8009e96 <_free_r+0x46>
 8009e84:	6825      	ldr	r5, [r4, #0]
 8009e86:	1961      	adds	r1, r4, r5
 8009e88:	428b      	cmp	r3, r1
 8009e8a:	bf01      	itttt	eq
 8009e8c:	6819      	ldreq	r1, [r3, #0]
 8009e8e:	685b      	ldreq	r3, [r3, #4]
 8009e90:	1949      	addeq	r1, r1, r5
 8009e92:	6021      	streq	r1, [r4, #0]
 8009e94:	e7ed      	b.n	8009e72 <_free_r+0x22>
 8009e96:	461a      	mov	r2, r3
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	b10b      	cbz	r3, 8009ea0 <_free_r+0x50>
 8009e9c:	42a3      	cmp	r3, r4
 8009e9e:	d9fa      	bls.n	8009e96 <_free_r+0x46>
 8009ea0:	6811      	ldr	r1, [r2, #0]
 8009ea2:	1855      	adds	r5, r2, r1
 8009ea4:	42a5      	cmp	r5, r4
 8009ea6:	d10b      	bne.n	8009ec0 <_free_r+0x70>
 8009ea8:	6824      	ldr	r4, [r4, #0]
 8009eaa:	4421      	add	r1, r4
 8009eac:	1854      	adds	r4, r2, r1
 8009eae:	42a3      	cmp	r3, r4
 8009eb0:	6011      	str	r1, [r2, #0]
 8009eb2:	d1e0      	bne.n	8009e76 <_free_r+0x26>
 8009eb4:	681c      	ldr	r4, [r3, #0]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	6053      	str	r3, [r2, #4]
 8009eba:	440c      	add	r4, r1
 8009ebc:	6014      	str	r4, [r2, #0]
 8009ebe:	e7da      	b.n	8009e76 <_free_r+0x26>
 8009ec0:	d902      	bls.n	8009ec8 <_free_r+0x78>
 8009ec2:	230c      	movs	r3, #12
 8009ec4:	6003      	str	r3, [r0, #0]
 8009ec6:	e7d6      	b.n	8009e76 <_free_r+0x26>
 8009ec8:	6825      	ldr	r5, [r4, #0]
 8009eca:	1961      	adds	r1, r4, r5
 8009ecc:	428b      	cmp	r3, r1
 8009ece:	bf04      	itt	eq
 8009ed0:	6819      	ldreq	r1, [r3, #0]
 8009ed2:	685b      	ldreq	r3, [r3, #4]
 8009ed4:	6063      	str	r3, [r4, #4]
 8009ed6:	bf04      	itt	eq
 8009ed8:	1949      	addeq	r1, r1, r5
 8009eda:	6021      	streq	r1, [r4, #0]
 8009edc:	6054      	str	r4, [r2, #4]
 8009ede:	e7ca      	b.n	8009e76 <_free_r+0x26>
 8009ee0:	b003      	add	sp, #12
 8009ee2:	bd30      	pop	{r4, r5, pc}
 8009ee4:	2000054c 	.word	0x2000054c

08009ee8 <sbrk_aligned>:
 8009ee8:	b570      	push	{r4, r5, r6, lr}
 8009eea:	4e0e      	ldr	r6, [pc, #56]	; (8009f24 <sbrk_aligned+0x3c>)
 8009eec:	460c      	mov	r4, r1
 8009eee:	6831      	ldr	r1, [r6, #0]
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	b911      	cbnz	r1, 8009efa <sbrk_aligned+0x12>
 8009ef4:	f000 fba6 	bl	800a644 <_sbrk_r>
 8009ef8:	6030      	str	r0, [r6, #0]
 8009efa:	4621      	mov	r1, r4
 8009efc:	4628      	mov	r0, r5
 8009efe:	f000 fba1 	bl	800a644 <_sbrk_r>
 8009f02:	1c43      	adds	r3, r0, #1
 8009f04:	d00a      	beq.n	8009f1c <sbrk_aligned+0x34>
 8009f06:	1cc4      	adds	r4, r0, #3
 8009f08:	f024 0403 	bic.w	r4, r4, #3
 8009f0c:	42a0      	cmp	r0, r4
 8009f0e:	d007      	beq.n	8009f20 <sbrk_aligned+0x38>
 8009f10:	1a21      	subs	r1, r4, r0
 8009f12:	4628      	mov	r0, r5
 8009f14:	f000 fb96 	bl	800a644 <_sbrk_r>
 8009f18:	3001      	adds	r0, #1
 8009f1a:	d101      	bne.n	8009f20 <sbrk_aligned+0x38>
 8009f1c:	f04f 34ff 	mov.w	r4, #4294967295
 8009f20:	4620      	mov	r0, r4
 8009f22:	bd70      	pop	{r4, r5, r6, pc}
 8009f24:	20000550 	.word	0x20000550

08009f28 <_malloc_r>:
 8009f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f2c:	1ccd      	adds	r5, r1, #3
 8009f2e:	f025 0503 	bic.w	r5, r5, #3
 8009f32:	3508      	adds	r5, #8
 8009f34:	2d0c      	cmp	r5, #12
 8009f36:	bf38      	it	cc
 8009f38:	250c      	movcc	r5, #12
 8009f3a:	2d00      	cmp	r5, #0
 8009f3c:	4607      	mov	r7, r0
 8009f3e:	db01      	blt.n	8009f44 <_malloc_r+0x1c>
 8009f40:	42a9      	cmp	r1, r5
 8009f42:	d905      	bls.n	8009f50 <_malloc_r+0x28>
 8009f44:	230c      	movs	r3, #12
 8009f46:	603b      	str	r3, [r7, #0]
 8009f48:	2600      	movs	r6, #0
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a024 <_malloc_r+0xfc>
 8009f54:	f000 f868 	bl	800a028 <__malloc_lock>
 8009f58:	f8d8 3000 	ldr.w	r3, [r8]
 8009f5c:	461c      	mov	r4, r3
 8009f5e:	bb5c      	cbnz	r4, 8009fb8 <_malloc_r+0x90>
 8009f60:	4629      	mov	r1, r5
 8009f62:	4638      	mov	r0, r7
 8009f64:	f7ff ffc0 	bl	8009ee8 <sbrk_aligned>
 8009f68:	1c43      	adds	r3, r0, #1
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	d155      	bne.n	800a01a <_malloc_r+0xf2>
 8009f6e:	f8d8 4000 	ldr.w	r4, [r8]
 8009f72:	4626      	mov	r6, r4
 8009f74:	2e00      	cmp	r6, #0
 8009f76:	d145      	bne.n	800a004 <_malloc_r+0xdc>
 8009f78:	2c00      	cmp	r4, #0
 8009f7a:	d048      	beq.n	800a00e <_malloc_r+0xe6>
 8009f7c:	6823      	ldr	r3, [r4, #0]
 8009f7e:	4631      	mov	r1, r6
 8009f80:	4638      	mov	r0, r7
 8009f82:	eb04 0903 	add.w	r9, r4, r3
 8009f86:	f000 fb5d 	bl	800a644 <_sbrk_r>
 8009f8a:	4581      	cmp	r9, r0
 8009f8c:	d13f      	bne.n	800a00e <_malloc_r+0xe6>
 8009f8e:	6821      	ldr	r1, [r4, #0]
 8009f90:	1a6d      	subs	r5, r5, r1
 8009f92:	4629      	mov	r1, r5
 8009f94:	4638      	mov	r0, r7
 8009f96:	f7ff ffa7 	bl	8009ee8 <sbrk_aligned>
 8009f9a:	3001      	adds	r0, #1
 8009f9c:	d037      	beq.n	800a00e <_malloc_r+0xe6>
 8009f9e:	6823      	ldr	r3, [r4, #0]
 8009fa0:	442b      	add	r3, r5
 8009fa2:	6023      	str	r3, [r4, #0]
 8009fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d038      	beq.n	800a01e <_malloc_r+0xf6>
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	42a2      	cmp	r2, r4
 8009fb0:	d12b      	bne.n	800a00a <_malloc_r+0xe2>
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	605a      	str	r2, [r3, #4]
 8009fb6:	e00f      	b.n	8009fd8 <_malloc_r+0xb0>
 8009fb8:	6822      	ldr	r2, [r4, #0]
 8009fba:	1b52      	subs	r2, r2, r5
 8009fbc:	d41f      	bmi.n	8009ffe <_malloc_r+0xd6>
 8009fbe:	2a0b      	cmp	r2, #11
 8009fc0:	d917      	bls.n	8009ff2 <_malloc_r+0xca>
 8009fc2:	1961      	adds	r1, r4, r5
 8009fc4:	42a3      	cmp	r3, r4
 8009fc6:	6025      	str	r5, [r4, #0]
 8009fc8:	bf18      	it	ne
 8009fca:	6059      	strne	r1, [r3, #4]
 8009fcc:	6863      	ldr	r3, [r4, #4]
 8009fce:	bf08      	it	eq
 8009fd0:	f8c8 1000 	streq.w	r1, [r8]
 8009fd4:	5162      	str	r2, [r4, r5]
 8009fd6:	604b      	str	r3, [r1, #4]
 8009fd8:	4638      	mov	r0, r7
 8009fda:	f104 060b 	add.w	r6, r4, #11
 8009fde:	f000 f829 	bl	800a034 <__malloc_unlock>
 8009fe2:	f026 0607 	bic.w	r6, r6, #7
 8009fe6:	1d23      	adds	r3, r4, #4
 8009fe8:	1af2      	subs	r2, r6, r3
 8009fea:	d0ae      	beq.n	8009f4a <_malloc_r+0x22>
 8009fec:	1b9b      	subs	r3, r3, r6
 8009fee:	50a3      	str	r3, [r4, r2]
 8009ff0:	e7ab      	b.n	8009f4a <_malloc_r+0x22>
 8009ff2:	42a3      	cmp	r3, r4
 8009ff4:	6862      	ldr	r2, [r4, #4]
 8009ff6:	d1dd      	bne.n	8009fb4 <_malloc_r+0x8c>
 8009ff8:	f8c8 2000 	str.w	r2, [r8]
 8009ffc:	e7ec      	b.n	8009fd8 <_malloc_r+0xb0>
 8009ffe:	4623      	mov	r3, r4
 800a000:	6864      	ldr	r4, [r4, #4]
 800a002:	e7ac      	b.n	8009f5e <_malloc_r+0x36>
 800a004:	4634      	mov	r4, r6
 800a006:	6876      	ldr	r6, [r6, #4]
 800a008:	e7b4      	b.n	8009f74 <_malloc_r+0x4c>
 800a00a:	4613      	mov	r3, r2
 800a00c:	e7cc      	b.n	8009fa8 <_malloc_r+0x80>
 800a00e:	230c      	movs	r3, #12
 800a010:	603b      	str	r3, [r7, #0]
 800a012:	4638      	mov	r0, r7
 800a014:	f000 f80e 	bl	800a034 <__malloc_unlock>
 800a018:	e797      	b.n	8009f4a <_malloc_r+0x22>
 800a01a:	6025      	str	r5, [r4, #0]
 800a01c:	e7dc      	b.n	8009fd8 <_malloc_r+0xb0>
 800a01e:	605b      	str	r3, [r3, #4]
 800a020:	deff      	udf	#255	; 0xff
 800a022:	bf00      	nop
 800a024:	2000054c 	.word	0x2000054c

0800a028 <__malloc_lock>:
 800a028:	4801      	ldr	r0, [pc, #4]	; (800a030 <__malloc_lock+0x8>)
 800a02a:	f7ff bf0f 	b.w	8009e4c <__retarget_lock_acquire_recursive>
 800a02e:	bf00      	nop
 800a030:	20000548 	.word	0x20000548

0800a034 <__malloc_unlock>:
 800a034:	4801      	ldr	r0, [pc, #4]	; (800a03c <__malloc_unlock+0x8>)
 800a036:	f7ff bf0a 	b.w	8009e4e <__retarget_lock_release_recursive>
 800a03a:	bf00      	nop
 800a03c:	20000548 	.word	0x20000548

0800a040 <__ssputs_r>:
 800a040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a044:	688e      	ldr	r6, [r1, #8]
 800a046:	461f      	mov	r7, r3
 800a048:	42be      	cmp	r6, r7
 800a04a:	680b      	ldr	r3, [r1, #0]
 800a04c:	4682      	mov	sl, r0
 800a04e:	460c      	mov	r4, r1
 800a050:	4690      	mov	r8, r2
 800a052:	d82c      	bhi.n	800a0ae <__ssputs_r+0x6e>
 800a054:	898a      	ldrh	r2, [r1, #12]
 800a056:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a05a:	d026      	beq.n	800a0aa <__ssputs_r+0x6a>
 800a05c:	6965      	ldr	r5, [r4, #20]
 800a05e:	6909      	ldr	r1, [r1, #16]
 800a060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a064:	eba3 0901 	sub.w	r9, r3, r1
 800a068:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a06c:	1c7b      	adds	r3, r7, #1
 800a06e:	444b      	add	r3, r9
 800a070:	106d      	asrs	r5, r5, #1
 800a072:	429d      	cmp	r5, r3
 800a074:	bf38      	it	cc
 800a076:	461d      	movcc	r5, r3
 800a078:	0553      	lsls	r3, r2, #21
 800a07a:	d527      	bpl.n	800a0cc <__ssputs_r+0x8c>
 800a07c:	4629      	mov	r1, r5
 800a07e:	f7ff ff53 	bl	8009f28 <_malloc_r>
 800a082:	4606      	mov	r6, r0
 800a084:	b360      	cbz	r0, 800a0e0 <__ssputs_r+0xa0>
 800a086:	6921      	ldr	r1, [r4, #16]
 800a088:	464a      	mov	r2, r9
 800a08a:	f000 faeb 	bl	800a664 <memcpy>
 800a08e:	89a3      	ldrh	r3, [r4, #12]
 800a090:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a098:	81a3      	strh	r3, [r4, #12]
 800a09a:	6126      	str	r6, [r4, #16]
 800a09c:	6165      	str	r5, [r4, #20]
 800a09e:	444e      	add	r6, r9
 800a0a0:	eba5 0509 	sub.w	r5, r5, r9
 800a0a4:	6026      	str	r6, [r4, #0]
 800a0a6:	60a5      	str	r5, [r4, #8]
 800a0a8:	463e      	mov	r6, r7
 800a0aa:	42be      	cmp	r6, r7
 800a0ac:	d900      	bls.n	800a0b0 <__ssputs_r+0x70>
 800a0ae:	463e      	mov	r6, r7
 800a0b0:	6820      	ldr	r0, [r4, #0]
 800a0b2:	4632      	mov	r2, r6
 800a0b4:	4641      	mov	r1, r8
 800a0b6:	f000 faab 	bl	800a610 <memmove>
 800a0ba:	68a3      	ldr	r3, [r4, #8]
 800a0bc:	1b9b      	subs	r3, r3, r6
 800a0be:	60a3      	str	r3, [r4, #8]
 800a0c0:	6823      	ldr	r3, [r4, #0]
 800a0c2:	4433      	add	r3, r6
 800a0c4:	6023      	str	r3, [r4, #0]
 800a0c6:	2000      	movs	r0, #0
 800a0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0cc:	462a      	mov	r2, r5
 800a0ce:	f000 fad7 	bl	800a680 <_realloc_r>
 800a0d2:	4606      	mov	r6, r0
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d1e0      	bne.n	800a09a <__ssputs_r+0x5a>
 800a0d8:	6921      	ldr	r1, [r4, #16]
 800a0da:	4650      	mov	r0, sl
 800a0dc:	f7ff feb8 	bl	8009e50 <_free_r>
 800a0e0:	230c      	movs	r3, #12
 800a0e2:	f8ca 3000 	str.w	r3, [sl]
 800a0e6:	89a3      	ldrh	r3, [r4, #12]
 800a0e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ec:	81a3      	strh	r3, [r4, #12]
 800a0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f2:	e7e9      	b.n	800a0c8 <__ssputs_r+0x88>

0800a0f4 <_svfiprintf_r>:
 800a0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f8:	4698      	mov	r8, r3
 800a0fa:	898b      	ldrh	r3, [r1, #12]
 800a0fc:	061b      	lsls	r3, r3, #24
 800a0fe:	b09d      	sub	sp, #116	; 0x74
 800a100:	4607      	mov	r7, r0
 800a102:	460d      	mov	r5, r1
 800a104:	4614      	mov	r4, r2
 800a106:	d50e      	bpl.n	800a126 <_svfiprintf_r+0x32>
 800a108:	690b      	ldr	r3, [r1, #16]
 800a10a:	b963      	cbnz	r3, 800a126 <_svfiprintf_r+0x32>
 800a10c:	2140      	movs	r1, #64	; 0x40
 800a10e:	f7ff ff0b 	bl	8009f28 <_malloc_r>
 800a112:	6028      	str	r0, [r5, #0]
 800a114:	6128      	str	r0, [r5, #16]
 800a116:	b920      	cbnz	r0, 800a122 <_svfiprintf_r+0x2e>
 800a118:	230c      	movs	r3, #12
 800a11a:	603b      	str	r3, [r7, #0]
 800a11c:	f04f 30ff 	mov.w	r0, #4294967295
 800a120:	e0d0      	b.n	800a2c4 <_svfiprintf_r+0x1d0>
 800a122:	2340      	movs	r3, #64	; 0x40
 800a124:	616b      	str	r3, [r5, #20]
 800a126:	2300      	movs	r3, #0
 800a128:	9309      	str	r3, [sp, #36]	; 0x24
 800a12a:	2320      	movs	r3, #32
 800a12c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a130:	f8cd 800c 	str.w	r8, [sp, #12]
 800a134:	2330      	movs	r3, #48	; 0x30
 800a136:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a2dc <_svfiprintf_r+0x1e8>
 800a13a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a13e:	f04f 0901 	mov.w	r9, #1
 800a142:	4623      	mov	r3, r4
 800a144:	469a      	mov	sl, r3
 800a146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a14a:	b10a      	cbz	r2, 800a150 <_svfiprintf_r+0x5c>
 800a14c:	2a25      	cmp	r2, #37	; 0x25
 800a14e:	d1f9      	bne.n	800a144 <_svfiprintf_r+0x50>
 800a150:	ebba 0b04 	subs.w	fp, sl, r4
 800a154:	d00b      	beq.n	800a16e <_svfiprintf_r+0x7a>
 800a156:	465b      	mov	r3, fp
 800a158:	4622      	mov	r2, r4
 800a15a:	4629      	mov	r1, r5
 800a15c:	4638      	mov	r0, r7
 800a15e:	f7ff ff6f 	bl	800a040 <__ssputs_r>
 800a162:	3001      	adds	r0, #1
 800a164:	f000 80a9 	beq.w	800a2ba <_svfiprintf_r+0x1c6>
 800a168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a16a:	445a      	add	r2, fp
 800a16c:	9209      	str	r2, [sp, #36]	; 0x24
 800a16e:	f89a 3000 	ldrb.w	r3, [sl]
 800a172:	2b00      	cmp	r3, #0
 800a174:	f000 80a1 	beq.w	800a2ba <_svfiprintf_r+0x1c6>
 800a178:	2300      	movs	r3, #0
 800a17a:	f04f 32ff 	mov.w	r2, #4294967295
 800a17e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a182:	f10a 0a01 	add.w	sl, sl, #1
 800a186:	9304      	str	r3, [sp, #16]
 800a188:	9307      	str	r3, [sp, #28]
 800a18a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a18e:	931a      	str	r3, [sp, #104]	; 0x68
 800a190:	4654      	mov	r4, sl
 800a192:	2205      	movs	r2, #5
 800a194:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a198:	4850      	ldr	r0, [pc, #320]	; (800a2dc <_svfiprintf_r+0x1e8>)
 800a19a:	f7f6 f819 	bl	80001d0 <memchr>
 800a19e:	9a04      	ldr	r2, [sp, #16]
 800a1a0:	b9d8      	cbnz	r0, 800a1da <_svfiprintf_r+0xe6>
 800a1a2:	06d0      	lsls	r0, r2, #27
 800a1a4:	bf44      	itt	mi
 800a1a6:	2320      	movmi	r3, #32
 800a1a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1ac:	0711      	lsls	r1, r2, #28
 800a1ae:	bf44      	itt	mi
 800a1b0:	232b      	movmi	r3, #43	; 0x2b
 800a1b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a1ba:	2b2a      	cmp	r3, #42	; 0x2a
 800a1bc:	d015      	beq.n	800a1ea <_svfiprintf_r+0xf6>
 800a1be:	9a07      	ldr	r2, [sp, #28]
 800a1c0:	4654      	mov	r4, sl
 800a1c2:	2000      	movs	r0, #0
 800a1c4:	f04f 0c0a 	mov.w	ip, #10
 800a1c8:	4621      	mov	r1, r4
 800a1ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1ce:	3b30      	subs	r3, #48	; 0x30
 800a1d0:	2b09      	cmp	r3, #9
 800a1d2:	d94d      	bls.n	800a270 <_svfiprintf_r+0x17c>
 800a1d4:	b1b0      	cbz	r0, 800a204 <_svfiprintf_r+0x110>
 800a1d6:	9207      	str	r2, [sp, #28]
 800a1d8:	e014      	b.n	800a204 <_svfiprintf_r+0x110>
 800a1da:	eba0 0308 	sub.w	r3, r0, r8
 800a1de:	fa09 f303 	lsl.w	r3, r9, r3
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	9304      	str	r3, [sp, #16]
 800a1e6:	46a2      	mov	sl, r4
 800a1e8:	e7d2      	b.n	800a190 <_svfiprintf_r+0x9c>
 800a1ea:	9b03      	ldr	r3, [sp, #12]
 800a1ec:	1d19      	adds	r1, r3, #4
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	9103      	str	r1, [sp, #12]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	bfbb      	ittet	lt
 800a1f6:	425b      	neglt	r3, r3
 800a1f8:	f042 0202 	orrlt.w	r2, r2, #2
 800a1fc:	9307      	strge	r3, [sp, #28]
 800a1fe:	9307      	strlt	r3, [sp, #28]
 800a200:	bfb8      	it	lt
 800a202:	9204      	strlt	r2, [sp, #16]
 800a204:	7823      	ldrb	r3, [r4, #0]
 800a206:	2b2e      	cmp	r3, #46	; 0x2e
 800a208:	d10c      	bne.n	800a224 <_svfiprintf_r+0x130>
 800a20a:	7863      	ldrb	r3, [r4, #1]
 800a20c:	2b2a      	cmp	r3, #42	; 0x2a
 800a20e:	d134      	bne.n	800a27a <_svfiprintf_r+0x186>
 800a210:	9b03      	ldr	r3, [sp, #12]
 800a212:	1d1a      	adds	r2, r3, #4
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	9203      	str	r2, [sp, #12]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	bfb8      	it	lt
 800a21c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a220:	3402      	adds	r4, #2
 800a222:	9305      	str	r3, [sp, #20]
 800a224:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a2ec <_svfiprintf_r+0x1f8>
 800a228:	7821      	ldrb	r1, [r4, #0]
 800a22a:	2203      	movs	r2, #3
 800a22c:	4650      	mov	r0, sl
 800a22e:	f7f5 ffcf 	bl	80001d0 <memchr>
 800a232:	b138      	cbz	r0, 800a244 <_svfiprintf_r+0x150>
 800a234:	9b04      	ldr	r3, [sp, #16]
 800a236:	eba0 000a 	sub.w	r0, r0, sl
 800a23a:	2240      	movs	r2, #64	; 0x40
 800a23c:	4082      	lsls	r2, r0
 800a23e:	4313      	orrs	r3, r2
 800a240:	3401      	adds	r4, #1
 800a242:	9304      	str	r3, [sp, #16]
 800a244:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a248:	4825      	ldr	r0, [pc, #148]	; (800a2e0 <_svfiprintf_r+0x1ec>)
 800a24a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a24e:	2206      	movs	r2, #6
 800a250:	f7f5 ffbe 	bl	80001d0 <memchr>
 800a254:	2800      	cmp	r0, #0
 800a256:	d038      	beq.n	800a2ca <_svfiprintf_r+0x1d6>
 800a258:	4b22      	ldr	r3, [pc, #136]	; (800a2e4 <_svfiprintf_r+0x1f0>)
 800a25a:	bb1b      	cbnz	r3, 800a2a4 <_svfiprintf_r+0x1b0>
 800a25c:	9b03      	ldr	r3, [sp, #12]
 800a25e:	3307      	adds	r3, #7
 800a260:	f023 0307 	bic.w	r3, r3, #7
 800a264:	3308      	adds	r3, #8
 800a266:	9303      	str	r3, [sp, #12]
 800a268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a26a:	4433      	add	r3, r6
 800a26c:	9309      	str	r3, [sp, #36]	; 0x24
 800a26e:	e768      	b.n	800a142 <_svfiprintf_r+0x4e>
 800a270:	fb0c 3202 	mla	r2, ip, r2, r3
 800a274:	460c      	mov	r4, r1
 800a276:	2001      	movs	r0, #1
 800a278:	e7a6      	b.n	800a1c8 <_svfiprintf_r+0xd4>
 800a27a:	2300      	movs	r3, #0
 800a27c:	3401      	adds	r4, #1
 800a27e:	9305      	str	r3, [sp, #20]
 800a280:	4619      	mov	r1, r3
 800a282:	f04f 0c0a 	mov.w	ip, #10
 800a286:	4620      	mov	r0, r4
 800a288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a28c:	3a30      	subs	r2, #48	; 0x30
 800a28e:	2a09      	cmp	r2, #9
 800a290:	d903      	bls.n	800a29a <_svfiprintf_r+0x1a6>
 800a292:	2b00      	cmp	r3, #0
 800a294:	d0c6      	beq.n	800a224 <_svfiprintf_r+0x130>
 800a296:	9105      	str	r1, [sp, #20]
 800a298:	e7c4      	b.n	800a224 <_svfiprintf_r+0x130>
 800a29a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a29e:	4604      	mov	r4, r0
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e7f0      	b.n	800a286 <_svfiprintf_r+0x192>
 800a2a4:	ab03      	add	r3, sp, #12
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	462a      	mov	r2, r5
 800a2aa:	4b0f      	ldr	r3, [pc, #60]	; (800a2e8 <_svfiprintf_r+0x1f4>)
 800a2ac:	a904      	add	r1, sp, #16
 800a2ae:	4638      	mov	r0, r7
 800a2b0:	f3af 8000 	nop.w
 800a2b4:	1c42      	adds	r2, r0, #1
 800a2b6:	4606      	mov	r6, r0
 800a2b8:	d1d6      	bne.n	800a268 <_svfiprintf_r+0x174>
 800a2ba:	89ab      	ldrh	r3, [r5, #12]
 800a2bc:	065b      	lsls	r3, r3, #25
 800a2be:	f53f af2d 	bmi.w	800a11c <_svfiprintf_r+0x28>
 800a2c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2c4:	b01d      	add	sp, #116	; 0x74
 800a2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ca:	ab03      	add	r3, sp, #12
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	462a      	mov	r2, r5
 800a2d0:	4b05      	ldr	r3, [pc, #20]	; (800a2e8 <_svfiprintf_r+0x1f4>)
 800a2d2:	a904      	add	r1, sp, #16
 800a2d4:	4638      	mov	r0, r7
 800a2d6:	f000 f879 	bl	800a3cc <_printf_i>
 800a2da:	e7eb      	b.n	800a2b4 <_svfiprintf_r+0x1c0>
 800a2dc:	0800d7b4 	.word	0x0800d7b4
 800a2e0:	0800d7be 	.word	0x0800d7be
 800a2e4:	00000000 	.word	0x00000000
 800a2e8:	0800a041 	.word	0x0800a041
 800a2ec:	0800d7ba 	.word	0x0800d7ba

0800a2f0 <_printf_common>:
 800a2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f4:	4616      	mov	r6, r2
 800a2f6:	4699      	mov	r9, r3
 800a2f8:	688a      	ldr	r2, [r1, #8]
 800a2fa:	690b      	ldr	r3, [r1, #16]
 800a2fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a300:	4293      	cmp	r3, r2
 800a302:	bfb8      	it	lt
 800a304:	4613      	movlt	r3, r2
 800a306:	6033      	str	r3, [r6, #0]
 800a308:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a30c:	4607      	mov	r7, r0
 800a30e:	460c      	mov	r4, r1
 800a310:	b10a      	cbz	r2, 800a316 <_printf_common+0x26>
 800a312:	3301      	adds	r3, #1
 800a314:	6033      	str	r3, [r6, #0]
 800a316:	6823      	ldr	r3, [r4, #0]
 800a318:	0699      	lsls	r1, r3, #26
 800a31a:	bf42      	ittt	mi
 800a31c:	6833      	ldrmi	r3, [r6, #0]
 800a31e:	3302      	addmi	r3, #2
 800a320:	6033      	strmi	r3, [r6, #0]
 800a322:	6825      	ldr	r5, [r4, #0]
 800a324:	f015 0506 	ands.w	r5, r5, #6
 800a328:	d106      	bne.n	800a338 <_printf_common+0x48>
 800a32a:	f104 0a19 	add.w	sl, r4, #25
 800a32e:	68e3      	ldr	r3, [r4, #12]
 800a330:	6832      	ldr	r2, [r6, #0]
 800a332:	1a9b      	subs	r3, r3, r2
 800a334:	42ab      	cmp	r3, r5
 800a336:	dc26      	bgt.n	800a386 <_printf_common+0x96>
 800a338:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a33c:	1e13      	subs	r3, r2, #0
 800a33e:	6822      	ldr	r2, [r4, #0]
 800a340:	bf18      	it	ne
 800a342:	2301      	movne	r3, #1
 800a344:	0692      	lsls	r2, r2, #26
 800a346:	d42b      	bmi.n	800a3a0 <_printf_common+0xb0>
 800a348:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a34c:	4649      	mov	r1, r9
 800a34e:	4638      	mov	r0, r7
 800a350:	47c0      	blx	r8
 800a352:	3001      	adds	r0, #1
 800a354:	d01e      	beq.n	800a394 <_printf_common+0xa4>
 800a356:	6823      	ldr	r3, [r4, #0]
 800a358:	6922      	ldr	r2, [r4, #16]
 800a35a:	f003 0306 	and.w	r3, r3, #6
 800a35e:	2b04      	cmp	r3, #4
 800a360:	bf02      	ittt	eq
 800a362:	68e5      	ldreq	r5, [r4, #12]
 800a364:	6833      	ldreq	r3, [r6, #0]
 800a366:	1aed      	subeq	r5, r5, r3
 800a368:	68a3      	ldr	r3, [r4, #8]
 800a36a:	bf0c      	ite	eq
 800a36c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a370:	2500      	movne	r5, #0
 800a372:	4293      	cmp	r3, r2
 800a374:	bfc4      	itt	gt
 800a376:	1a9b      	subgt	r3, r3, r2
 800a378:	18ed      	addgt	r5, r5, r3
 800a37a:	2600      	movs	r6, #0
 800a37c:	341a      	adds	r4, #26
 800a37e:	42b5      	cmp	r5, r6
 800a380:	d11a      	bne.n	800a3b8 <_printf_common+0xc8>
 800a382:	2000      	movs	r0, #0
 800a384:	e008      	b.n	800a398 <_printf_common+0xa8>
 800a386:	2301      	movs	r3, #1
 800a388:	4652      	mov	r2, sl
 800a38a:	4649      	mov	r1, r9
 800a38c:	4638      	mov	r0, r7
 800a38e:	47c0      	blx	r8
 800a390:	3001      	adds	r0, #1
 800a392:	d103      	bne.n	800a39c <_printf_common+0xac>
 800a394:	f04f 30ff 	mov.w	r0, #4294967295
 800a398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a39c:	3501      	adds	r5, #1
 800a39e:	e7c6      	b.n	800a32e <_printf_common+0x3e>
 800a3a0:	18e1      	adds	r1, r4, r3
 800a3a2:	1c5a      	adds	r2, r3, #1
 800a3a4:	2030      	movs	r0, #48	; 0x30
 800a3a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3aa:	4422      	add	r2, r4
 800a3ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3b4:	3302      	adds	r3, #2
 800a3b6:	e7c7      	b.n	800a348 <_printf_common+0x58>
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	4622      	mov	r2, r4
 800a3bc:	4649      	mov	r1, r9
 800a3be:	4638      	mov	r0, r7
 800a3c0:	47c0      	blx	r8
 800a3c2:	3001      	adds	r0, #1
 800a3c4:	d0e6      	beq.n	800a394 <_printf_common+0xa4>
 800a3c6:	3601      	adds	r6, #1
 800a3c8:	e7d9      	b.n	800a37e <_printf_common+0x8e>
	...

0800a3cc <_printf_i>:
 800a3cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3d0:	7e0f      	ldrb	r7, [r1, #24]
 800a3d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3d4:	2f78      	cmp	r7, #120	; 0x78
 800a3d6:	4691      	mov	r9, r2
 800a3d8:	4680      	mov	r8, r0
 800a3da:	460c      	mov	r4, r1
 800a3dc:	469a      	mov	sl, r3
 800a3de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3e2:	d807      	bhi.n	800a3f4 <_printf_i+0x28>
 800a3e4:	2f62      	cmp	r7, #98	; 0x62
 800a3e6:	d80a      	bhi.n	800a3fe <_printf_i+0x32>
 800a3e8:	2f00      	cmp	r7, #0
 800a3ea:	f000 80d4 	beq.w	800a596 <_printf_i+0x1ca>
 800a3ee:	2f58      	cmp	r7, #88	; 0x58
 800a3f0:	f000 80c0 	beq.w	800a574 <_printf_i+0x1a8>
 800a3f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a3fc:	e03a      	b.n	800a474 <_printf_i+0xa8>
 800a3fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a402:	2b15      	cmp	r3, #21
 800a404:	d8f6      	bhi.n	800a3f4 <_printf_i+0x28>
 800a406:	a101      	add	r1, pc, #4	; (adr r1, 800a40c <_printf_i+0x40>)
 800a408:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a40c:	0800a465 	.word	0x0800a465
 800a410:	0800a479 	.word	0x0800a479
 800a414:	0800a3f5 	.word	0x0800a3f5
 800a418:	0800a3f5 	.word	0x0800a3f5
 800a41c:	0800a3f5 	.word	0x0800a3f5
 800a420:	0800a3f5 	.word	0x0800a3f5
 800a424:	0800a479 	.word	0x0800a479
 800a428:	0800a3f5 	.word	0x0800a3f5
 800a42c:	0800a3f5 	.word	0x0800a3f5
 800a430:	0800a3f5 	.word	0x0800a3f5
 800a434:	0800a3f5 	.word	0x0800a3f5
 800a438:	0800a57d 	.word	0x0800a57d
 800a43c:	0800a4a5 	.word	0x0800a4a5
 800a440:	0800a537 	.word	0x0800a537
 800a444:	0800a3f5 	.word	0x0800a3f5
 800a448:	0800a3f5 	.word	0x0800a3f5
 800a44c:	0800a59f 	.word	0x0800a59f
 800a450:	0800a3f5 	.word	0x0800a3f5
 800a454:	0800a4a5 	.word	0x0800a4a5
 800a458:	0800a3f5 	.word	0x0800a3f5
 800a45c:	0800a3f5 	.word	0x0800a3f5
 800a460:	0800a53f 	.word	0x0800a53f
 800a464:	682b      	ldr	r3, [r5, #0]
 800a466:	1d1a      	adds	r2, r3, #4
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	602a      	str	r2, [r5, #0]
 800a46c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a470:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a474:	2301      	movs	r3, #1
 800a476:	e09f      	b.n	800a5b8 <_printf_i+0x1ec>
 800a478:	6820      	ldr	r0, [r4, #0]
 800a47a:	682b      	ldr	r3, [r5, #0]
 800a47c:	0607      	lsls	r7, r0, #24
 800a47e:	f103 0104 	add.w	r1, r3, #4
 800a482:	6029      	str	r1, [r5, #0]
 800a484:	d501      	bpl.n	800a48a <_printf_i+0xbe>
 800a486:	681e      	ldr	r6, [r3, #0]
 800a488:	e003      	b.n	800a492 <_printf_i+0xc6>
 800a48a:	0646      	lsls	r6, r0, #25
 800a48c:	d5fb      	bpl.n	800a486 <_printf_i+0xba>
 800a48e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a492:	2e00      	cmp	r6, #0
 800a494:	da03      	bge.n	800a49e <_printf_i+0xd2>
 800a496:	232d      	movs	r3, #45	; 0x2d
 800a498:	4276      	negs	r6, r6
 800a49a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a49e:	485a      	ldr	r0, [pc, #360]	; (800a608 <_printf_i+0x23c>)
 800a4a0:	230a      	movs	r3, #10
 800a4a2:	e012      	b.n	800a4ca <_printf_i+0xfe>
 800a4a4:	682b      	ldr	r3, [r5, #0]
 800a4a6:	6820      	ldr	r0, [r4, #0]
 800a4a8:	1d19      	adds	r1, r3, #4
 800a4aa:	6029      	str	r1, [r5, #0]
 800a4ac:	0605      	lsls	r5, r0, #24
 800a4ae:	d501      	bpl.n	800a4b4 <_printf_i+0xe8>
 800a4b0:	681e      	ldr	r6, [r3, #0]
 800a4b2:	e002      	b.n	800a4ba <_printf_i+0xee>
 800a4b4:	0641      	lsls	r1, r0, #25
 800a4b6:	d5fb      	bpl.n	800a4b0 <_printf_i+0xe4>
 800a4b8:	881e      	ldrh	r6, [r3, #0]
 800a4ba:	4853      	ldr	r0, [pc, #332]	; (800a608 <_printf_i+0x23c>)
 800a4bc:	2f6f      	cmp	r7, #111	; 0x6f
 800a4be:	bf0c      	ite	eq
 800a4c0:	2308      	moveq	r3, #8
 800a4c2:	230a      	movne	r3, #10
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4ca:	6865      	ldr	r5, [r4, #4]
 800a4cc:	60a5      	str	r5, [r4, #8]
 800a4ce:	2d00      	cmp	r5, #0
 800a4d0:	bfa2      	ittt	ge
 800a4d2:	6821      	ldrge	r1, [r4, #0]
 800a4d4:	f021 0104 	bicge.w	r1, r1, #4
 800a4d8:	6021      	strge	r1, [r4, #0]
 800a4da:	b90e      	cbnz	r6, 800a4e0 <_printf_i+0x114>
 800a4dc:	2d00      	cmp	r5, #0
 800a4de:	d04b      	beq.n	800a578 <_printf_i+0x1ac>
 800a4e0:	4615      	mov	r5, r2
 800a4e2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4e6:	fb03 6711 	mls	r7, r3, r1, r6
 800a4ea:	5dc7      	ldrb	r7, [r0, r7]
 800a4ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a4f0:	4637      	mov	r7, r6
 800a4f2:	42bb      	cmp	r3, r7
 800a4f4:	460e      	mov	r6, r1
 800a4f6:	d9f4      	bls.n	800a4e2 <_printf_i+0x116>
 800a4f8:	2b08      	cmp	r3, #8
 800a4fa:	d10b      	bne.n	800a514 <_printf_i+0x148>
 800a4fc:	6823      	ldr	r3, [r4, #0]
 800a4fe:	07de      	lsls	r6, r3, #31
 800a500:	d508      	bpl.n	800a514 <_printf_i+0x148>
 800a502:	6923      	ldr	r3, [r4, #16]
 800a504:	6861      	ldr	r1, [r4, #4]
 800a506:	4299      	cmp	r1, r3
 800a508:	bfde      	ittt	le
 800a50a:	2330      	movle	r3, #48	; 0x30
 800a50c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a510:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a514:	1b52      	subs	r2, r2, r5
 800a516:	6122      	str	r2, [r4, #16]
 800a518:	f8cd a000 	str.w	sl, [sp]
 800a51c:	464b      	mov	r3, r9
 800a51e:	aa03      	add	r2, sp, #12
 800a520:	4621      	mov	r1, r4
 800a522:	4640      	mov	r0, r8
 800a524:	f7ff fee4 	bl	800a2f0 <_printf_common>
 800a528:	3001      	adds	r0, #1
 800a52a:	d14a      	bne.n	800a5c2 <_printf_i+0x1f6>
 800a52c:	f04f 30ff 	mov.w	r0, #4294967295
 800a530:	b004      	add	sp, #16
 800a532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a536:	6823      	ldr	r3, [r4, #0]
 800a538:	f043 0320 	orr.w	r3, r3, #32
 800a53c:	6023      	str	r3, [r4, #0]
 800a53e:	4833      	ldr	r0, [pc, #204]	; (800a60c <_printf_i+0x240>)
 800a540:	2778      	movs	r7, #120	; 0x78
 800a542:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	6829      	ldr	r1, [r5, #0]
 800a54a:	061f      	lsls	r7, r3, #24
 800a54c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a550:	d402      	bmi.n	800a558 <_printf_i+0x18c>
 800a552:	065f      	lsls	r7, r3, #25
 800a554:	bf48      	it	mi
 800a556:	b2b6      	uxthmi	r6, r6
 800a558:	07df      	lsls	r7, r3, #31
 800a55a:	bf48      	it	mi
 800a55c:	f043 0320 	orrmi.w	r3, r3, #32
 800a560:	6029      	str	r1, [r5, #0]
 800a562:	bf48      	it	mi
 800a564:	6023      	strmi	r3, [r4, #0]
 800a566:	b91e      	cbnz	r6, 800a570 <_printf_i+0x1a4>
 800a568:	6823      	ldr	r3, [r4, #0]
 800a56a:	f023 0320 	bic.w	r3, r3, #32
 800a56e:	6023      	str	r3, [r4, #0]
 800a570:	2310      	movs	r3, #16
 800a572:	e7a7      	b.n	800a4c4 <_printf_i+0xf8>
 800a574:	4824      	ldr	r0, [pc, #144]	; (800a608 <_printf_i+0x23c>)
 800a576:	e7e4      	b.n	800a542 <_printf_i+0x176>
 800a578:	4615      	mov	r5, r2
 800a57a:	e7bd      	b.n	800a4f8 <_printf_i+0x12c>
 800a57c:	682b      	ldr	r3, [r5, #0]
 800a57e:	6826      	ldr	r6, [r4, #0]
 800a580:	6961      	ldr	r1, [r4, #20]
 800a582:	1d18      	adds	r0, r3, #4
 800a584:	6028      	str	r0, [r5, #0]
 800a586:	0635      	lsls	r5, r6, #24
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	d501      	bpl.n	800a590 <_printf_i+0x1c4>
 800a58c:	6019      	str	r1, [r3, #0]
 800a58e:	e002      	b.n	800a596 <_printf_i+0x1ca>
 800a590:	0670      	lsls	r0, r6, #25
 800a592:	d5fb      	bpl.n	800a58c <_printf_i+0x1c0>
 800a594:	8019      	strh	r1, [r3, #0]
 800a596:	2300      	movs	r3, #0
 800a598:	6123      	str	r3, [r4, #16]
 800a59a:	4615      	mov	r5, r2
 800a59c:	e7bc      	b.n	800a518 <_printf_i+0x14c>
 800a59e:	682b      	ldr	r3, [r5, #0]
 800a5a0:	1d1a      	adds	r2, r3, #4
 800a5a2:	602a      	str	r2, [r5, #0]
 800a5a4:	681d      	ldr	r5, [r3, #0]
 800a5a6:	6862      	ldr	r2, [r4, #4]
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	f7f5 fe10 	bl	80001d0 <memchr>
 800a5b0:	b108      	cbz	r0, 800a5b6 <_printf_i+0x1ea>
 800a5b2:	1b40      	subs	r0, r0, r5
 800a5b4:	6060      	str	r0, [r4, #4]
 800a5b6:	6863      	ldr	r3, [r4, #4]
 800a5b8:	6123      	str	r3, [r4, #16]
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5c0:	e7aa      	b.n	800a518 <_printf_i+0x14c>
 800a5c2:	6923      	ldr	r3, [r4, #16]
 800a5c4:	462a      	mov	r2, r5
 800a5c6:	4649      	mov	r1, r9
 800a5c8:	4640      	mov	r0, r8
 800a5ca:	47d0      	blx	sl
 800a5cc:	3001      	adds	r0, #1
 800a5ce:	d0ad      	beq.n	800a52c <_printf_i+0x160>
 800a5d0:	6823      	ldr	r3, [r4, #0]
 800a5d2:	079b      	lsls	r3, r3, #30
 800a5d4:	d413      	bmi.n	800a5fe <_printf_i+0x232>
 800a5d6:	68e0      	ldr	r0, [r4, #12]
 800a5d8:	9b03      	ldr	r3, [sp, #12]
 800a5da:	4298      	cmp	r0, r3
 800a5dc:	bfb8      	it	lt
 800a5de:	4618      	movlt	r0, r3
 800a5e0:	e7a6      	b.n	800a530 <_printf_i+0x164>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	4632      	mov	r2, r6
 800a5e6:	4649      	mov	r1, r9
 800a5e8:	4640      	mov	r0, r8
 800a5ea:	47d0      	blx	sl
 800a5ec:	3001      	adds	r0, #1
 800a5ee:	d09d      	beq.n	800a52c <_printf_i+0x160>
 800a5f0:	3501      	adds	r5, #1
 800a5f2:	68e3      	ldr	r3, [r4, #12]
 800a5f4:	9903      	ldr	r1, [sp, #12]
 800a5f6:	1a5b      	subs	r3, r3, r1
 800a5f8:	42ab      	cmp	r3, r5
 800a5fa:	dcf2      	bgt.n	800a5e2 <_printf_i+0x216>
 800a5fc:	e7eb      	b.n	800a5d6 <_printf_i+0x20a>
 800a5fe:	2500      	movs	r5, #0
 800a600:	f104 0619 	add.w	r6, r4, #25
 800a604:	e7f5      	b.n	800a5f2 <_printf_i+0x226>
 800a606:	bf00      	nop
 800a608:	0800d7c5 	.word	0x0800d7c5
 800a60c:	0800d7d6 	.word	0x0800d7d6

0800a610 <memmove>:
 800a610:	4288      	cmp	r0, r1
 800a612:	b510      	push	{r4, lr}
 800a614:	eb01 0402 	add.w	r4, r1, r2
 800a618:	d902      	bls.n	800a620 <memmove+0x10>
 800a61a:	4284      	cmp	r4, r0
 800a61c:	4623      	mov	r3, r4
 800a61e:	d807      	bhi.n	800a630 <memmove+0x20>
 800a620:	1e43      	subs	r3, r0, #1
 800a622:	42a1      	cmp	r1, r4
 800a624:	d008      	beq.n	800a638 <memmove+0x28>
 800a626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a62a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a62e:	e7f8      	b.n	800a622 <memmove+0x12>
 800a630:	4402      	add	r2, r0
 800a632:	4601      	mov	r1, r0
 800a634:	428a      	cmp	r2, r1
 800a636:	d100      	bne.n	800a63a <memmove+0x2a>
 800a638:	bd10      	pop	{r4, pc}
 800a63a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a63e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a642:	e7f7      	b.n	800a634 <memmove+0x24>

0800a644 <_sbrk_r>:
 800a644:	b538      	push	{r3, r4, r5, lr}
 800a646:	4d06      	ldr	r5, [pc, #24]	; (800a660 <_sbrk_r+0x1c>)
 800a648:	2300      	movs	r3, #0
 800a64a:	4604      	mov	r4, r0
 800a64c:	4608      	mov	r0, r1
 800a64e:	602b      	str	r3, [r5, #0]
 800a650:	f7f9 f94c 	bl	80038ec <_sbrk>
 800a654:	1c43      	adds	r3, r0, #1
 800a656:	d102      	bne.n	800a65e <_sbrk_r+0x1a>
 800a658:	682b      	ldr	r3, [r5, #0]
 800a65a:	b103      	cbz	r3, 800a65e <_sbrk_r+0x1a>
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	bd38      	pop	{r3, r4, r5, pc}
 800a660:	20000544 	.word	0x20000544

0800a664 <memcpy>:
 800a664:	440a      	add	r2, r1
 800a666:	4291      	cmp	r1, r2
 800a668:	f100 33ff 	add.w	r3, r0, #4294967295
 800a66c:	d100      	bne.n	800a670 <memcpy+0xc>
 800a66e:	4770      	bx	lr
 800a670:	b510      	push	{r4, lr}
 800a672:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a67a:	4291      	cmp	r1, r2
 800a67c:	d1f9      	bne.n	800a672 <memcpy+0xe>
 800a67e:	bd10      	pop	{r4, pc}

0800a680 <_realloc_r>:
 800a680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a684:	4680      	mov	r8, r0
 800a686:	4614      	mov	r4, r2
 800a688:	460e      	mov	r6, r1
 800a68a:	b921      	cbnz	r1, 800a696 <_realloc_r+0x16>
 800a68c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a690:	4611      	mov	r1, r2
 800a692:	f7ff bc49 	b.w	8009f28 <_malloc_r>
 800a696:	b92a      	cbnz	r2, 800a6a4 <_realloc_r+0x24>
 800a698:	f7ff fbda 	bl	8009e50 <_free_r>
 800a69c:	4625      	mov	r5, r4
 800a69e:	4628      	mov	r0, r5
 800a6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6a4:	f000 f81b 	bl	800a6de <_malloc_usable_size_r>
 800a6a8:	4284      	cmp	r4, r0
 800a6aa:	4607      	mov	r7, r0
 800a6ac:	d802      	bhi.n	800a6b4 <_realloc_r+0x34>
 800a6ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6b2:	d812      	bhi.n	800a6da <_realloc_r+0x5a>
 800a6b4:	4621      	mov	r1, r4
 800a6b6:	4640      	mov	r0, r8
 800a6b8:	f7ff fc36 	bl	8009f28 <_malloc_r>
 800a6bc:	4605      	mov	r5, r0
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	d0ed      	beq.n	800a69e <_realloc_r+0x1e>
 800a6c2:	42bc      	cmp	r4, r7
 800a6c4:	4622      	mov	r2, r4
 800a6c6:	4631      	mov	r1, r6
 800a6c8:	bf28      	it	cs
 800a6ca:	463a      	movcs	r2, r7
 800a6cc:	f7ff ffca 	bl	800a664 <memcpy>
 800a6d0:	4631      	mov	r1, r6
 800a6d2:	4640      	mov	r0, r8
 800a6d4:	f7ff fbbc 	bl	8009e50 <_free_r>
 800a6d8:	e7e1      	b.n	800a69e <_realloc_r+0x1e>
 800a6da:	4635      	mov	r5, r6
 800a6dc:	e7df      	b.n	800a69e <_realloc_r+0x1e>

0800a6de <_malloc_usable_size_r>:
 800a6de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6e2:	1f18      	subs	r0, r3, #4
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	bfbc      	itt	lt
 800a6e8:	580b      	ldrlt	r3, [r1, r0]
 800a6ea:	18c0      	addlt	r0, r0, r3
 800a6ec:	4770      	bx	lr
	...

0800a6f0 <_init>:
 800a6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f2:	bf00      	nop
 800a6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6f6:	bc08      	pop	{r3}
 800a6f8:	469e      	mov	lr, r3
 800a6fa:	4770      	bx	lr

0800a6fc <_fini>:
 800a6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fe:	bf00      	nop
 800a700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a702:	bc08      	pop	{r3}
 800a704:	469e      	mov	lr, r3
 800a706:	4770      	bx	lr
